(integral_def
 (integral_TCC1 0
  (integral_TCC1-1 nil 3253536795
   (""
    (inst +
     "(LAMBDA (d: [a: T, b: {x: T | a < x}, {f | integrable?(a, b, f)}]):  choose({S: real | integral?(d`1, d`2, d`3, S)}))")
    (("" (skosimp*)
      (("" (typepred "d!1`3")
        (("" (expand "integrable?")
          (("" (expand "nonempty?")
            (("" (skosimp*)
              (("" (expand "empty?")
                (("" (expand "member") (("" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (integral? const-decl "bool" integral_def nil)
    (integrable? const-decl "bool" integral_def nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T_pred const-decl "[real -> boolean]" integral_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-subtype-decl nil integral_def nil))
   nil))
 (integral_restrict_eq 0
  (integral_restrict_eq-3 nil 3280252877
   ("" (skosimp*)
    (("" (rewrite "integral_def")
      (("" (typepred "integral(a!1, b!1, f!1)")
        (("1" (expand "integral?")
          (("1" (skosimp*)
            (("1" (inst - "epsi!1")
              (("1" (skosimp*)
                (("1" (inst + "delta!1")
                  (("1" (skosimp*)
                    (("1" (inst - "P!1")
                      (("1" (assert)
                        (("1" (typepred "integral(a!1, b!1, f!1)")
                          (("1" (inst - "R!1")
                            (("1" (typepred "R!1")
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand "Riemann_sum?")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst + "xis!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "Rie_sum")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "sigma_restrict_eq")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (expand
                                                       "restrict")
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "xis!1(x!1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil) ("3" (propax) nil nil))
        nil))
      nil))
    nil)
   ((closed_interval type-eq-decl nil intervals_real "reals/")) nil)
  (integral_restrict_eq-2 nil 3277652385
   ("" (skosimp*)
    (("" (rewrite "integral_def")
      (("" (typepred "integral(a!1, b!1, f!1)")
        (("1" (expand "integral?")
          (("1" (skosimp*)
            (("1" (inst - "epsi!1")
              (("1" (skosimp*)
                (("1" (inst + "delta!1")
                  (("1" (skosimp*)
                    (("1" (inst - "P!1")
                      (("1" (assert)
                        (("1" (typepred "integral(a!1, b!1, f!1)")
                          (("1" (inst - "R!1")
                            (("1" (typepred "R!1")
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand "Riemann_sum?")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst + "xis!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "Rie_sum")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "sigma_restrict_eq")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (expand
                                                       "restrict")
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "xis!1`seq(x!1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (typepred
                                                               "xis!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (typepred
                                                             "xis!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "xis!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (skosimp*)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil) ("3" (propax) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (integral_restrict_eq-1 nil 3262002842
   ("" (skosimp*)
    (("" (rewrite "integral_def")
      (("" (typepred "integral(a!1, b!1, f!1)")
        (("1" (expand "is_integral")
          (("1" (skosimp*)
            (("1" (inst - "epsi!1")
              (("1" (skosimp*)
                (("1" (inst + "delta!1")
                  (("1" (skosimp*)
                    (("1" (inst - "P!1")
                      (("1" (assert)
                        (("1"
                          (name "RS1"
                                "Riemann_sum(a!1, b!1, P!1, f!1)")
                          (("1" (replace -1)
                            (("1"
                              (name "RS2"
                                    "Riemann_sum(a!1, b!1, P!1, g!1)")
                              (("1"
                                (replace -1)
                                (("1"
                                  (case "RS1 = RS2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -3 -7 2)
                                    (("2"
                                      (replace -1 * rl)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (replace -1 * rl)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "Riemann_sum")
                                              (("2"
                                                (rewrite
                                                 "sigma_restrict_eq")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "P!1")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "P!1")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (skosimp*)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 2)
                                                  (("4"
                                                    (skosimp*)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil) ("3" (propax) nil nil))
        nil))
      nil))
    nil)
   nil nil))
 (Integral_rew_TCC1 0
  (Integral_rew_TCC1-1 nil 3610701217
   ("" (skosimp*)
    (("" (lemma "Integrable?_rew")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Integrable?_rew formula-decl nil integral_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-subtype-decl nil integral_def nil)
    (T_pred const-decl "[real -> boolean]" integral_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)))

