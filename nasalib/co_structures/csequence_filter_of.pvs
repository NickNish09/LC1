%-----------------------------------------------------------------------------
% Determine whether one sequence of countable length is a filter of another.
%
% Author: Jerry James <loganjerry@gmail.com>
%
% This file and its accompanying proof file are distributed under the CC0 1.0
% Universal license: http://creativecommons.org/publicdomain/zero/1.0/.
%
% Version history:
%   2007 Feb 14: PVS 4.0 version
%   2011 May  6: PVS 5.0 version
%   2013 Jan 14: PVS 6.0 version
%-----------------------------------------------------------------------------
csequence_filter_of[T: TYPE]: THEORY
 BEGIN

  IMPORTING csequence_first_p[T], csequence_suffix[T]

  t: VAR T
  p, q: VAR pred[T]
  cseq, cseq1, cseq2, filt_seq, filt_seq1, filt_seq2: VAR csequence

  filter_of?(filt_seq, cseq, p): COINDUCTIVE bool =
      (empty?(filt_seq) AND NOT some(p)(cseq)) OR
       (nonempty?(filt_seq) AND
         some(p)(cseq) AND
          IF p(first(cseq))
            THEN first(filt_seq) = first(cseq) AND
                  filter_of?(rest(filt_seq), rest(cseq), p)
          ELSE filter_of?(filt_seq, rest(cseq), p)
          ENDIF)

  filter_of?_empty: THEOREM
    FORALL filt_seq, cseq, p:
      filter_of?(filt_seq, cseq, p) IMPLIES
       (empty?(filt_seq) IFF NOT some(p)(cseq))

  filter_of?_nonempty: THEOREM
    FORALL filt_seq, cseq, p:
      filter_of?(filt_seq, cseq, p) IMPLIES
       (nonempty?(filt_seq) IFF some(p)(cseq))

  filter_of?_finite: THEOREM
    FORALL filt_seq, cseq, p:
      filter_of?(filt_seq, cseq, p) AND is_finite(cseq) IMPLIES
       is_finite(filt_seq)

  filter_of?_def: THEOREM
    FORALL filt_seq, cseq, p:
      filter_of?(filt_seq, cseq, p) IMPLIES every(p)(filt_seq)

  filter_of?_first_p: THEOREM
    FORALL filt_seq, cseq, p:
      some(p)(cseq) AND filter_of?(filt_seq, cseq, p) IMPLIES
       nth(cseq, first_p(p, cseq)) = first(filt_seq)

  filter_of?_suffix: THEOREM
    FORALL filt_seq, cseq, p:
      some(p)(cseq) AND filter_of?(filt_seq, cseq, p) IMPLIES
       filter_of?(rest(filt_seq), suffix(cseq, 1 + first_p(p, cseq)), p)

  filter_of?_injective: THEOREM
    FORALL filt_seq1, filt_seq2, cseq, p:
      filter_of?(filt_seq1, cseq, p) AND filter_of?(filt_seq2, cseq, p)
       IMPLIES filt_seq1 = filt_seq2

  filter_of?_concatenate: THEOREM
    FORALL filt_seq1, filt_seq2, cseq1, cseq2, p:
      is_finite(cseq1) AND
       filter_of?(filt_seq1, cseq1, p) AND filter_of?(filt_seq2, cseq2, p)
       IMPLIES filter_of?(filt_seq1 o filt_seq2, cseq1 o cseq2, p)

  filter_of?_implication: THEOREM
    FORALL filt_seq, cseq, p, q:
      (FORALL t: pred_IMPLIES(p, q)(t)) AND
       some(p)(cseq) AND filter_of?(filt_seq, cseq, q)
       IMPLIES some(p)(filt_seq)

  filter_of?_implication_rev: THEOREM
    FORALL filt_seq, cseq, p, q:
      filter_of?(filt_seq, cseq, p) AND some(q)(filt_seq) IMPLIES
       some(q)(cseq)

  filter_of?_some: THEOREM
    FORALL filt_seq1, filt_seq2, cseq, p, q:
      filter_of?(filt_seq1, cseq, p) AND
       filter_of?(filt_seq2, filt_seq1, q)
       IMPLIES
       (some(p)(cseq) AND some(q)(filt_seq1) IFF some(pred_AND(p, q))(cseq))

  filter_of?_filter_of?: THEOREM
    FORALL filt_seq1, filt_seq2, cseq, p, q:
      filter_of?(filt_seq1, cseq, p) AND
       filter_of?(filt_seq2, filt_seq1, q)
       IMPLIES filter_of?(filt_seq2, cseq, pred_AND(p, q))

 END csequence_filter_of
