(real_facts
 (bounded?_lem 0
  (bounded?_lem-1 nil 3280072578
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "bounded?")
        (("1" (flatten)
          (("1" (expand "bounded_above?")
            (("1" (expand "bounded_below?")
              (("1" (skosimp*)
                (("1" (expand "lower_bound?")
                  (("1" (expand "upper_bound?")
                    (("1" (inst + "max(abs(x!1),abs(x!2))")
                      (("1" (skosimp*)
                        (("1" (inst - "x!3")
                          (("1" (inst - "x!3")
                            (("1" (expand "max")
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "bounded?")
          (("2" (prop)
            (("1" (expand "bounded_above?")
              (("1" (expand "upper_bound?")
                (("1" (inst + "B!1")
                  (("1" (skosimp*)
                    (("1" (inst?) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "bounded_below?")
              (("2" (expand "lower_bound?")
                (("2" (inst + "-B!1")
                  (("2" (skosimp*)
                    (("2" (inst - "s!1") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_below? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (bounded? const-decl "bool" bounded_real_defs nil))
   shostak))
 (archimedean2 0
  (archimedean2-1 nil 3258973007
   ("" (skolem!)
    (("" (lemma "axiom_of_archimedes" ("x" "1/x!1"))
      (("" (skolem!)
        (("" (assert)
          (("" (inst 1 "i!1")
            (("" (rewrite "div_mult_pos_lt1")
              (("" (rewrite "div_mult_pos_lt1")
                (("" (assert) nil))))))))))))))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (archimedean3 0
  (archimedean3-1 nil 3258973007
   ("" (skosimp)
    (("" (case "x!1 > 0")
      (("1" (lemma "archimedean2" ("x" "x!1"))
        (("1" (skolem!) (("1" (inst?) (("1" (assert) nil)))))
         ("2" (propax) nil)))
       ("2" (assert) nil))))
    nil)
   ((nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (archimedean2 formula-decl nil real_facts nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil))
 (nat_interval 0
  (nat_interval-1 nil 3258973007
   ("" (skolem!)
    (("" (lemma "wf_nat")
      (("" (expand "well_founded?")
        (("" (inst -1 "lambda (b : nat) : x!1 < b")
          (("" (beta)
            (("" (split)
              (("1" (skolem!)
                (("1" (typepred "y!1")
                  (("1" (inst -2 "y!1 - 1")
                    (("1" (assert) nil)
                     ("2" (inst 2 "y!1 - 1")
                      (("2" (assert) nil)))))))))
               ("2" (lemma "axiom_of_archimedes" ("x" "x!1"))
                (("2" (skolem!)
                  (("2" (inst?) (("2" (assert) nil))))))))))))))))))
    nil)
   ((wf_nat formula-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (i!1 skolem-const-decl "int" real_facts nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "nonneg_real" real_facts nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y!1 skolem-const-decl "(LAMBDA (b: nat): x!1 < b)" real_facts nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil))
   nil))
 (int_interval 0
  (int_interval-1 nil 3258973007
   ("" (skolem!)
    (("" (case "x!1 >= 0")
      (("1" (lemma "nat_interval" ("x" "x!1"))
        (("1" (skosimp) (("1" (inst 1 "a!1") (("1" (assert) nil)))))
         ("2" (propax) nil)))
       ("2" (lemma "nat_interval" ("x" "- x!1"))
        (("1" (skosimp)
          (("1" (case "a!1 = -x!1")
            (("1" (inst 2 "- a!1") (("1" (assert) nil)))
             ("2" (inst 3 "-a!1 - 1") (("2" (assert) nil)))))))
         ("2" (assert) nil))))))
    nil)
   ((>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_interval formula-decl nil real_facts nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil))
 (lub_is_bound 0
  (lub_is_bound-1 nil 3258973007
   ("" (skolem!)
    (("" (typepred "lub(U!1)") (("" (grind) nil nil)) nil)) nil)
   ((lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (lub_is_lub 0
  (lub_is_lub-1 nil 3258973007
   ("" (skolem!)
    (("" (typepred "lub(U!1)")
      (("" (grind :if-match nil)
        (("1" (inst? -3)
          (("1" (inst? -2) (("1" (assert) nil nil)) nil)) nil)
         ("2" (inst? -2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil))
   nil))
 (lub_closed_intv_TCC1 0
  (lub_closed_intv_TCC1-1 nil 3258973165
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "nonempty?")
        (("1" (expand "empty?")
          (("1" (expand "member")
            (("1" (inst -1 "a!1") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "bounded_above?")
        (("2" (expand "upper_bound?")
          (("2" (inst 1 "b!1")
            (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil))
   shostak))
 (lub_closed_intv 0
  (lub_closed_intv-1 nil 3258974830
   ("" (skosimp*)
    (("" (typepred "lub({x | a!1 <= x AND x <= b!1})")
      (("1" (expand "least_upper_bound?")
        (("1" (flatten)
          (("1" (expand "upper_bound?")
            (("1" (inst -1 "b!1")
              (("1" (inst -2 "b!1") (("1" (assert) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (prop)
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (inst -1 "a!1") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "bounded_above?")
            (("2" (inst + "b!1")
              (("2" (expand "upper_bound?") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a!1 skolem-const-decl "real" real_facts nil)
    (b!1 skolem-const-decl "real" real_facts nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (adherence_sup 0
  (adherence_sup-1 nil 3258973007
   ("" (skolem!)
    (("" (use "lub_is_lub" ("y" "lub(U!1) - epsilon!1"))
      (("" (assert)
        (("" (skolem!)
          (("" (inst + "x!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (lub_is_lub formula-decl nil real_facts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (glb_is_bound 0
  (glb_is_bound-1 nil 3258973007
   ("" (skolem!)
    (("" (typepred "glb(V!1)") (("" (grind) nil nil)) nil)) nil)
   ((glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (glb_is_glb 0
  (glb_is_glb-1 nil 3258973007
   ("" (skolem!)
    (("" (typepred "glb(V!1)")
      (("" (grind :if-match nil)
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (inst? -2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil))
   nil))
 (glb_closed_intv_TCC1 0
  (glb_closed_intv_TCC1-1 nil 3258974981 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil))
   shostak))
 (glb_closed_intv 0
  (glb_closed_intv-1 nil 3258975012
   ("" (skosimp*)
    (("" (typepred "glb({x | a!1 <= x AND x <= b!1})")
      (("1" (expand "greatest_lower_bound?")
        (("1" (flatten)
          (("1" (inst - "a!1")
            (("1" (expand "lower_bound?")
              (("1" (inst - "a!1")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b!1 skolem-const-decl "real" real_facts nil)
    (a!1 skolem-const-decl "real" real_facts nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (adherence_inf 0
  (adherence_inf-1 nil 3258973007
   ("" (skolem!)
    (("" (use "glb_is_glb" ("y" "glb(V!1) + epsilon!1"))
      (("" (assert)
        (("" (skolem!)
          (("" (inst + "x!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (glb_is_glb formula-decl nil real_facts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)))

