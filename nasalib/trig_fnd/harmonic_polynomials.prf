(harmonic_polynomials
 (harmonic_poly_real_TCC1 0
  (harmonic_poly_real_TCC1-1 nil 3261618989 3276290504
   ("" (skosimp*)
    (("" (lemma "even_div2" ("i" "i!1"))
      (("" (rewrite "even_or_odd") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_div2 formula-decl nil prelude_aux "../reals/")
    (even_or_odd formula-decl nil naturalnumbers nil))
   31735 630 t shostak))
 (harmonic_poly_real_TCC2 0
  (harmonic_poly_real_TCC2-1 nil 3261619116 3261619125
   ("" (grind) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   9116 340 t shostak))
 (harmonic_poly_real_TCC3 0
  (harmonic_poly_real_TCC3-1 nil 3261619130 3261619134
   ("" (grind) nil nil) proved-complete
   ((odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   3774 370 t shostak))
 (harmonic_poly_real_TCC4 0
  (harmonic_poly_real_TCC4-1 nil 3261619140 3261619145
   ("" (grind) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   4824 490 t shostak))
 (harmonic_poly_real_TCC5 0
  (harmonic_poly_real_TCC5-1 nil 3261619149 3261619153
   ("" (grind) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   3754 370 t shostak))
 (harmonic_poly_real_TCC6 0
  (harmonic_poly_real_TCC6-1 nil 3261619159 3261619167
   ("" (grind) nil nil) proved-complete
   ((odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil))
   8006 170 t shostak))
 (harmonic_poly_real_TCC7 0
  (harmonic_poly_real_TCC7-1 nil 3261620027 3261620031
   ("" (grind) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil))
   3844 170 t shostak))
 (harmonic_poly_imag_TCC1 0
  (harmonic_poly_imag_TCC1-1 nil 3261619175 3276290540
   ("" (skosimp*)
    (("" (lemma "odd_div2" ("i" "i!1"))
      (("" (rewrite "even_or_odd") (("" (assert) nil nil)) nil)) nil))
    nil)
   proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_div2 formula-decl nil prelude_aux "../reals/")
    (even_or_odd formula-decl nil naturalnumbers nil))
   27514 560 t shostak))
 (harmonic_poly_imag_TCC2 0
  (harmonic_poly_imag_TCC2-1 nil 3261619184 3261619188
   ("" (grind) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   3824 120 t shostak))
 (harmonic_poly_imag_TCC3 0
  (harmonic_poly_imag_TCC3-1 nil 3261619194 3261619199
   ("" (grind) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   4562 260 t shostak))
 (harmonic_poly_imag_TCC4 0
  (harmonic_poly_imag_TCC4-1 nil 3261619204 3261619209
   ("" (grind) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   5008 130 t shostak))
 (harmonic_poly_imag_TCC5 0
  (harmonic_poly_imag_TCC5-1 nil 3261620046 3261620052
   ("" (grind) nil nil) proved-complete
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   5867 130 t shostak))
 (harmonic_polynomial_real_n1 0
  (harmonic_polynomial_real_n1-1 nil 3261619224 3261625898
   ("" (skolem 1 ("x" "y"))
    (("" (expand "harmonic_poly_real")
      (("" (expand "sigma")
        (("" (expand "sigma")
          (("" (rewrite "expt_x0")
            (("" (rewrite "expt_x1")
              (("" (rewrite "C_0")
                (("" (case "odd?(0)")
                  (("1" (expand "odd?") (("1" (propax) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((harmonic_poly_real const-decl "real" harmonic_polynomials nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (odd? const-decl "bool" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (C_0 formula-decl nil binomial nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (sigma def-decl "real" sigma "../reals/"))
   725 690 t shostak))
 (harmonic_polynomial_imag_n1 0
  (harmonic_polynomial_imag_n1-1 nil 3261619351 3261625899
   ("" (skolem 1 ("x" "y"))
    (("" (expand "harmonic_poly_imag")
      (("" (expand "sigma")
        (("" (expand "sigma")
          (("" (rewrite "expt_x1")
            (("" (rewrite "expt_x0")
              (("" (rewrite "C_n")
                (("" (case "even?(1)")
                  (("1" (expand "even?") (("1" (propax) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((harmonic_poly_imag const-decl "real" harmonic_polynomials nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (even? const-decl "bool" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (C_n formula-decl nil binomial nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (sigma def-decl "real" sigma "../reals/"))
   712 700 t shostak))
 (harmonic_polynomial_real_rec 0
  (harmonic_polynomial_real_rec-1 nil 3261620367 3261625909
   ("" (skolem 1 ("n" "x" "y"))
    (("" (expand "harmonic_poly_real")
      (("" (expand "harmonic_poly_imag")
        ((""
          (name "F1" "LAMBDA (i: nat):
              IF i > 1 + n OR odd?(i) THEN 0
              ELSE C(1 + n, i) * (-1) ^ (i / 2) *
                    (IF i = 0 THEN x ^ (1 + n)
                     ELSIF i = 1 + n THEN y ^ (1 + n)
                     ELSE (x ^ (1 - i + n)) * y ^ i
                     ENDIF)
              ENDIF")
          (("1" (replace -1)
            (("1"
              (lemma "sigma_scal[nat]"
               ("low" "0" "high" "n" "a" "x" "F" " LAMBDA (i: nat):
                IF i > n OR odd?(i) THEN 0
                ELSE C(n, i) * (-1) ^ (i / 2) *
                      (IF i = 0 THEN x ^ n
                       ELSIF i = n THEN y ^ n
                       ELSE x ^ (n - i) * y ^ i
                       ENDIF)
                ENDIF"))
              (("1" (replace -1 1 rl)
                (("1" (hide -1)
                  (("1"
                    (name "F2" "LAMBDA (i_1: nat):
               x *
                (LAMBDA (i: nat):
                   IF i > n OR odd?(i) THEN 0
                   ELSE C(n, i) * (-1) ^ (i / 2) *
                         (IF i = 0 THEN x ^ n
                          ELSIF i = n THEN y ^ n
                          ELSE x ^ (n - i) * y ^ i
                          ENDIF)
                   ENDIF)
                    (i_1)")
                    (("1" (replace -1)
                      (("1"
                        (name "F3" "LAMBDA (i: nat):
                 IF i > n OR even?(i) THEN 0
                 ELSE C(n, i) * (-1) ^ ((i - 1) / 2) *
                       (IF i = n THEN y ^ n ELSE x ^ (n - i) * y ^ i ENDIF)
                 ENDIF")
                        (("1" (replace -1)
                          (("1"
                            (lemma "sigma_scal[nat]"
                             ("low" "0" "high" "n" "F" "F3" "a" "y"))
                            (("1" (replace -1 1 rl)
                              (("1"
                                (case
                                 "sigma(0, n, F2) = sigma(0, n+1, F2)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (case
                                     "FORALL (n:nat): sigma(0, n, LAMBDA (i: nat): y * F3(i)) = sigma(0,n+1, LAMBDA (i:nat): IF i = 0 THEN 0 ELSE y*F3(i-1) ENDIF)")
                                    (("1"
                                      (inst - "n")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (lemma
                                           "sigma_minus[nat]"
                                           ("low"
                                            "0"
                                            "high"
                                            "n+1"
                                            "F"
                                            "F2"
                                            "G"
                                            "LAMBDA (i: nat): IF i = 0 THEN 0 ELSE y * F3(i - 1) ENDIF"))
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (hide -1 -2 -3 -4)
                                              (("1"
                                                (lemma
                                                 "sigma_eq[nat]"
                                                 ("low"
                                                  "0"
                                                  "high"
                                                  "n+1"
                                                  "F"
                                                  "F1"
                                                  "G"
                                                  "LAMBDA (i_1: nat):
               F2(i_1) -
                (LAMBDA (i: nat): IF i = 0 THEN 0 ELSE y * F3(i - 1) ENDIF)
                    (i_1)"))
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (typepred
                                                         "n!1")
                                                        (("2"
                                                          (expand "F1")
                                                          (("2"
                                                            (hide
                                                             -5
                                                             -4
                                                             -3)
                                                            (("2"
                                                              (expand
                                                               "F2")
                                                              (("2"
                                                                (expand
                                                                 "F3")
                                                                (("2"
                                                                  (case
                                                                   "n!1=0")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "C_0")
                                                                      (("1"
                                                                        (rewrite
                                                                         "C_0")
                                                                        (("1"
                                                                          (rewrite
                                                                           "expt_x0")
                                                                          (("1"
                                                                            (case
                                                                             "odd?(0)")
                                                                            (("1"
                                                                              (expand
                                                                               "odd?")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   2
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "n!1= 1+n")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace

                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "C_n")
                                                                            (("1"
                                                                              (rewrite
                                                                               "C_n")
                                                                              (("1"
                                                                                (case
                                                                                 "even?(n)")
                                                                                (("1"
                                                                                  (case
                                                                                   "odd?(n+1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      1))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "even?")
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (replace

                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "odd?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "j!1")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "NOT (odd?(1+n))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "even_or_odd")
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "odd?")
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (replace

                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "div_cancel1"
                                                                                                   ("x"
                                                                                                    "j!1"
                                                                                                    "n0z"
                                                                                                    "2"))
                                                                                                  (("1"
                                                                                                    (replace

                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "div_cancel1"
                                                                                                       ("x"
                                                                                                        "j!1+1"
                                                                                                        "n0z"
                                                                                                        "2"))
                                                                                                      (("1"
                                                                                                        (replace

                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (replace

                                                                                                           -3
                                                                                                           2

                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (replace

                                                                                                             -3
                                                                                                             *

                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "n")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "expt"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "expt"
                                                                                                                       2
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "odd?")
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (replace

                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "even?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "j!1")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "odd?(n!1)")
                                                                          (("1"
                                                                            (case
                                                                             "even?(n!1-1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                -1))
                                                                              (("2"
                                                                                (expand
                                                                                 "odd?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace

                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "even?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "j!1")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "NOT (even?(n!1-1))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "even_or_odd")
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "odd?")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "div_cancel1"
                                                                                         ("x"
                                                                                          "1+j!1"
                                                                                          "n0z"
                                                                                          "2"))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "div_cancel1"
                                                                                           ("x"
                                                                                            "j!1"
                                                                                            "n0z"
                                                                                            "2"))
                                                                                          (("1"
                                                                                            (case
                                                                                             "(n!1 - 2) / 2 = j!1")
                                                                                            (("1"
                                                                                              (replace

                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "(n!1) / 2 = j!1+1")
                                                                                                (("1"
                                                                                                  (replace

                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "n!1=n")
                                                                                                    (("1"
                                                                                                      (replace

                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "C_n")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "C_n_1")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "C_n_1")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "expt_plus"
                                                                                                               ("n0x"
                                                                                                                "-1"
                                                                                                                "i"
                                                                                                                "1"
                                                                                                                "j"
                                                                                                                "j!1"))
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "expt_x1"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace

                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (name-replace
                                                                                                                     "K1"
                                                                                                                     "(-1)^j!1")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "expt_x1"
                                                                                                                       3)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           3
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             3
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "expt"
                                                                                                                               3
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "C_n_plus_1"
                                                                                                         ("n"
                                                                                                          "n"
                                                                                                          "k"
                                                                                                          "n!1"))
                                                                                                        (("2"
                                                                                                          (replace

                                                                                                           -1
                                                                                                           4)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "expt_plus"
                                                                                                             ("n0x"
                                                                                                              "-1"
                                                                                                              "i"
                                                                                                              "1"
                                                                                                              "j"
                                                                                                              "j!1"))
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "expt_x1"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (replace

                                                                                                                 -1
                                                                                                                 4)
                                                                                                                (("2"
                                                                                                                  (name-replace
                                                                                                                   "K10"
                                                                                                                   "(-1)^j!1")
                                                                                                                  (("2"
                                                                                                                    (name-replace
                                                                                                                     "K11"
                                                                                                                     "C(n,n!1-1)")
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "K12"
                                                                                                                       "C(n,n!1)")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         4)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           4
                                                                                                                           7)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             4
                                                                                                                             6)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "expt"
                                                                                                                               4
                                                                                                                               4)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "expt"
                                                                                                                                 4
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   4
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     4
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-4
                                                                                                    1
                                                                                                    -3))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                -1
                                                                                                -3))
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "even?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "odd?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "j!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (induct "n")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "sigma")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skolem 1 ("i"))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "sigma" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 -3))
                                  (("2"
                                    (expand "sigma" 1 2)
                                    (("2"
                                      (expand "F2" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (skosimp*)
                            (("3" (rewrite "even_or_odd")
                              (("3"
                                (expand "odd?")
                                (("3"
                                  (skosimp*)
                                  (("3"
                                    (lemma
                                     "div_cancel1"
                                     ("x" "j!1" "n0z" "2"))
                                    (("3"
                                      (replace -2 2)
                                      (("3"
                                        (replace -1 2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide-all-but 1) (("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                     ("3" (hide-all-but 1)
                      (("3" (skosimp*)
                        (("3" (case "even?(i!1)")
                          (("1" (expand "even?")
                            (("1" (skosimp*)
                              (("1"
                                (lemma
                                 "div_cancel1"
                                 ("x" "j!1" "n0z" "2"))
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "even_or_odd") nil nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1) (("4" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
               ("3" (hide-all-but 1)
                (("3" (skosimp*)
                  (("3" (case "even?(i!1)")
                    (("1" (expand "even?")
                      (("1" (skosimp*)
                        (("1" (replace -1)
                          (("1"
                            (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "even_or_odd") nil nil))
                    nil))
                  nil))
                nil)
               ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil)
               ("5" (hide-all-but 1) (("5" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3" (case "even?(i!1)")
                (("1" (expand "even?")
                  (("1" (skosimp*)
                    (("1" (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                      (("1" (replace -2)
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "even_or_odd") nil nil))
                nil))
              nil))
            nil)
           ("4" (hide 2) (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((harmonic_poly_real const-decl "real" harmonic_polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (C const-decl "posnat" binomial nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd? const-decl "bool" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_scal formula-decl nil sigma "../reals/")
    (integer nonempty-type-from-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sigma_minus formula-decl nil sigma "../reals/") nil nil
    (C_0 formula-decl nil binomial nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (C_n formula-decl nil binomial nil)
    (C_n_plus_1 formula-decl nil binomial nil)
    (C_n_1 formula-decl nil binomial nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (expt_x1 formula-decl nil exponentiation nil) nil
    (subrange type-eq-decl nil integers nil)
    (sigma_eq formula-decl nil sigma "../reals/")
    (sigma def-decl "real" sigma "../reals/")
    (even? const-decl "bool" integers nil)
    (harmonic_poly_imag const-decl "real" harmonic_polynomials nil))
   9769 9200 t shostak))
 (harmonic_polynomial_imag_rec 0
  (harmonic_polynomial_imag_rec-1 nil 3261625972 3261628417
   ("" (skolem 1 ("n" "x" "y"))
    (("" (expand "harmonic_poly_imag")
      (("" (expand "harmonic_poly_real")
        ((""
          (name-replace "F1" "LAMBDA (i: nat):
                 IF i > n OR odd?(i) THEN 0
                 ELSE C(n, i) * (-1) ^ (i / 2) *
                       (IF i = 0 THEN x ^ n
                        ELSIF i = n THEN y ^ n
                        ELSE x ^ (n - i) * y ^ i
                        ENDIF)
                 ENDIF")
          (("1"
            (name-replace "F2" "LAMBDA (i: nat):
                IF i > n OR even?(i) THEN 0
                ELSE C(n, i) * (-1) ^ ((i - 1) / 2) *
                      (IF i = n THEN y ^ n ELSE x ^ (n - i) * y ^ i ENDIF)
                ENDIF")
            (("1"
              (name-replace "F3" "LAMBDA (i: nat):
              IF i > 1 + n OR even?(i) THEN 0
              ELSE C(1 + n, i) * (-1) ^ ((i - 1) / 2) *
                    (IF i = 1 + n THEN y ^ (1 + n)
                     ELSE (x ^ (1 - i + n)) * y ^ i
                     ENDIF)
              ENDIF")
              (("1"
                (lemma "sigma_scal"
                 ("low" "0" "high" "n" "a" "x" "F" "F2"))
                (("1" (replace -1 1 rl)
                  (("1"
                    (lemma "sigma_scal"
                     ("low" "0" "high" "n" "a" "y" "F" "F1"))
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1 -2)
                        (("1"
                          (case "FORALL (n:nat): sigma(0, n, LAMBDA (i: nat): y * F1(i)) = sigma(0,n+1, LAMBDA (i:nat): IF i=0 THEN 0 ELSE y*F1(i-1) ENDIF)")
                          (("1" (inst - "n")
                            (("1" (replace -1)
                              (("1"
                                (case
                                 "sigma(0, n, LAMBDA (i: nat): x * F2(i)) = sigma(0, n+1
, LAMBDA (i: nat): x * F2(i))")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (lemma
                                     "sigma_sum"
                                     ("low"
                                      "0"
                                      "high"
                                      "1+n"
                                      "F"
                                      "LAMBDA (i: nat): x * F2(i)"
                                      "G"
                                      "LAMBDA (i: nat): IF i = 0 THEN 0 ELSE y * F1(i - 1) ENDIF"))
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (lemma
                                           "sigma_eq[nat]"
                                           ("low"
                                            "0"
                                            "high"
                                            "1+n"
                                            "F"
                                            "F3"
                                            "G"
                                            "LAMBDA (i_1: nat):
               (LAMBDA (i: nat): x * F2(i))(i_1) +
                (LAMBDA (i: nat): IF i = 0 THEN 0 ELSE y * F1(i - 1) ENDIF)
                    (i_1)"))
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skolem 1 ("i"))
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand "F3")
                                                    (("2"
                                                      (expand "F2")
                                                      (("2"
                                                        (expand "F1")
                                                        (("2"
                                                          (case
                                                           "even?(i)")
                                                          (("1"
                                                            (case
                                                             "odd?(i-1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (expand
                                                                 "even?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (replace

                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "odd?")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "j!1-1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT (odd?(i-1))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   "i= 1+n")
                                                                  (("1"
                                                                    (replace

                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "C_n")
                                                                        (("1"
                                                                          (rewrite
                                                                           "C_n")
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             2
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "^"
                                                                               2
                                                                               3)
                                                                              (("1"
                                                                                (expand
                                                                                 "expt"
                                                                                 2
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "i=0")
                                                                      (("1"
                                                                        (replace

                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "even?")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "i=1")
                                                                        (("1"
                                                                          (replace

                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (rewrite
                                                                               "expt_x0")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "expt_x1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "C_0")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "C_1")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "C_1")
                                                                                      (("1"
                                                                                        (case
                                                                                         "n=1")
                                                                                        (("1"
                                                                                          (replace

                                                                                           -1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "expt_x1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "expt_x1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^"
                                                                                             5)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt"
                                                                                               5
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "C_n_plus_1"
                                                                             ("n"
                                                                              "n"
                                                                              "k"
                                                                              "i"))
                                                                            (("2"
                                                                              (replace

                                                                               -1
                                                                               5)
                                                                              (("2"
                                                                                (expand
                                                                                 "^"
                                                                                 5
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "^"
                                                                                   5
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^"
                                                                                     5
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       5
                                                                                       4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "^"
                                                                                         5
                                                                                         5)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "^"
                                                                                           5
                                                                                           6)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt"
                                                                                             5)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^"
                                                                                               5
                                                                                               6)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 5
                                                                                                 4)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "i=n")
                                                                                                  (("1"
                                                                                                    (replace

                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "expt"
                                                                                                         5
                                                                                                         6)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "expt"
                                                                                                           5
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "expt"
                                                                                                             5
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (expand
                                                                 "odd?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "even?")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "1+j!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (expand "sigma" 1 2)
                                    (("2"
                                      (expand "F2")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (induct "n")
                              (("1" (grind) nil nil)
                               ("2"
                                (skolem 1 ("j"))
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "sigma" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2) (("3" (grind) nil nil)) nil)
                           ("4" (hide 2) (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil)
               ("3" (hide 2)
                (("3" (skosimp*)
                  (("3" (rewrite "even_or_odd")
                    (("3" (expand "odd?")
                      (("3" (skosimp*)
                        (("3" (replace -1 2)
                          (("3"
                            (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                            (("3" (replace -1) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2) (("4" (grind) nil nil)) nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil)
             ("3" (hide 2)
              (("3" (skosimp*)
                (("3" (rewrite "even_or_odd")
                  (("3" (expand "odd?")
                    (("3" (skosimp*)
                      (("3" (replace -1)
                        (("3"
                          (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                          (("3" (replace -1) (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3" (case "even?(i!1)")
                (("1" (expand "even?")
                  (("1" (skosimp*)
                    (("1" (replace -1)
                      (("1" (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "even_or_odd") nil nil))
                nil))
              nil))
            nil)
           ("4" (hide 2) (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((harmonic_poly_imag const-decl "real" harmonic_polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (C const-decl "posnat" binomial nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma "../reals/")
    (integer nonempty-type-from-decl nil integers nil)
    (sigma_eq formula-decl nil sigma "../reals/")
    (subrange type-eq-decl nil integers nil) nil
    (expt def-decl "real" exponentiation nil)
    (C_n formula-decl nil binomial nil)
    (C_n_plus_1 formula-decl nil binomial nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (C_0 formula-decl nil binomial nil)
    (C_1 formula-decl nil binomial nil)
    (expt_x1 formula-decl nil exponentiation nil) nil nil
    (sigma_sum formula-decl nil sigma "../reals/")
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sigma_scal formula-decl nil sigma "../reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (harmonic_poly_real const-decl "real" harmonic_polynomials nil))
   2444997 30530 t shostak))
 (harmonic_polynomial_modulus_TCC1 0
  (harmonic_polynomial_modulus_TCC1-1 nil 3261625909 3261625944
   ("" (grind) nil nil) proved-complete
   ((sq const-decl "nonneg_real" sq "../reals/")) 3629 210 t shostak))
 (harmonic_polynomial_modulus 0
  (harmonic_polynomial_modulus-1 nil 3261625059 3261625911
   ("" (skolem 1 ("_" "x" "y"))
    (("" (induct "pn")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skolem 1 ("i"))
        (("3" (flatten)
          (("3" (case "i=0")
            (("1" (replace -1)
              (("1" (hide -1 -2 -3)
                (("1" (rewrite "harmonic_polynomial_real_n1")
                  (("1" (rewrite "harmonic_polynomial_imag_n1")
                    (("1" (rewrite "expt_x1") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide -2 1)
                (("2" (rewrite "harmonic_polynomial_real_rec" 1)
                  (("2" (rewrite "harmonic_polynomial_imag_rec" 1)
                    (("2"
                      (name-replace "U" "harmonic_poly_real(i, x, y)")
                      (("2"
                        (name-replace "V"
                         "harmonic_poly_imag(i, x, y)")
                        (("2" (expand "sq")
                          (("2" (case "x=0")
                            (("1" (replace -1)
                              (("1"
                                (case "y=0")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "^" 1)
                                    (("1"
                                      (expand "expt")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "sq_nz_pos" ("nz" "y"))
                                  (("1"
                                    (expand "sq")
                                    (("1"
                                      (lemma
                                       "expt_plus"
                                       ("n0x" "y*y" "i" "1" "j" "i"))
                                      (("1"
                                        (rewrite "expt_x1" -1)
                                        (("1"
                                          (replace -1 2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "sq_pos" ("a" "y"))
                              (("2"
                                (lemma "sq_nz_pos" ("nz" "x"))
                                (("1"
                                  (expand "sq")
                                  (("1"
                                    (lemma
                                     "expt_plus"
                                     ("n0x" "x*x+y*y" "i" "1" "j" "i"))
                                    (("1"
                                      (rewrite "expt_x1" -1)
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (replace -4 2 rl)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "../reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (harmonic_poly_real const-decl "real" harmonic_polynomials nil)
    (harmonic_poly_imag const-decl "real" harmonic_polynomials nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (harmonic_polynomial_real_rec formula-decl nil harmonic_polynomials
     nil)
    (sq_pos formula-decl nil sq "../reals/")
    (sq_nz_pos judgement-tcc nil sq "../reals/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (harmonic_polynomial_imag_rec formula-decl nil harmonic_polynomials
     nil)
    (harmonic_polynomial_real_n1 formula-decl nil harmonic_polynomials
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (harmonic_polynomial_imag_n1 formula-decl nil harmonic_polynomials
     nil))
   2212 2110 t shostak)))

