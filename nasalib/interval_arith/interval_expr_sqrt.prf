(interval_expr_sqrt
 (sqrt_is_safe 0
  (sqrt_is_safe-1 nil 3567440799 ("" (grind :exclude "sqrt") nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sqrt_safe const-decl "real" interval_expr_sqrt nil))
   shostak))
 (Sqrt_Inclusion 0
  (Sqrt_Inclusion-2 nil 3567440037
   ("" (skeep)
    (("" (expand "Inclusion?")
      (("" (skeep :preds? t)
        (("" (expand "sqrt_safe")
          (("" (case-replace "max(x,0) = x")
            (("1" (rewrite "Sqrt_inclusion") nil nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Inclusion? const-decl "bool" interval nil)
    (sqrt_safe const-decl "real" interval_expr_sqrt nil)
    (|##| const-decl "bool" interval nil)
    (Ge const-decl "bool" interval nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NonNeg_Precondition name-judgement "(Precondition?)" interval nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Sqrt_inclusion formula-decl nil interval_sqrt nil)
    (Interval type-eq-decl nil interval nil)
    (NonNeg? const-decl "bool" interval nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (Sqrt_Inclusion-1 nil 3567439945 ("" (judgement-tcc) nil nil) nil
   nil))
 (Sqrt_Fundamental 0
  (Sqrt_Fundamental-1 nil 3567440118
   ("" (skeep)
    (("" (expand "Fundamental?")
      (("" (skeep) (("" (rewrite "Sqrt_fundamental") nil nil)) nil))
      nil))
    nil)
   ((Fundamental? const-decl "bool" interval nil)
    (Sqrt_fundamental formula-decl nil interval_sqrt nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Proper? const-decl "bool" interval nil)
    (ProperInterval type-eq-decl nil interval nil)
    (NonNeg? const-decl "bool" interval nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (SQRT_n_TCC1 0
  (SQRT_n_TCC1-1 nil 3567424724 ("" (assert) nil nil)
   ((Sqrt_Fundamental application-judgement "(Fundamental?(NonNeg?))"
     interval_expr_sqrt nil)
    (Sqrt_Inclusion application-judgement
     "(Inclusion?(NonNeg?, sqrt_safe))" interval_expr_sqrt nil))
   nil)))

