%------------------------------------------------------------------------------
% Complex Numbers and basic arithmetic
%
%     Author: David Lester, Manchester University
%
%     Version 1.0            5/29/04   Initial version (DRL)
%     Version 2.0            10/7/09   PVS decision procedure compatible (DRL)
%     Version 2.1            16/3/11   Modified equality definition (DRL)
%
%------------------------------------------------------------------------------

complex_types: THEORY

BEGIN

  IMPORTING reals@sq,
            reals@sqrt

  complex: DATATYPE BEGIN complex_(x,y:real): complex_? END complex

  z,z1,z2,z3: VAR complex
  x,y:        VAR real

  Re(z):real = cases z of complex_(x,y): x endcases
  Im(z):real = cases z of complex_(x,y): y endcases

  Re_rew: LEMMA Re(complex_(x,y)) = x
  Im_rew: LEMMA Im(complex_(x,y)) = y

  AUTO_REWRITE+ Re_rew
  AUTO_REWRITE+ Im_rew

  eq_rew: LEMMA equalities.=(z1,z2) <=> Re(z1) = Re(z2) AND Im(z1) = Im(z2)

  AUTO_REWRITE+ eq_rew

  nzcomplex:       TYPE+ = {z | Re(z)/=0 OR Im(z)/=0} CONTAINING complex_(1,0)
  nonzero_complex: TYPE+ = nzcomplex

  complex_i:nzcomplex = complex_(0,1)
  
  Re_i: LEMMA Re(complex_i) = 0
  Im_i: LEMMA Im(complex_i) = 1

  AUTO_REWRITE+ Re_i
  AUTO_REWRITE+ Im_i

  n0z,n0z1,n0z2: VAR nzcomplex
  n0x: VAR nzreal

  conjugate(z):complex = complex_(Re(z),-Im(z))

  Re_conjugate: LEMMA Re(conjugate(z)) = Re(z)
  Im_conjugate: LEMMA Im(conjugate(z)) = -Im(z)

  AUTO_REWRITE+ Re_conjugate
  AUTO_REWRITE+ Im_conjugate

  sq_abs(z):nnreal     = sq(Re(z)) + sq(Im(z))
  nz_sq_abs_pos:  JUDGEMENT sq_abs(n0z) HAS_TYPE posreal

;
  +(z1,z2):complex = complex_(Re(z1)+Re(z2),Im(z1)+Im(z2));
  +(x,z)  :complex = complex_(x+Re(z),Im(z));
  +(z,x)  :complex = complex_(Re(z)+x,Im(z));

  -(z)    :complex = complex_(-Re(z),-Im(z));

  -(z1,z2):complex = complex_(Re(z1)-Re(z2),Im(z1)-Im(z2));
  -(x,z)  :complex = complex_(x-Re(z),Im(z));
  -(z,x)  :complex = complex_(Re(z)-x,Im(z));

  *(z1,z2):complex = complex_(Re(z1)*Re(z2) - Im(z1)*Im(z2),
                              Im(z1)*Re(z2) + Re(z1)*Im(z2));
  *(x,z)  :complex = complex_(x*Re(z),x*Im(z));
  *(z,x)  :complex = complex_(Re(z)*x,Im(z)*x);

  /(z,n0z):complex = complex_((Re(z)*Re(n0z) + Im(z)*Im(n0z))/sq_abs(n0z),
                              (Im(z)*Re(n0z) - Re(z)*Im(n0z))/sq_abs(n0z));
  /(x,n0z):complex = complex_((x*Re(n0z))/sq_abs(n0z),
                             ((-x)*Im(n0z))/sq_abs(n0z));
  /(z,n0x):complex = complex_(Re(z)/n0x,Im(z)/n0x);
  sq(z):   complex = z*z

  complex_sq_def:   LEMMA sq(z)       = z*z
  complex_neg_neg:  LEMMA -(-z)       = z
  complex_plus_neg: LEMMA z1 + (-z2)  = z1-z2
  complex_div_def:  LEMMA z * (1/n0z) = z/n0z

  Re_add1: LEMMA Re(z1+z2) = Re(z1)+Re(z2)
  Re_add2: LEMMA Re(x+z)   = x+Re(z)
  Re_add3: LEMMA Re(z+x)   = Re(z)+x

  Re_neg1: LEMMA Re(-z)    = -Re(z)

  Re_sub1: LEMMA Re(z1-z2) = Re(z1)-Re(z2)
  Re_sub2: LEMMA Re(x-z)   = x-Re(z)
  Re_sub3: LEMMA Re(z-x)   = Re(z)-x

  Re_mul1: LEMMA Re(z1*z2) = Re(z1)*Re(z2) - Im(z1)*Im(z2)
  Re_mul2: LEMMA Re(x*z)   = x*Re(z)
  Re_mul3: LEMMA Re(z*x)   = Re(z)*x

  Re_div1: LEMMA Re(z/n0z) = (Re(z)*Re(n0z) + Im(z)*Im(n0z))/sq_abs(n0z)
  Re_div2: LEMMA Re(x/n0z) = (x*Re(n0z))/sq_abs(n0z)
  Re_div3: LEMMA Re(z/n0x) = Re(z)/n0x

  Im_add1: LEMMA Im(z1+z2) = Im(z1)+Im(z2)
  Im_add2: LEMMA Im(x+z)   = Im(z)
  Im_add3: LEMMA Im(z+x)   = Im(z)

  Im_neg1: LEMMA Im(-z)    = -Im(z)

  Im_sub1: LEMMA Im(z1-z2) = Im(z1)-Im(z2)
  Im_sub2: LEMMA Im(x-z)   = Im(z)
  Im_sub3: LEMMA Im(z-x)   = Im(z)

  Im_mul1: LEMMA Im(z1*z2) = Im(z1)*Re(z2) + Re(z1)*Im(z2)
  Im_mul2: LEMMA Im(x*z)   = x*Im(z)
  Im_mul3: LEMMA Im(z*x)   = Im(z)*x

  Im_div1: LEMMA Im(z/n0z) = (Im(z)*Re(n0z) - Re(z)*Im(n0z))/sq_abs(n0z)
  Im_div2: LEMMA Im(x/n0z) = ((-x)*Im(n0z))/sq_abs(n0z)
  Im_div3: LEMMA Im(z/n0x) = Im(z)/n0x

  AUTO_REWRITE+ Re_add1
  AUTO_REWRITE+ Re_add2
  AUTO_REWRITE+ Re_add3
  AUTO_REWRITE+ Re_neg1
  AUTO_REWRITE+ Re_sub1
  AUTO_REWRITE+ Re_sub2
  AUTO_REWRITE+ Re_sub3
  AUTO_REWRITE+ Re_mul1
  AUTO_REWRITE+ Re_mul2
  AUTO_REWRITE+ Re_mul3
  AUTO_REWRITE+ Re_div1
  AUTO_REWRITE+ Re_div2
  AUTO_REWRITE+ Re_div3
  AUTO_REWRITE+ Im_add1
  AUTO_REWRITE+ Im_add2
  AUTO_REWRITE+ Im_add3
  AUTO_REWRITE+ Im_neg1
  AUTO_REWRITE+ Im_sub1
  AUTO_REWRITE+ Im_sub2
  AUTO_REWRITE+ Im_sub3
  AUTO_REWRITE+ Im_mul1
  AUTO_REWRITE+ Im_mul2
  AUTO_REWRITE+ Im_mul3
  AUTO_REWRITE+ Im_div1
  AUTO_REWRITE+ Im_div2
  AUTO_REWRITE+ Im_div3
;
  =(z1,z2): bool = Re(z1) = Re(z2) AND Im(z1) = Im(z2);
  =(x,z)  : bool = x = Re(z) AND Im(z) = 0;
  =(z,x)  : bool = Re(z) = x AND Im(z) = 0;
  /=(z1,z2):bool = NOT (z1 = z2);
  /=(x,z) : bool = x /= Re(z) OR Im(z) /= 0;
  /=(z,x) : bool = Re(z) /= x OR Im(z) /= 0;

  c_eq1: LEMMA z1  = z2 <=> Re(z1) = Re(z2) AND Im(z1) = Im(z2)
  c_eq2: LEMMA x   = z  <=> x = Re(z) AND Im(z) = 0
  c_eq3: LEMMA z   = x  <=> Re(z) = x AND Im(z) = 0
  c_ne1: LEMMA z1 /= z2 <=> NOT (z1 = z2)
  c_ne2: LEMMA x  /= z  <=> x /= Re(z) OR Im(z) /= 0
  c_ne3: LEMMA z  /= x  <=> Re(z) /= x OR Im(z) /= 0

  AUTO_REWRITE+ c_eq1
  AUTO_REWRITE+ c_eq2
  AUTO_REWRITE+ c_eq3
  AUTO_REWRITE+ c_ne1
  AUTO_REWRITE+ c_ne2
  AUTO_REWRITE+ c_ne3

  complex_commutative_add:  LEMMA z1+z2      = z2+z1
  complex_associative_add:  LEMMA (z1+z2)+z3 = z1+(z2+z3)
  complex_commutative_mult: LEMMA z1*z2      = z2*z1
  complex_associative_mult: LEMMA (z1*z2)*z3 = z1*(z2*z3)

  complex_div_cancel1: LEMMA n0z * (z/n0z) = z
  complex_div_cancel2: LEMMA (z/n0z) * n0z = z
  complex_div_cancel3: LEMMA z1/n0z = z2 IFF z1 = z2 * n0z
  complex_div_cancel4: LEMMA z2 = z1/n0z IFF z2 * n0z = z1

  plus_conjugate  : LEMMA z + conjugate(z) = 2*Re(z)
  minus_conjugate : LEMMA z - conjugate(z) = 2*Im(z)*complex_i
  conjugate_plus  : LEMMA conjugate(z1+z2) = conjugate(z1) + conjugate(z2)
  conjugate_neg   : LEMMA conjugate(-z)    = -conjugate(z)
  conjugate_minus : LEMMA conjugate(z1-z2) = conjugate(z1) - conjugate(z2)
  conjugate_times : LEMMA conjugate(z1*z2) = conjugate(z1) * conjugate(z2)
  conjugate_inv   : LEMMA conjugate(1/n0z) = 1/conjugate(n0z)
  conjugate_div   : LEMMA conjugate(z/n0z) = conjugate(z) / conjugate(n0z)

  zero_times: LEMMA z1*z2 = 0 <=> z1 = 0 OR z2 = 0

  neg_nzcomplex:  JUDGEMENT -(n0z)       HAS_TYPE nzcomplex
  mul_nzcomplex1: JUDGEMENT *(n0z1,n0z2) HAS_TYPE nzcomplex
  mul_nzcomplex2: JUDGEMENT *(n0x,n0z)   HAS_TYPE nzcomplex
  mul_nzcomplex3: JUDGEMENT *(n0z,n0x)   HAS_TYPE nzcomplex
  div_nzcomplex1: JUDGEMENT /(n0z1,n0z2) HAS_TYPE nzcomplex
  div_nzcomplex2: JUDGEMENT /(n0x,n0z)   HAS_TYPE nzcomplex
  div_nzcomplex3: JUDGEMENT /(n0z,n0x)   HAS_TYPE nzcomplex

  complex_sq_neg:       LEMMA sq(-z)    = sq(z)
  complex_sq_times:     LEMMA sq(z1*z2) = sq(z1) * sq(z2)
  complex_sq_plus:      LEMMA sq(z1+z2) = sq(z1) + 2*z1*z2 + sq(z2)
  complex_sq_minus:     LEMMA sq(z1-z2) = sq(z1) - 2*z1*z2 + sq(z2)
  complex_sq_neg_minus: LEMMA sq(z1-z2) = sq(z2-z1)
  complex_sq_div:       LEMMA sq(z/n0z) = sq(z)/sq(n0z)

  AUTO_REWRITE+ complex_sq_def
  AUTO_REWRITE+ complex_sq_neg
  AUTO_REWRITE+ complex_sq_times

END complex_types
