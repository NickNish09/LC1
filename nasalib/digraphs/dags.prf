(dags
 (dag_no_self_loops 0
  (dag_no_self_loops-1 nil 3507100929
   ("" (skosimp*)
    (("" (typepred "DG!1")
      (("" (inst?)
        (("" (assert)
          (("" (flatten)
            (("" (name-replace "vv" "proj_1(e!1)")
              (("" (case "walk?[T](DG!1, gen_seq2[T](DG!1, vv, vv))")
                (("1" (inst - "gen_seq2(DG!1,vv,vv)")
                  (("1" (expand "path?")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (expand "finseq_appl")
                          (("1" (expand "gen_seq2")
                            (("1" (inst - "0" "1")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "gen_seq2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "walk?")
                  (("2" (prop)
                    (("1" (expand "verts_in?")
                      (("1" (skosimp*) (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "finseq_appl")
                        (("2" (expand "gen_seq2")
                          (("2" (expand "edge?")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dag type-eq-decl nil dags nil) (path? const-decl "bool" paths nil)
    (Walk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-nonempty-type-decl nil dags nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (edge? const-decl "bool" digraphs nil)
    (vv skolem-const-decl "T" dags nil)
    (DG!1 skolem-const-decl "dag" dags nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (verts_in? const-decl "bool" walks nil)
    (Seq type-eq-decl nil walks nil)
    (gen_seq2 const-decl "Seq(G)" walks nil))
   nil)))

