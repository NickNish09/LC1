(sincos
 (sin_derivable_TCC1 0
  (sin_derivable_TCC1-1 nil 3602247635 ("" (assert) nil nil)
   ((deriv_domain_real formula-decl nil deriv_domain "analysis_ax/"))
   nil))
 (sin_derivable_TCC2 0
  (sin_derivable_TCC2-1 nil 3602247635 ("" (assert) nil nil)
   ((not_one_element_real formula-decl nil deriv_domain
     "analysis_ax/"))
   nil))
 (sin_derivable 0
  (sin_derivable-1 nil 3263379563
   ("" (skolem 1 ("x"))
    (("" (lemma "sin_convergence" ("x" "x"))
      ((""
        (lemma "derivative_equivalence1[real]"
         ("f" "sin" "x" "x" "D" "cos(x)"))
        (("1" (assert) nil nil)
         ("2" (skosimp*)
          (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil)) nil)
         ("3" (lemma deriv_domain_real) (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/"))
   shostak))
 (sin_derivable_fun 0
  (sin_derivable_fun-1 nil 3602248246
   ("" (expand "derivable?")
    (("" (lemma "sin_derivable") (("" (propax) nil nil)) nil)) nil)
   ((sin_derivable formula-decl nil sincos nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/"))
   shostak))
 (deriv_sin_fun_TCC1 0
  (deriv_sin_fun_TCC1-1 nil 3263377309
   ("" (lemma "sin_derivable_fun") (("" (propax) nil nil)) nil)
   ((sin_derivable_fun formula-decl nil sincos nil)) shostak))
 (deriv_sin_fun 0
  (deriv_sin_fun-1 nil 3263490807
   ("" (expand "deriv")
    ((""
      (lemma "extensionality"
       ("f" "(LAMBDA (x: real): deriv(sin, x))" "g" "cos"))
      (("1" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2"
              (lemma "derivative_equivalence1[real]"
               ("f" "sin" "x" "x!1" "D" "cos(x!1)"))
              (("1" (lemma "sin_convergence" ("x" "x!1"))
                (("1" (assert) nil nil)) nil)
               ("2" (lemma "sin_derivable")
                (("2" (skosimp*)
                  (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (lemma deriv_domain_real) (("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "sin_derivable") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((deriv const-decl "real" derivatives_def "analysis_ax/")
    (derivable? const-decl "bool" derivatives_def "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (deriv const-decl "[T -> real]" derivatives "analysis_ax/"))
   shostak))
 (cos_derivable 0
  (cos_derivable-1 nil 3263378610
   ("" (skosimp*)
    (("" (lemma "cos_convergence" ("x" "x!1"))
      ((""
        (lemma "derivative_equivalence1[real]"
         ("f" "cos" "x" "x!1" "D" "-sin(x!1)"))
        (("1" (assert) nil nil)
         ("2" (skosimp*)
          (("2" (inst + "x!2+1") (("2" (assert) nil nil)) nil)) nil)
         ("3" (lemma deriv_domain_real) (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/"))
   shostak))
 (cos_derivable_fun 0
  (cos_derivable_fun-1 nil 3602248261
   ("" (expand "derivable?")
    (("" (lemma "cos_derivable") (("" (propax) nil nil)) nil)) nil)
   ((cos_derivable formula-decl nil sincos nil)
    (derivable? const-decl "bool" derivatives "analysis_ax/"))
   shostak))
 (deriv_cos_fun_TCC1 0
  (deriv_cos_fun_TCC1-1 nil 3263377338
   ("" (lemma "cos_derivable_fun") (("" (propax) nil nil)) nil)
   ((cos_derivable_fun formula-decl nil sincos nil)) shostak))
 (deriv_cos_fun 0
  (deriv_cos_fun-2 nil 3352175440
   ("" (expand "deriv")
    (("" (lemma "cos_convergence")
      (("" (lemma "derivative_equivalence1[real]" ("f" "cos"))
        (("1"
          (lemma "extensionality"
           ("f" "(LAMBDA (x: real): deriv(cos, x))" "g" "-sin"))
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp*)
                (("2" (expand "-")
                  (("2" (inst - "x!1")
                    (("2" (inst - "-sin(x!1)" "x!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (inst - "x!1")
                (("2" (inst - "-sin(x!1)" "x!1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (inst + "x!1+1") (("2" (assert) nil nil)) nil)) nil)
         ("3" (lemma deriv_domain_real) (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "real" derivatives_def "analysis_ax/")
    (derivable? const-decl "bool" derivatives_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis_ax/")
    (deriv const-decl "[T -> real]" derivatives "analysis_ax/"))
   nil)
  (deriv_cos_fun-1 nil 3263377393
   ("" (expand "deriv")
    (("" (lemma "cos_convergence")
      (("" (lemma "derivative_equivalence1" ("f" "cos"))
        ((""
          (lemma "extensionality"
           ("f" "(LAMBDA (x: real): deriv(cos, x))" "g" "-sin"))
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skosimp*)
                (("2" (expand "-")
                  (("2" (inst - "x!1")
                    (("2" (inst - "-sin(x!1)" "x!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (inst - "x!1")
                (("2" (inst - "-sin(x!1)" "x!1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "[T -> real]" derivatives "analysis_ax/")
    (deriv const-decl "[T -> real]" derivatives "analysis_ax/"))
   shostak))
 (sin_continuous 0
  (sin_continuous-2 nil 3352175475
   ("" (skosimp*)
    (("" (lemma "sin_derivable" ("x" "x0!1"))
      (("" (lemma "derivable_continuous[real]" ("f" "sin" "x" "x0!1"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((derivable_continuous formula-decl nil derivatives_def
     "analysis_ax/")
    (sin const-decl "real" trig_basic nil))
   nil)
  (sin_continuous-1 nil 3266853726
   ("" (skosimp*)
    (("" (lemma "sin_derivable" ("x" "x0!1"))
      (("" (lemma "derivable_continuous" ("f" "sin" "x" "x0!1"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (cos_continuous 0
  (cos_continuous-2 nil 3352175502
   ("" (skosimp*)
    (("" (lemma "cos_derivable" ("x" "x0!1"))
      (("" (lemma "derivable_continuous[real]" ("f" "cos" "x" "x0!1"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((derivable_continuous formula-decl nil derivatives_def
     "analysis_ax/")
    (cos const-decl "real" trig_basic nil))
   nil)
  (cos_continuous-1 nil 3266853851
   ("" (skosimp*)
    (("" (lemma "cos_derivable" ("x" "x0!1"))
      (("" (lemma "derivable_continuous" ("f" "cos" "x" "x0!1"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (sin_continuous_fun 0
  (sin_continuous_fun-1 nil 3602248362
   ("" (expand "continuous?")
    (("" (lemma "sin_continuous") (("" (propax) nil nil)) nil)) nil)
   ((sin_continuous formula-decl nil sincos nil)
    (continuous? const-decl "bool" continuous_functions
     "analysis_ax/"))
   shostak))
 (cos_continuous_fun 0
  (cos_continuous_fun-1 nil 3602248393
   ("" (expand "continuous?")
    (("" (lemma "cos_continuous") (("" (propax) nil nil)) nil)) nil)
   ((cos_continuous formula-decl nil sincos nil)
    (continuous? const-decl "bool" continuous_functions
     "analysis_ax/"))
   shostak))
 (nderiv_sin_fun 0
  (nderiv_sin_fun-3 nil 3445346452
   ("" (skolem 1 ("n"))
    ((""
      (case "FORALL (n:nat): derivable_n_times?(sin, n) AND derivable_n_times?(cos,n)")
      (("1"
        (case "FORALL (n:nat): nderiv(n, sin) = (LAMBDA (x: real): sin((n * pi / 2) + x)) AND nderiv(n,cos) = LAMBDA (x:real): cos((n*pi/2)+x)")
        (("1" (inst - "n")
          (("1" (inst - "n")
            (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (copy -1)
            (("2" (induct "n" 1)
              (("1" (expand "nderiv")
                (("1"
                  (lemma "extensionality"
                   ("f" "sin" "g"
                    "(LAMBDA (x: real): sin(x + (0 * pi / 2)))"))
                  (("1" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nderiv")
                (("2"
                  (lemma "extensionality"
                   ("f" "cos" "g"
                    "(LAMBDA (x: real): cos(x + (0 * pi / 2)))"))
                  (("2" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (skosimp*)
                (("3" (expand "nderiv" 1)
                  (("3" (lemma "deriv_sin_fun")
                    (("3" (replace -1)
                      (("3" (replace -3)
                        (("3" (lemma "deriv_cos_fun")
                          (("3" (replace -1)
                            (("3"
                              (lemma "extensionality"
                               ("f"
                                "(LAMBDA (x: real): cos((j!1 * pi / 2) + x))"
                                "g"
                                "(LAMBDA (x: real): sin(x + ((j!1 * pi + pi) / 2)))"))
                              (("3"
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (case
                                     "FORALL (n:nat,f:nderiv_fun(n)): nderiv(n,-f) = -nderiv(n,f)")
                                    (("1"
                                      (inst - "j!1" "sin")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (expand "-")
                                              (("1"
                                                (lemma
                                                 "extensionality"
                                                 ("f"
                                                  "(LAMBDA (x_1: real): -sin(x_1 + (j!1 * pi / 2)))"
                                                  "g"
                                                  "(LAMBDA (x: real): cos(x + ((j!1 * pi + pi) / 2)))"))
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (rewrite
                                                         "cos_sin")
                                                        (("2"
                                                          (rewrite
                                                           "neg_sin")
                                                          (("2"
                                                            (expand
                                                             "pi")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst - "j!1")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (induct "n")
                                            (("1"
                                              (expand "nderiv")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "nderiv" 1)
                                                (("2"
                                                  (lemma
                                                   "deriv_neg_fun[real]"
                                                   ("ff" "f!1"))
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (inst
                                                       -
                                                       "deriv(f!1)")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (induct "n")
                                                (("1"
                                                  (expand
                                                   "derivable_n_times?")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "derivable_n_times?"
                                                     1)
                                                    (("2"
                                                      (typepred "f!1")
                                                      (("2"
                                                        (expand
                                                         "derivable_n_times?"
                                                         -1)
                                                        (("2"
                                                          (flatten -1)
                                                          (("2"
                                                            (lemma
                                                             "neg_derivable_fun[real]"
                                                             ("f"
                                                              "f!1"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "deriv_neg_fun[real]"
                                                                 ("ff"
                                                                  "f!1"))
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "deriv(f!1)")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (induct "n")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (expand
                                             "derivable_n_times?")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (expand
                                             "derivable_n_times?"
                                             1)
                                            (("2"
                                              (lemma
                                               "neg_derivable_fun[real]"
                                               ("f" "f!1"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "f!1")
                                                  (("2"
                                                    (expand
                                                     "derivable_n_times?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "deriv_neg_fun[real]"
                                                           ("ff"
                                                            "f!1"))
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "deriv(f!1)")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma
                                       "cos_sin"
                                       ("a" "(j!1 * pi / 2) + x!1"))
                                      (("2"
                                        (expand "pi")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skosimp*)
                (("4" (inst - "n!2") (("4" (flatten) nil nil)) nil))
                nil)
               ("5" (skosimp*)
                (("5" (inst - "n!2") (("5" (flatten) nil nil)) nil))
                nil)
               ("6" (skosimp*)
                (("6" (inst - "n!2") (("6" (flatten) nil nil)) nil))
                nil)
               ("7" (skosimp*)
                (("7" (inst - "n!2") (("7" (flatten) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skosimp*)
          (("3" (inst - "n!1") (("3" (flatten -2) nil nil)) nil)) nil)
         ("4" (skosimp*)
          (("4" (inst - "n!1") (("4" (flatten) nil nil)) nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (expand "derivable_n_times?") (("1" (propax) nil nil))
            nil)
           ("2" (expand "derivable_n_times?") (("2" (propax) nil nil))
            nil)
           ("3" (skosimp*)
            (("3" (expand "derivable_n_times?" 1)
              (("3" (lemma "sin_derivable_fun")
                (("3" (lemma "cos_derivable_fun")
                  (("3" (lemma "deriv_sin_fun")
                    (("3" (lemma "deriv_cos_fun")
                      (("3" (replace -1)
                        (("3" (replace -2)
                          (("3" (assert)
                            (("3"
                              (case "FORALL (n:nat,f:[real->real]): derivable_n_times?(f,n) => derivable_n_times?(-f,n)")
                              (("1"
                                (inst - "j!1" "sin")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (induct "n")
                                  (("1"
                                    (expand "derivable_n_times?")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (expand
                                       "derivable_n_times?"
                                       (-2 1))
                                      (("2"
                                        (flatten -2)
                                        (("2"
                                          (lemma
                                           "neg_derivable_fun[real]"
                                           ("f" "f!1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -2 "deriv(f!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "deriv_neg_fun[real]"
                                                   ("ff" "f!1"))
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_n_times? def-decl "bool" nth_derivatives "analysis_ax/")
    (neg_derivable_fun formula-decl nil derivatives "analysis_ax/")
    (deriv_neg_fun formula-decl nil derivatives "analysis_ax/")
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (deriv_fun type-eq-decl nil derivatives "analysis_ax/")
    (deriv const-decl "[T -> real]" derivatives "analysis_ax/")
    (neg_sin formula-decl nil trig_basic nil)
    (cos_sin formula-decl nil trig_basic nil)
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis_ax/")
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis_ax/"))
   nil)
  (nderiv_sin_fun-2 nil 3445346393
   (";;; Proof nderiv_sin_fun-3 for formula sincos.nderiv_sin_fun"
    (skolem 1 ("n"))
    ((";;; Proof nderiv_sin_fun-3 for formula sincos.nderiv_sin_fun"
      (case "FORALL (n:nat): derivable_n_times?(sin, n) AND derivable_n_times?(cos,n)")
      (("1"
        (case "FORALL (n:nat): nderiv(n, sin) = (LAMBDA (x: real): sin((n * pi / 2) + x)) AND nderiv(n,cos) = LAMBDA (x:real): cos((n*pi/2)+x)")
        (("1" (inst - "n")
          (("1" (inst - "n") (("1" (flatten) (("1" (assert) nil)))))))
         ("2" (hide 2)
          (("2" (copy -1)
            (("2" (induct "n" 1)
              (("1" (expand "nderiv")
                (("1"
                  (lemma "extensionality"
                   ("f" "sin" "g"
                    "(LAMBDA (x: real): sin(x + (0 * pi / 2)))"))
                  (("1" (split -1)
                    (("1" (propax) nil)
                     ("2" (skosimp*) (("2" (assert) nil)))))))))
               ("2" (expand "nderiv")
                (("2"
                  (lemma "extensionality"
                   ("f" "cos" "g"
                    "(LAMBDA (x: real): cos(x + (0 * pi / 2)))"))
                  (("2" (split -1)
                    (("1" (propax) nil)
                     ("2" (skosimp*) (("2" (assert) nil)))))))))
               ("3" (skosimp*)
                (("3" (expand "nderiv" 1)
                  (("3" (lemma "deriv_sin_fun")
                    (("3" (replace -1)
                      (("3" (replace -3)
                        (("3" (lemma "deriv_cos_fun")
                          (("3" (replace -1)
                            (("3"
                              (lemma "extensionality"
                               ("f"
                                "(LAMBDA (x: real): cos((j!1 * pi / 2) + x))"
                                "g"
                                "(LAMBDA (x: real): sin(x + ((j!1 * pi + pi) / 2)))"))
                              (("3"
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (case
                                     "FORALL (n:nat,f:nderiv_fun(n)): nderiv(n,-f) = -nderiv(n,f)")
                                    (("1"
                                      (inst - "j!1" "sin")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (expand "-")
                                              (("1"
                                                (lemma
                                                 "extensionality"
                                                 ("f"
                                                  "(LAMBDA (x_1: real): -sin(x_1 + (j!1 * pi / 2)))"
                                                  "g"
                                                  "(LAMBDA (x: real): cos(x + ((j!1 * pi + pi) / 2)))"))
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (rewrite
                                                         "cos_sin")
                                                        (("2"
                                                          (rewrite
                                                           "neg_sin")
                                                          (("2"
                                                            (expand
                                                             "pi")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))
                                     ("2"
                                      (inst - "j!1")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (induct "n")
                                            (("1"
                                              (expand "nderiv")
                                              (("1" (propax) nil)))
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "nderiv" 1)
                                                (("2"
                                                  (lemma
                                                   "deriv_neg_fun[real]"
                                                   ("ff" "f!1"))
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (inst
                                                       -
                                                       "deriv(f!1)")
                                                      nil)))))))))
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (induct "n")
                                                (("1"
                                                  (expand
                                                   "derivable_n_times?")
                                                  (("1" (propax) nil)))
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "derivable_n_times?"
                                                     1)
                                                    (("2"
                                                      (typepred "f!1")
                                                      (("2"
                                                        (expand
                                                         "derivable_n_times?"
                                                         -1)
                                                        (("2"
                                                          (flatten -1)
                                                          (("2"
                                                            (lemma
                                                             "opposite_derivable_fun[real]"
                                                             ("f"
                                                              "f!1"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "deriv_neg_fun[real]"
                                                                 ("ff"
                                                                  "f!1"))
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "deriv(f!1)")
                                                                    nil)))))))))))))))))))))))))))))))
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (induct "n")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (expand
                                             "derivable_n_times?")
                                            (("1" (propax) nil)))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (expand
                                             "derivable_n_times?"
                                             1)
                                            (("2"
                                              (lemma
                                               "opposite_derivable_fun[real]"
                                               ("f" "f!1"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "f!1")
                                                  (("2"
                                                    (expand
                                                     "derivable_n_times?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "deriv_neg_fun[real]"
                                                           ("ff"
                                                            "f!1"))
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "deriv(f!1)")
                                                              nil)))))))))))))))))))))))))))))
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma
                                       "cos_sin"
                                       ("a" "(j!1 * pi / 2) + x!1"))
                                      (("2"
                                        (expand "pi")
                                        (("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))
               ("4" (skosimp*)
                (("4" (inst - "n!2") (("4" (flatten) nil)))))
               ("5" (skosimp*)
                (("5" (inst - "n!2") (("5" (flatten) nil)))))
               ("6" (skosimp*)
                (("6" (inst - "n!2") (("6" (flatten) nil)))))
               ("7" (skosimp*)
                (("7" (inst - "n!2") (("7" (flatten) nil)))))))))))
         ("3" (skosimp*)
          (("3" (inst - "n!1") (("3" (flatten -2) nil)))))
         ("4" (skosimp*)
          (("4" (inst - "n!1") (("4" (flatten) nil)))))))
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (expand "derivable_n_times?") (("1" (propax) nil)))
           ("2" (expand "derivable_n_times?") (("2" (propax) nil)))
           ("3" (skosimp*)
            (("3" (expand "derivable_n_times?" 1)
              (("3" (lemma "sin_derivable_fun")
                (("3" (lemma "cos_derivable_fun")
                  (("3" (lemma "deriv_sin_fun")
                    (("3" (lemma "deriv_cos_fun")
                      (("3" (replace -1)
                        (("3" (replace -2)
                          (("3" (assert)
                            (("3"
                              (case "FORALL (n:nat,f:[real->real]): derivable_n_times?(f,n) => derivable_n_times?(-f,n)")
                              (("1"
                                (inst - "j!1" "sin")
                                (("1" (assert) nil)))
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (induct "n")
                                  (("1"
                                    (expand "derivable_n_times?")
                                    (("1" (propax) nil)))
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (expand
                                       "derivable_n_times?"
                                       (-2 1))
                                      (("2"
                                        (flatten -2)
                                        (("2"
                                          (lemma
                                           "opposite_derivable_fun[real]"
                                           ("f" "f!1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -2 "deriv(f!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "deriv_neg_fun[real]"
                                                   ("ff" "f!1"))
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (propax)
                                                      nil))))))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil)
  (nderiv_sin_fun-1 nil 3445346356
   (";;; Proof nderiv_sin_fun-3 for formula sincos.nderiv_sin_fun"
    (skolem 1 ("n"))
    ((";;; Proof nderiv_sin_fun-3 for formula sincos.nderiv_sin_fun"
      (case "FORALL (n:nat): derivable_n_times?(sin, n) AND derivable_n_times?(cos,n)")
      (("1"
        (case "FORALL (n:nat): nderiv(n, sin) = (LAMBDA (x: real): sin((n * pi / 2) + x)) AND nderiv(n,cos) = LAMBDA (x:real): cos((n*pi/2)+x)")
        (("1" (inst - "n")
          (("1" (inst - "n") (("1" (flatten) (("1" (assert) nil)))))))
         ("2" (hide 2)
          (("2" (copy -1)
            (("2" (induct "n" 1)
              (("1" (expand "nderiv")
                (("1"
                  (lemma "extensionality"
                   ("f" "sin" "g"
                    "(LAMBDA (x: real): sin(x + (0 * pi / 2)))"))
                  (("1" (split -1)
                    (("1" (propax) nil)
                     ("2" (skosimp*) (("2" (assert) nil)))))))))
               ("2" (expand "nderiv")
                (("2"
                  (lemma "extensionality"
                   ("f" "cos" "g"
                    "(LAMBDA (x: real): cos(x + (0 * pi / 2)))"))
                  (("2" (split -1)
                    (("1" (propax) nil)
                     ("2" (skosimp*) (("2" (assert) nil)))))))))
               ("3" (skosimp*)
                (("3" (expand "nderiv" 1)
                  (("3" (lemma "deriv_sin_fun")
                    (("3" (replace -1)
                      (("3" (replace -3)
                        (("3" (lemma "deriv_cos_fun")
                          (("3" (replace -1)
                            (("3"
                              (lemma "extensionality"
                               ("f"
                                "(LAMBDA (x: real): cos((j!1 * pi / 2) + x))"
                                "g"
                                "(LAMBDA (x: real): sin(x + ((j!1 * pi + pi) / 2)))"))
                              (("3"
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (case
                                     "FORALL (n:nat,f:nderiv_fun(n)): nderiv(n,-f) = -nderiv(n,f)")
                                    (("1"
                                      (inst - "j!1" "sin")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (expand "-")
                                              (("1"
                                                (lemma
                                                 "extensionality"
                                                 ("f"
                                                  "(LAMBDA (x_1: real): -sin(x_1 + (j!1 * pi / 2)))"
                                                  "g"
                                                  "(LAMBDA (x: real): cos(x + ((j!1 * pi + pi) / 2)))"))
                                                (("1"
                                                  (split)
                                                  (("1" (propax) nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (rewrite
                                                         "cos_sin")
                                                        (("2"
                                                          (rewrite
                                                           "neg_sin")
                                                          (("2"
                                                            (expand
                                                             "pi")
                                                            (("2"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))
                                     ("2"
                                      (inst - "j!1")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (induct "n")
                                            (("1"
                                              (expand "nderiv")
                                              (("1" (propax) nil)))
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "nderiv" 1)
                                                (("2"
                                                  (lemma
                                                   "deriv_opp_fun[real]"
                                                   ("ff" "f!1"))
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (inst
                                                       -
                                                       "deriv(f!1)")
                                                      nil)))))))))
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (induct "n")
                                                (("1"
                                                  (expand
                                                   "derivable_n_times?")
                                                  (("1" (propax) nil)))
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "derivable_n_times?"
                                                     1)
                                                    (("2"
                                                      (typepred "f!1")
                                                      (("2"
                                                        (expand
                                                         "derivable_n_times?"
                                                         -1)
                                                        (("2"
                                                          (flatten -1)
                                                          (("2"
                                                            (lemma
                                                             "opposite_derivable_fun[real]"
                                                             ("f"
                                                              "f!1"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "deriv_opp_fun[real]"
                                                                 ("ff"
                                                                  "f!1"))
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "deriv(f!1)")
                                                                    nil)))))))))))))))))))))))))))))))
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (induct "n")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (expand
                                             "derivable_n_times?")
                                            (("1" (propax) nil)))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (expand
                                             "derivable_n_times?"
                                             1)
                                            (("2"
                                              (lemma
                                               "opposite_derivable_fun[real]"
                                               ("f" "f!1"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "f!1")
                                                  (("2"
                                                    (expand
                                                     "derivable_n_times?"
                                                     -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "deriv_opp_fun[real]"
                                                           ("ff"
                                                            "f!1"))
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "deriv(f!1)")
                                                              nil)))))))))))))))))))))))))))))
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma
                                       "cos_sin"
                                       ("a" "(j!1 * pi / 2) + x!1"))
                                      (("2"
                                        (expand "pi")
                                        (("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))
               ("4" (skosimp*)
                (("4" (inst - "n!2") (("4" (flatten) nil)))))
               ("5" (skosimp*)
                (("5" (inst - "n!2") (("5" (flatten) nil)))))
               ("6" (skosimp*)
                (("6" (inst - "n!2") (("6" (flatten) nil)))))
               ("7" (skosimp*)
                (("7" (inst - "n!2") (("7" (flatten) nil)))))))))))
         ("3" (skosimp*)
          (("3" (inst - "n!1") (("3" (flatten -2) nil)))))
         ("4" (skosimp*)
          (("4" (inst - "n!1") (("4" (flatten) nil)))))))
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (expand "derivable_n_times?") (("1" (propax) nil)))
           ("2" (expand "derivable_n_times?") (("2" (propax) nil)))
           ("3" (skosimp*)
            (("3" (expand "derivable_n_times?" 1)
              (("3" (lemma "sin_derivable_fun")
                (("3" (lemma "cos_derivable_fun")
                  (("3" (lemma "deriv_sin_fun")
                    (("3" (lemma "deriv_cos_fun")
                      (("3" (replace -1)
                        (("3" (replace -2)
                          (("3" (assert)
                            (("3"
                              (case "FORALL (n:nat,f:[real->real]): derivable_n_times?(f,n) => derivable_n_times?(-f,n)")
                              (("1"
                                (inst - "j!1" "sin")
                                (("1" (assert) nil)))
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (induct "n")
                                  (("1"
                                    (expand "derivable_n_times?")
                                    (("1" (propax) nil)))
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (expand
                                       "derivable_n_times?"
                                       (-2 1))
                                      (("2"
                                        (flatten -2)
                                        (("2"
                                          (lemma
                                           "opposite_derivable_fun[real]"
                                           ("f" "f!1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -2 "deriv(f!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "deriv_opp_fun[real]"
                                                   ("ff" "f!1"))
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (propax)
                                                      nil))))))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil))
 (nderiv_cos_fun 0
  (nderiv_cos_fun-1 nil 3445346583
   ("" (induct "n")
    (("1" (expand "derivable_n_times?") (("1" (propax) nil nil)) nil)
     ("2" (expand "nderiv")
      (("2"
        (lemma "extensionality"
         ("f" "cos" "g" "(LAMBDA (x: real): cos(x + (0 * pi / 2)))"))
        (("2" (split -1)
          (("1" (propax) nil nil)
           ("2" (skosimp*) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "derivable_n_times?" 1)
        (("3" (lemma "cos_derivable_fun")
          (("3" (replace -1)
            (("3" (lemma "deriv_cos_fun")
              (("3" (replace -1)
                (("3" (expand "nderiv" 1)
                  (("3" (replace -1)
                    (("3"
                      (case "FORALL (n:nat,f:[real->real]): derivable_n_times?(f,n) => derivable_n_times?(-f,n)")
                      (("1"
                        (case "FORALL (n: nat, f: nderiv_fun(n)): nderiv(n, -f) = -nderiv(n, f)")
                        (("1" (inst -2 "j!1" "sin")
                          (("1" (lemma "nderiv_sin_fun" ("n" "j!1"))
                            (("1" (flatten -1)
                              (("1"
                                (assert)
                                (("1"
                                  (inst - "j!1" "sin")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (hide-all-but 1)
                                        (("1"
                                          (expand "-")
                                          (("1"
                                            (lemma
                                             "extensionality"
                                             ("f"
                                              "(LAMBDA (x_1: real): -sin(x_1 + (j!1 * pi / 2)))"
                                              "g"
                                              "(LAMBDA (x: real): cos(x + ((j!1 * pi + pi) / 2)))"))
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (rewrite "sin_cos")
                                                    (("2"
                                                      (expand "pi")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (induct "n")
                            (("1" (expand "nderiv")
                              (("1" (propax) nil nil)) nil)
                             ("2" (skosimp*)
                              (("2"
                                (expand "nderiv" 1)
                                (("2"
                                  (typepred "f!1")
                                  (("2"
                                    (expand "derivable_n_times?" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (lemma
                                         "neg_derivable_fun[real]"
                                         ("f" "f!1"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "deriv_neg_fun[real]"
                                             ("ff" "f!1"))
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (inst -5 "deriv(f!1)")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (skosimp*)
                                (("3"
                                  (typepred "f!1")
                                  (("3"
                                    (inst - "n!2" "f!1")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but (-1 1))
                          (("3" (skosimp*)
                            (("3" (typepred "f!1")
                              (("3"
                                (inst - "n!1" "f!1")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (induct "n")
                          (("1" (expand "derivable_n_times?")
                            (("1" (propax) nil nil)) nil)
                           ("2" (skosimp*)
                            (("2" (expand "derivable_n_times?" (1 -2))
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma
                                   "neg_derivable_fun[real]"
                                   ("f" "f!1"))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "deriv_neg_fun[real]"
                                       ("ff" "f!1"))
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (inst - "deriv(f!1)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "[T -> real]" derivatives "analysis_ax/")
    (deriv_fun type-eq-decl nil derivatives "analysis_ax/")
    (derivable? const-decl "bool" derivatives "analysis_ax/")
    (deriv_neg_fun formula-decl nil derivatives "analysis_ax/")
    (neg_derivable_fun formula-decl nil derivatives "analysis_ax/")
    (sin_cos formula-decl nil trig_basic nil)
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis_ax/")
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis_ax/")
    (derivable_n_times? def-decl "bool" nth_derivatives
     "analysis_ax/"))
   nil))
 (sin_taylors_TCC1 0
  (sin_taylors_TCC1-2 nil 3445346729
   ("" (skosimp*)
    (("" (lemma "nderiv_sin_fun" ("n" "3+2*n!1"))
      (("" (flatten) nil nil)) nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nderiv_sin_fun formula-decl nil sincos nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (sin_taylors_TCC1-1 nil 3445345573 ("" (subtype-tcc) nil nil) nil
   nil))
 (sin_taylors_TCC2 0
  (sin_taylors_TCC2-1 nil 3445345573 ("" (subtype-tcc) nil nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (sin_taylors 0
  (sin_taylors-1 nil 3445591283
   ("" (skosimp*)
    ((""
      (lemma "Taylors" ("f" "sin" "n" "2*n!1+2" "aa" "0" "bb" "x!1"))
      (("1" (lemma "nderiv_sin_fun" ("n" "2*n!1+3"))
        (("1" (flatten)
          (("1" (replace -1)
            (("1"
              (case "FORALL (n:nat): sigma(0, 2 * n + 2,
                             LAMBDA (nn:nat):
                               IF nn > 2 * n + 2 THEN 0
                               ELSIF nn = 0 THEN sin(0)
                               ELSE nderiv(nn, sin)(0) * (x!1 - 0) ^ nn / factorial(nn)
                               ENDIF) = sin_series_n(x!1, n)")
              (("1" (inst - "n!1") (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but 1)
                (("2" (expand "sin_series_n")
                  (("2" (induct "n")
                    (("1" (expand "sin_series_term")
                      (("1" (expand "sigma")
                        (("1" (expand "sigma")
                          (("1" (expand "sigma")
                            (("1" (expand "factorial")
                              (("1"
                                (expand "factorial")
                                (("1"
                                  (expand "factorial")
                                  (("1"
                                    (lemma "nderiv_sin_fun")
                                    (("1"
                                      (inst-cp - "1")
                                      (("1"
                                        (inst - "2")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (rewrite "sin_0")
                                                (("1"
                                                  (simplify 1)
                                                  (("1"
                                                    (lemma "sin_pi2")
                                                    (("1"
                                                      (lemma "sin_pi")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "expt_x0"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "sigma" 1)
                        (("2" (expand "sigma" 1 1)
                          (("2"
                            (lemma "sigma_eq[nat]"
                             ("low" "0" "high" "j!1" "F"
                              "LAMBDA (i: nat):
                              IF i > 1 + j!1 THEN 0 ELSE sin_series_term(x!1)(i) ENDIF"
                              "G" "LAMBDA (i: nat):
                             IF i > j!1 THEN 0 ELSE sin_series_term(x!1)(i) ENDIF"))
                            (("2" (split -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma
                                     "sigma_eq[nat]"
                                     ("low"
                                      "0"
                                      "high"
                                      "2+2*j!1"
                                      "G"
                                      "LAMBDA (nn: nat):
                                IF nn > 2 + 2 * j!1 THEN 0
                                ELSIF nn = 0 THEN sin(0)
                                ELSE nderiv(nn, sin)(0) * x!1 ^ nn / factorial(nn)
                                ENDIF"
                                      "F"
                                      "LAMBDA (nn: nat):
                                IF nn > 4 + 2 * j!1 THEN 0
                                ELSIF nn = 0 THEN sin(0)
                                ELSE nderiv(nn, sin)(0) * x!1 ^ nn / factorial(nn)
                                ENDIF"))
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (lemma
                                               "nderiv_sin_fun"
                                               ("n" "3+2*j!1"))
                                              (("1"
                                                (lemma
                                                 "nderiv_sin_fun"
                                                 ("n" "4+2*j!1"))
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (simplify 1)
                                                        (("1"
                                                          (expand
                                                           "sin_series_term")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "sin_k_pi"
                                                               ("k"
                                                                "2+j!1"))
                                                              (("1"
                                                                (lemma
                                                                 "sin_k_pi2"
                                                                 ("k"
                                                                  "j!1+1"))
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (typepred "n!2")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (lemma
                                           "nderiv_sin_fun"
                                           ("n" "nn!1"))
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (lemma
                                           "nderiv_sin_fun"
                                           ("n" "nn!1"))
                                          (("3" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp*)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (skosimp*)
                        (("3" (lemma "nderiv_sin_fun" ("n" "nn!1"))
                          (("3" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (skosimp*)
                  (("3" (lemma "nderiv_sin_fun" ("n" "nn!1"))
                    (("3" (flatten) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (expand "connected?") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin const-decl "real" trig_basic nil)
    (Taylors formula-decl nil taylors "analysis_ax/")
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (sin_series_n const-decl "real" sincos_def nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis_ax/")
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis_ax/")
    (derivable_n_times? def-decl "bool" nth_derivatives "analysis_ax/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sin_k_pi formula-decl nil trig_basic nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sin_k_pi2 formula-decl nil trig_basic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_pi formula-decl nil trig_basic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (sin_pi2 formula-decl nil trig_basic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_0 formula-decl nil trig_basic nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sin_series_term const-decl "[nat -> real]" sincos_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nderiv_sin_fun formula-decl nil sincos nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers
     nil))
   nil))
 (cos_taylors_TCC1 0
  (cos_taylors_TCC1-2 nil 3445346756
   ("" (skosimp*)
    (("" (lemma "nderiv_cos_fun" ("n" "2+2*n!1"))
      (("" (flatten) nil nil)) nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nderiv_cos_fun formula-decl nil sincos nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (cos_taylors_TCC1-1 nil 3445345573 ("" (subtype-tcc) nil nil) nil
   nil))
 (cos_taylors_TCC2 0
  (cos_taylors_TCC2-1 nil 3445345573 ("" (subtype-tcc) nil nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (cos_taylors 0
  (cos_taylors-1 nil 3445346646
   ("" (skosimp*)
    ((""
      (lemma "Taylors" ("f" "cos" "n" "2*n!1+1" "aa" "0" "bb" "x!1"))
      (("1" (lemma "nderiv_cos_fun" ("n" "2*n!1+2"))
        (("1" (flatten)
          (("1" (replace -1)
            (("1"
              (case "FORALL (n:nat): sigma(0, 2 * n + 1,
                             LAMBDA (nn:nat):
                               IF nn > 2 * n + 1 THEN 0
                               ELSIF nn = 0 THEN cos(0)
                               ELSE nderiv(nn, cos)(0) * (x!1 - 0) ^ nn / factorial(nn)
                               ENDIF) = cos_series_n(x!1, n)")
              (("1" (inst - "n!1") (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but 1)
                (("2" (expand "cos_series_n")
                  (("2" (induct "n")
                    (("1" (expand "sigma")
                      (("1" (expand "sigma")
                        (("1" (expand "cos_series_term")
                          (("1" (rewrite "cos_0")
                            (("1" (lemma "nderiv_cos_fun" ("n" "1"))
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (simplify)
                                    (("1"
                                      (lemma "cos_pi2")
                                      (("1"
                                        (replace -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "sigma" 1)
                        (("2" (expand "sigma" 1 1)
                          (("2"
                            (lemma "sigma_eq[nat]"
                             ("low" "0" "high" "1+2*j!1" "G"
                              "LAMBDA (nn: nat):
                            IF nn > 1 + 2 * j!1 THEN 0
                            ELSIF nn = 0 THEN cos(0)
                            ELSE nderiv(nn, cos)(0) * x!1 ^ nn / factorial(nn)
                            ENDIF" "F" "LAMBDA (nn: nat):
                            IF nn > 3 + 2 * j!1 THEN 0
                            ELSIF nn = 0 THEN cos(0)
                            ELSE nderiv(nn, cos)(0) * x!1 ^ nn / factorial(nn)
                            ENDIF"))
                            (("1" (split -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (hide -1 -2)
                                    (("1"
                                      (lemma
                                       "sigma_eq[nat]"
                                       ("low"
                                        "0"
                                        "high"
                                        "j!1"
                                        "F"
                                        "LAMBDA (i: nat):
                                    IF i > j!1 THEN 0 ELSE cos_series_term(x!1)(i) ENDIF"
                                        "G"
                                        "LAMBDA (i: nat):
                                      IF i > 1 + j!1 THEN 0 ELSE cos_series_term(x!1)(i) ENDIF"))
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (simplify 1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "nderiv_cos_fun"
                                                 ("n" "3+2*j!1"))
                                                (("1"
                                                  (lemma
                                                   "nderiv_cos_fun"
                                                   ("n" "2+2*j!1"))
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (simplify 1)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "cos_k_pi"
                                                               ("k"
                                                                "j!1+1"))
                                                              (("1"
                                                                (lemma
                                                                 "cos_eq_0"
                                                                 ("a"
                                                                  "((2 * (j!1 * pi) + 3 * pi) / 2)"))
                                                                (("1"
                                                                  (flatten
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "cos_series_term")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "j!1+1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp*)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (lemma "nderiv_cos_fun" ("n" "nn!1"))
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (skosimp*)
                                (("3"
                                  (lemma "nderiv_cos_fun" ("n" "nn!1"))
                                  (("3" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (skosimp*)
                        (("3" (lemma "nderiv_cos_fun" ("n" "nn!1"))
                          (("3" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (skosimp*)
                  (("3" (lemma "nderiv_cos_fun" ("n" "nn!1"))
                    (("3" (flatten) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (expand "connected?") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cos const-decl "real" trig_basic nil)
    (Taylors formula-decl nil taylors "analysis_ax/")
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (cos_series_n const-decl "real" sincos_def nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (nderiv def-decl "[T -> real]" nth_derivatives "analysis_ax/")
    (nderiv_fun type-eq-decl nil nth_derivatives "analysis_ax/")
    (derivable_n_times? def-decl "bool" nth_derivatives "analysis_ax/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_k_pi formula-decl nil trig_basic nil)
    (integer nonempty-type-from-decl nil integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     nil)
    (pi_ub const-decl "posreal" trig_basic nil)
    (< const-decl "bool" reals nil)
    (pi_lb const-decl "posreal" trig_basic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cos_eq_0 formula-decl nil trig_basic nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (cos_pi2 formula-decl nil trig_basic nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (factorial_1 formula-decl nil factorial "ints/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_0 formula-decl nil trig_basic nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (cos_series_term const-decl "[nat -> real]" sincos_def nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nderiv_cos_fun formula-decl nil sincos nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil))
   nil)))

