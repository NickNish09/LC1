(complex_lnexp
 (exp_TCC1 0
  (exp_TCC1-1 nil 3294275262
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "zero_times3")
        (("" (rewrite "zero_times3")
          (("" (lemma "sin_cos_eq_0" ("a" "Im(z!1)"))
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (sin const-decl "real" trig_basic "trig/")
    (sin_cos_eq_0 formula-decl nil trig_aux nil)
    (Im const-decl "real" complex_types nil)
    (cos const-decl "real" trig_basic "trig/")
    (Re const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp "lnexp/")
    (ln const-decl "real" ln_exp "lnexp/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_times3 formula-decl nil real_props nil))
   shostak))
 (Re_exp 0
  (Re_exp-1 nil 3456000255 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/"))
   shostak))
 (Im_exp 0
  (Im_exp-1 nil 3456000259 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/"))
   shostak))
 (exp_i_pi 0
  (exp_i_pi-1 nil 3294274991
   ("" (assert)
    (("" (rewrite "cos_pi") (("" (rewrite "sin_pi") nil nil)) nil))
    nil)
   ((cos_pi formula-decl nil trig_basic "trig/")
    (sin_pi formula-decl nil trig_basic "trig/")
    (Re_i formula-decl nil complex_types nil)
    (Re_mul3 formula-decl nil complex_types nil)
    (exp_0 formula-decl nil ln_exp "lnexp/")
    (Im_i formula-decl nil complex_types nil)
    (Im_mul3 formula-decl nil complex_types nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (c_eq3 formula-decl nil complex_types nil)
    (mul_nzcomplex3 application-judgement "nzcomplex" complex_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/"))
   shostak))
 (exp_plus 0
  (exp_plus-1 nil 3294335316
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "exp_sum")
        (("" (rewrite "cos_plus")
          (("" (rewrite "sin_plus") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mul_nzcomplex1 application-judgement "nzcomplex" complex_types
     nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (cos_plus formula-decl nil trig_basic "trig/")
    (sin_plus formula-decl nil trig_basic "trig/")
    (exp_sum formula-decl nil ln_exp "lnexp/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil))
   shostak))
 (exp_negate 0
  (exp_negate-1 nil 3294275508
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "exp_neg")
        (("" (typepred "exp(x!1)")
          (("" (lemma "nz_sq_abs_pos" ("n0z" "exp(x!1)"))
            (("" (rewrite "div_cancel4" 1)
              (("" (rewrite "div_cancel4" 1)
                (("" (rewrite "cos_neg")
                  (("" (rewrite "sin_neg")
                    ((""
                      (lemma "div_cancel3"
                       ("n0z" "exp(Re(x!1))" "x"
                        "cos(Im(x!1)) * sq_abs(exp(x!1))" "y"
                        "exp(Re(x!1)) * cos(Im(x!1))"))
                      (("" (replace -1)
                        (("" (hide -1)
                          ((""
                            (lemma "div_cancel3"
                             ("n0z" "exp(Re(x!1))" "x"
                              "(-1)*sin(Im(x!1)) * sq_abs(exp(x!1))"
                              "y" "(-1)*exp(Re(x!1)) * sin(Im(x!1))"))
                            (("" (replace -1)
                              ((""
                                (hide -1)
                                ((""
                                  (expand "sq_abs")
                                  ((""
                                    (assert)
                                    ((""
                                      (rewrite "sq_times")
                                      ((""
                                        (rewrite "sq_times")
                                        ((""
                                          (lemma
                                           "sin2_cos2"
                                           ("a" "Im(x!1)"))
                                          ((""
                                            (lemma
                                             "sq_nz_pos"
                                             ("nz" "exp(Re(x!1))"))
                                            ((""
                                              (lemma
                                               "both_sides_times1"
                                               ("n0z"
                                                "sq(exp(Re(x!1)))"
                                                "x"
                                                "sq(sin(Im(x!1))) + sq(cos(Im(x!1)))"
                                                "y"
                                                "1"))
                                              ((""
                                                (replace -1 -3 rl)
                                                ((""
                                                  (expand "sq" -3 4)
                                                  ((""
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types
     nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (Re_div2 formula-decl nil complex_types nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Im const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos const-decl "real" trig_basic "trig/")
    (exp const-decl "{py | x = ln(py)}" ln_exp "lnexp/")
    (ln const-decl "real" ln_exp "lnexp/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (cos_neg formula-decl nil trig_basic "trig/")
    (div_cancel3 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_times formula-decl nil sq "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sin2_cos2 formula-decl nil trig_basic "trig/")
    (both_sides_times1 formula-decl nil real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_neg formula-decl nil trig_basic "trig/")
    (sin const-decl "real" trig_basic "trig/")
    (nz_sq_abs_pos judgement-tcc nil complex_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_neg formula-decl nil ln_exp "lnexp/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil))
   shostak))
 (exp_minus 0
  (exp_minus-1 nil 3294334655
   ("" (skosimp)
    (("" (lemma "exp_negate" ("x" "y!1"))
      (("" (lemma "exp_plus" ("x" "x!1" "y" "-y!1"))
        (("" (assert)
          (("" (flatten)
            (("" (rewrite "cos_neg")
              (("" (rewrite "sin_neg")
                (("" (rewrite "exp_neg")
                  (("" (replace -1)
                    (("" (replace -2)
                      (("" (hide -1 -2)
                        (("" (split)
                          (("1" (cross-mult)
                            (("1"
                              (lemma "div_distributes_minus"
                               ("x"
                                "sq_abs(exp(y!1)) * cos(Im(x!1)) * cos(Im(y!1)) * exp(Re(x!1))"
                                "y"
                                "sq_abs(exp(y!1)) * exp(Re(x!1)) * sin(Im(x!1)) * -sin(Im(y!1))"
                                "n0z"
                                "exp(Re(y!1))"))
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (cross-mult)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (cross-mult)
                            (("2"
                              (lemma "div_distributes"
                               ("x"
                                "sq_abs(exp(y!1)) * cos(Im(x!1)) * -sin(Im(y!1)) * exp(Re(x!1))"
                                "y"
                                "sq_abs(exp(y!1)) * exp(Re(x!1)) * sin(Im(x!1)) * cos(Im(y!1))"
                                "n0z"
                                "exp(Re(y!1))"))
                              (("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (cross-mult)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-decl nil complex_types nil)
    (exp_negate formula-decl nil complex_lnexp nil)
    (div_nzcomplex1 application-judgement "nzcomplex" complex_types
     nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mul_nzcomplex1 application-judgement "nzcomplex" complex_types
     nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Re_div2 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_neg formula-decl nil trig_basic "trig/")
    (Re const-decl "real" complex_types nil)
    (exp_neg formula-decl nil ln_exp "lnexp/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (div_cancel4 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sin const-decl "real" trig_basic "trig/")
    (times_div2 formula-decl nil real_props nil)
    (cos const-decl "real" trig_basic "trig/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp "lnexp/")
    (ln const-decl "real" ln_exp "lnexp/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_distributes formula-decl nil real_props nil)
    (sin_neg formula-decl nil trig_basic "trig/")
    (exp_plus formula-decl nil complex_lnexp nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (exp_periodicity 0
  (exp_periodicity-1 nil 3295026159
   ("" (skosimp)
    (("" (expand "exp")
      (("" (lemma "Re_imag" ("x" "2 * j!1 * pi"))
        (("" (assert)
          (("" (lemma "Im_imag" ("x" "2 * j!1 * pi"))
            (("" (assert)
              (("" (rewrite "Re_plus")
                (("" (rewrite "Im_plus")
                  (("" (replace -1)
                    (("" (replace -2)
                      (("" (assert)
                        ((""
                          (lemma "sin_period"
                           ("a" "Im(x!1)" "j" "j!1"))
                          (("" (replace -1 1 rl)
                            ((""
                              (lemma "cos_period"
                               ("a" "Im(x!1)" "j" "j!1"))
                              ((""
                                (replace -1 1 rl)
                                (("" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Im const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_period formula-decl nil trig_basic "trig/")
    (cos_period formula-decl nil trig_basic "trig/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (Re_i formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/"))
   shostak))
 (abs_exp 0
  (abs_exp-1 nil 3294844650
   ("" (skosimp)
    (("" (assert)
      (("" (expand "abs")
        (("" (expand "sq_abs")
          (("" (assert)
            (("" (rewrite "sq_eq" 1 :dir rl)
              (("" (assert)
                (("" (lemma "sin2_cos2" ("a" "Im(z!1)"))
                  (("" (assert)
                    (("" (rewrite "sq_times")
                      (("" (rewrite "sq_times") (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_nzcomplex application-judgement "posreal" polar nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq_eq formula-decl nil sq "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp "lnexp/")
    (exp const-decl "{py | x = ln(py)}" ln_exp "lnexp/")
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil)
    (cos const-decl "real" trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (sin const-decl "real" trig_basic "trig/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin2_cos2 formula-decl nil trig_basic "trig/")
    (sq_times formula-decl nil sq "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (Re_exp formula-decl nil complex_lnexp nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (abs const-decl "nnreal" polar nil))
   shostak))
 (arg_exp 0
  (arg_exp-1 nil 3456123074
   ("" (skosimp)
    (("" (assert)
      (("" (expand "exp")
        (("" (expand "arg")
          (("" (assert)
            (("" (rewrite "zero_times3")
              (("" (rewrite "zero_times3")
                ((""
                  (case-replace
                   "cos(Im(z!1)) = 0 AND sin(Im(z!1)) = 0")
                  (("1" (lemma "sin_cos_eq_0" ("a" "Im(z!1)"))
                    (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (replace 1 2)
                    (("2" (hide 1)
                      (("2"
                        (lemma "both_sides_times_pos_lt1"
                         ("pz" "exp(Re(z!1))" "x" "sin(Im(z!1))" "y"
                          "0"))
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2"
                              (lemma "atan2_cancel_pos"
                               ("x"
                                "cos(Im(z!1))"
                                "y"
                                "sin(Im(z!1))"
                                "pz"
                                "exp(Re(z!1))"))
                              (("2"
                                (split)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (case "0<=Im(z!1)")
                                      (("1"
                                        (lemma
                                         "sin_ge_0"
                                         ("a" "Im(z!1)"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (rewrite "atan2_cos_sin")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "Im(z!1)<0")
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (lemma
                                             "sin_period"
                                             ("a" "Im(z!1)" "j" "1"))
                                            (("1"
                                              (lemma
                                               "cos_period"
                                               ("a" "Im(z!1)" "j" "1"))
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (hide -1 -2)
                                                    (("1"
                                                      (lemma
                                                       "sin_lt_0"
                                                       ("a"
                                                        "Im(z!1) + 2 * 1 * pi"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "atan2_cos_sin")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     "sin_cos_eq_0"
                                     ("a" "Im(z!1)"))
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (arg const-decl "argrng" polar nil)
    (zero_times3 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp "lnexp/")
    (exp const-decl "{py | x = ln(py)}" ln_exp "lnexp/")
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil)
    (cos const-decl "real" trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sin_cos_eq_0 formula-decl nil trig_aux nil)
    (atan2_cancel_pos formula-decl nil atan2 "trig/")
    (nil application-judgement "nnreal_lt_2pi" atan2 "trig/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (atan2_cos_sin formula-decl nil atan2 "trig/")
    (sin_ge_0 formula-decl nil trig_ineq "trig/")
    (cos_period formula-decl nil trig_basic "trig/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_lt_0 formula-decl nil trig_ineq "trig/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin_period formula-decl nil trig_basic "trig/")
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (sin const-decl "real" trig_basic "trig/")
    (c_eq3 formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (exp const-decl "nzcomplex" complex_lnexp nil))
   shostak))
 (Re_ln 0
  (Re_ln-1 nil 3456000946
   ("" (skosimp) (("" (expand "ln" 1 1) (("" (assert) nil nil)) nil))
    nil)
   ((ln const-decl "complex" complex_lnexp nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (Re_rew formula-decl nil complex_types nil))
   shostak))
 (Im_ln 0
  (Im_ln-1 nil 3456000994
   ("" (skosimp) (("" (expand "ln" 1 1) (("" (assert) nil nil)) nil))
    nil)
   ((ln const-decl "complex" complex_lnexp nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (Im_rew formula-decl nil complex_types nil))
   shostak))
 (ln_exp 0
  (ln_exp-1 nil 3294847345
   (""
    (case "FORALL (z: complex):
        -pi < Im(z) AND Im(z) <= pi =>
         ln(exp(z))=z")
    (("1" (skosimp)
      (("1" (inst - "z!1+(2 * -j!1 * pi) * complex_i")
        (("1" (split)
          (("1" (lemma "exp_periodicity" ("x" "z!1" "j" "-j!1"))
            (("1" (assert)
              (("1" (flatten)
                (("1" (expand "arg")
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (replace -2)
                        (("1" (assert)
                          (("1"
                            (case-replace
                             "exp(Re(z!1)) * cos(Im(z!1)) = 0 AND
          exp(Re(z!1)) * sin(Im(z!1)) = 0")
                            (("1" (assert) nil nil)
                             ("2" (replace 1)
                              (("2"
                                (case-replace
                                 "exp(Re(z!1)) * sin(Im(z!1)) < 0")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil))
    nil)
   ((arg_exp formula-decl nil complex_lnexp nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (Re_i formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (c_eq1 formula-decl nil complex_types nil)
    (abs_exp formula-decl nil complex_lnexp nil)
    (Re_ln formula-decl nil complex_lnexp nil)
    (Im_ln formula-decl nil complex_lnexp nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (arg const-decl "argrng" polar nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 "trig/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp "lnexp/")
    (exp const-decl "{py | x = ln(py)}" ln_exp "lnexp/")
    (cos const-decl "real" trig_basic "trig/")
    (sin const-decl "real" trig_basic "trig/")
    (c_eq3 formula-decl nil complex_types nil)
    (exp_periodicity formula-decl nil complex_lnexp nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (complex type-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (Im const-decl "real" complex_types nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "bool" complex_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Re const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (ln const-decl "complex" complex_lnexp nil)
    (exp const-decl "nzcomplex" complex_lnexp nil))
   shostak))
 (exp_ln 0
  (exp_ln-1 nil 3294854711
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "exp_ln")
        (("" (lemma "Re_cos_abs1" ("n0x" "n0z!1/abs(n0z!1)"))
          (("" (lemma "Im_sin_abs1" ("n0x" "n0z!1/abs(n0z!1)"))
            (("" (lemma "arg_div_abs" ("n0x" "n0z!1"))
              (("" (replace -1 * rl)
                (("" (hide -1)
                  (("" (rewrite "abs_div2")
                    (("" (rewrite "div_simp") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (Im_ln formula-decl nil complex_lnexp nil)
    (Re_ln formula-decl nil complex_lnexp nil)
    (div_nzcomplex3 application-judgement "nzcomplex" complex_types
     nil)
    (Re_cos_abs1 formula-decl nil polar nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/ const-decl "complex" complex_types nil)
    (arg_div_abs formula-decl nil polar nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Re_div3 formula-decl nil complex_types nil)
    (Im_div3 formula-decl nil complex_types nil)
    (abs_abs formula-decl nil polar nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_div2 formula-decl nil polar nil)
    (Im_sin_abs1 formula-decl nil polar nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "nnreal" polar nil)
    (nnreal type-eq-decl nil real_types nil)
    (complex type-decl nil complex_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_ln formula-decl nil ln_exp "lnexp/"))
   shostak))
 (ln_mult 0
  (ln_mult-1 nil 3294856600
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "ln_mult")
        (("" (rewrite "arg_mult")
          (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mul_nzcomplex1 application-judgement "nzcomplex" complex_types
     nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Im_ln formula-decl nil complex_lnexp nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (Re_i formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Re_ln formula-decl nil complex_lnexp nil)
    (abs_mult formula-decl nil polar nil)
    (arg_mult formula-decl nil polar nil)
    (ln_mult formula-decl nil ln_exp "lnexp/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (complex type-decl nil complex_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (abs const-decl "nnreal" polar nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   shostak))
 (ln_inv 0
  (ln_inv-1 nil 3294948253
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "arg_inv")
        (("" (split)
          (("1" (rewrite "ln_div") nil nil)
           ("2" (lift-if)
            (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types
     nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Im_ln formula-decl nil complex_lnexp nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (Re_i formula-decl nil complex_types nil)
    (Re_ln formula-decl nil complex_lnexp nil)
    (abs_inv formula-decl nil polar nil)
    (ln_div formula-decl nil ln_exp "lnexp/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (abs const-decl "nnreal" polar nil)
    (ln_1 formula-decl nil ln_exp "lnexp/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (arg_inv formula-decl nil polar nil)
    (complex type-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   shostak))
 (ln_div 0
  (ln_div-1 nil 3295030968
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "ln_div")
        (("" (rewrite "arg_div")
          (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs_nzcomplex application-judgement "posreal" polar nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (div_nzcomplex1 application-judgement "nzcomplex" complex_types
     nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Im_ln formula-decl nil complex_lnexp nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (Re_i formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Re_ln formula-decl nil complex_lnexp nil)
    (abs_div formula-decl nil polar nil)
    (arg_div formula-decl nil polar nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "nnreal" polar nil)
    (nnreal type-eq-decl nil real_types nil)
    (complex type-decl nil complex_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ln_div formula-decl nil ln_exp "lnexp/"))
   shostak))
 (Re_sin 0
  (Re_sin-1 nil 3456899317
   ("" (skosimp) (("" (expand "sin" 1 1) (("" (assert) nil nil)) nil))
    nil)
   ((sin const-decl "complex" complex_lnexp nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (Re_rew formula-decl nil complex_types nil))
   shostak))
 (Im_sin 0
  (Im_sin-1 nil 3456899337
   ("" (skosimp) (("" (expand "sin" 1 1) (("" (assert) nil nil)) nil))
    nil)
   ((sin const-decl "complex" complex_lnexp nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (Im_rew formula-decl nil complex_types nil))
   shostak))
 (Re_cos 0
  (Re_cos-1 nil 3456899346
   ("" (skosimp) (("" (expand "cos" 1 1) (("" (assert) nil nil)) nil))
    nil)
   ((cos const-decl "complex" complex_lnexp nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (Re_rew formula-decl nil complex_types nil))
   shostak))
 (Im_cos 0
  (Im_cos-1 nil 3456899357
   ("" (skosimp) (("" (expand "cos" 1 1) (("" (assert) nil nil)) nil))
    nil)
   ((cos const-decl "complex" complex_lnexp nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (Im_rew formula-decl nil complex_types nil))
   shostak))
 (Re_sinh 0
  (Re_sinh-1 nil 3456644280
   ("" (skosimp)
    (("" (expand "sinh")
      (("" (assert)
        (("" (rewrite "cos_neg") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sinh const-decl "real" hyperbolic "lnexp/")
    (sinh const-decl "complex" complex_lnexp nil)
    (Im const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_neg formula-decl nil trig_basic "trig/")
    (Re_div3 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Im_sinh 0
  (Im_sinh-1 nil 3456644391
   ("" (skosimp)
    (("" (expand "sinh")
      (("" (assert)
        (("" (rewrite "sin_neg")
          (("" (expand "cosh") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sinh const-decl "complex" complex_lnexp nil)
    (Im const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_neg formula-decl nil trig_basic "trig/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cosh const-decl "posreal_ge1" hyperbolic "lnexp/")
    (Im_div3 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_cosh 0
  (Re_cosh-1 nil 3456644501
   ("" (skosimp)
    (("" (expand "cosh")
      (("" (assert)
        (("" (rewrite "cos_neg") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cosh const-decl "posreal_ge1" hyperbolic "lnexp/")
    (cosh const-decl "complex" complex_lnexp nil)
    (Im const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_neg formula-decl nil trig_basic "trig/")
    (Re_div3 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (Im_cosh 0
  (Im_cosh-1 nil 3456644519
   ("" (skosimp)
    (("" (assert)
      (("" (expand "cosh")
        (("" (assert)
          (("" (expand "sinh")
            (("" (rewrite "sin_neg") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Im_div3 formula-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_neg formula-decl nil trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic "lnexp/")
    (cosh const-decl "complex" complex_lnexp nil))
   shostak))
 (sinh_eq_0 0
  (sinh_eq_0-1 nil 3472838191
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (assert)
          (("1" (flatten)
            (("1" (typepred "cosh(Re(z!1))")
              (("1" (rewrite "zero_times3" -3)
                (("1" (lemma "sin_cos_eq_0" ("a" "Im(z!1)"))
                  (("1" (replace -3)
                    (("1" (rewrite "zero_times3" -2)
                      (("1" (replace 1)
                        (("1" (lemma "sin_eq_0" ("a" "Im(z!1)"))
                          (("1" (assert)
                            (("1" (skosimp)
                              (("1"
                                (inst + "i!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "zero_times1")
                                    (("1"
                                      (hide-all-but (-3 2))
                                      (("1"
                                        (expand "sinh")
                                        (("1"
                                          (name-replace "ZZ" "Re(z!1)")
                                          (("1"
                                            (rewrite "div_cancel3" -1)
                                            (("1"
                                              (lemma
                                               "exp_strict_increasing")
                                              (("1"
                                                (expand
                                                 "strict_increasing?")
                                                (("1"
                                                  (lemma
                                                   "trichotomy"
                                                   ("x" "ZZ"))
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (inst
                                                       -
                                                       "-ZZ"
                                                       "ZZ")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (inst
                                                       -
                                                       "ZZ"
                                                       "-ZZ")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (assert)
          (("2" (flatten)
            (("2" (rewrite "zero_times1")
              (("2" (rewrite "one_times")
                (("2" (replace -1)
                  (("2" (replace -2)
                    (("2" (hide -1 -2)
                      (("2" (rewrite "sinh_0")
                        (("2" (rewrite "cosh_0")
                          (("2" (rewrite "sin_k_pi")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul3 formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Re_mul3 formula-decl nil complex_types nil)
    (Re_i formula-decl nil complex_types nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Re const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (cosh const-decl "posreal_ge1" hyperbolic "lnexp/")
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic "lnexp/")
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_cos_eq_0 formula-decl nil trig_aux nil)
    (cos const-decl "real" trig_basic "trig/")
    (sinh const-decl "real" hyperbolic "lnexp/")
    (sin_eq_0 formula-decl nil trig_basic "trig/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (exp_strict_increasing formula-decl nil ln_exp "lnexp/")
    (trichotomy formula-decl nil real_axioms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ln const-decl "real" ln_exp "lnexp/")
    (exp const-decl "{py | x = ln(py)}" ln_exp "lnexp/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (zero_times1 formula-decl nil real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (< const-decl "bool" reals nil)
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_times3 formula-decl nil real_props nil)
    (sin const-decl "real" trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (cosh_0 formula-decl nil hyperbolic "lnexp/")
    (sin_k_pi formula-decl nil trig_basic "trig/")
    (integer nonempty-type-from-decl nil integers nil)
    (sinh_0 formula-decl nil hyperbolic "lnexp/")
    (one_times formula-decl nil extra_tegies nil))
   shostak))
 (cosh_eq_0 0
  (cosh_eq_0-1 nil 3472839104
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (assert)
          (("1" (flatten)
            (("1" (rewrite "zero_times3" -1)
              (("1" (lemma "sin_cos_eq_0" ("a" "Im(z!1)"))
                (("1" (replace -1)
                  (("1" (rewrite "zero_times3" -2)
                    (("1" (replace 1)
                      (("1" (hide 1)
                        (("1" (rewrite "cos_eq_0")
                          (("1" (skosimp)
                            (("1" (inst + "i!1")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (name-replace "ZZ" "Re(z!1)")
                                    (("1"
                                      (expand "sinh")
                                      (("1"
                                        (lemma "exp_strict_increasing")
                                        (("1"
                                          (expand "strict_increasing?")
                                          (("1"
                                            (lemma
                                             "trichotomy"
                                             ("x" "ZZ"))
                                            (("1"
                                              (split)
                                              (("1"
                                                (inst - "-ZZ" "ZZ")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3"
                                                (inst - "ZZ" "-ZZ")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (assert)
          (("2" (flatten)
            (("2" (replace -1)
              (("2" (replace -2)
                (("2" (hide -1 -2)
                  (("2" (rewrite "sinh_0")
                    (("2" (rewrite "cosh_0")
                      (("2" (assert)
                        (("2"
                          (lemma "cos_eq_0"
                           ("a" "1 / 2 * pi + j!1 * pi"))
                          (("2" (replace -1)
                            (("2" (inst + "j!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul3 formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Re_mul3 formula-decl nil complex_types nil)
    (Re_i formula-decl nil complex_types nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (zero_times3 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic "lnexp/")
    (cosh const-decl "posreal_ge1" hyperbolic "lnexp/")
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil)
    (cos const-decl "real" trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (cos_eq_0 formula-decl nil trig_basic "trig/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (trichotomy formula-decl nil real_axioms nil)
    (exp_strict_increasing formula-decl nil ln_exp "lnexp/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sinh const-decl "real" hyperbolic "lnexp/")
    (sin const-decl "real" trig_basic "trig/")
    (sin_cos_eq_0 formula-decl nil trig_aux nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (cosh_0 formula-decl nil hyperbolic "lnexp/")
    (pi const-decl "{r: posreal | r > pi_lb AND r < pi_ub}" trig_basic
     "trig/")
    (pi_ub const-decl "posreal" trig_basic "trig/")
    (< const-decl "bool" reals nil)
    (pi_lb const-decl "posreal" trig_basic "trig/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sinh_0 formula-decl nil hyperbolic "lnexp/"))
   shostak))
 (tanh_TCC1 0
  (tanh_TCC1-1 nil 3456899039 ("" (subtype-tcc) nil nil)
   ((Cosh? const-decl "bool" complex_lnexp nil)
    (complex type-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "bool" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (- const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (cosh const-decl "complex" complex_lnexp nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (csch_TCC1 0
  (csch_TCC1-1 nil 3456899039 ("" (subtype-tcc) nil nil)
   ((Sinh? const-decl "bool" complex_lnexp nil)
    (complex type-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "bool" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (- const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (sinh const-decl "complex" complex_lnexp nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (c_sinh_0 0
  (c_sinh_0-1 nil 3456901842
   ("" (assert)
    (("" (rewrite "sin_0")
      (("" (rewrite "sinh_0") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sin_0 formula-decl nil trig_basic "trig/")
    (sinh_0 formula-decl nil hyperbolic "lnexp/")
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (c_eq3 formula-decl nil complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/"))
   shostak))
 (c_cosh_0 0
  (c_cosh_0-1 nil 3456901865
   ("" (assert)
    (("" (rewrite "sin_0")
      (("" (rewrite "cos_0")
        (("" (rewrite "cosh_0") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin_0 formula-decl nil trig_basic "trig/")
    (cosh_0 formula-decl nil hyperbolic "lnexp/")
    (cos_0 formula-decl nil trig_basic "trig/")
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (c_eq3 formula-decl nil complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/"))
   shostak))
 (c_tanh_0_TCC1 0
  (c_tanh_0_TCC1-1 nil 3456901832
   ("" (expand "Cosh?")
    (("" (assert)
      (("" (flatten)
        (("" (hide -2)
          (("" (rewrite "cos_0")
            (("" (rewrite "cosh_0") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_ne3 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (cosh_0 formula-decl nil hyperbolic "lnexp/")
    (cos_0 formula-decl nil trig_basic "trig/")
    (Cosh? const-decl "bool" complex_lnexp nil))
   nil))
 (c_tanh_0 0
  (c_tanh_0-1 nil 3456901957
   ("" (expand "tanh")
    (("" (assert)
      (("" (lemma "c_sinh_0")
        (("" (lemma "c_cosh_0")
          (("" (assert)
            (("" (flatten)
              (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (c_cosh_0 formula-decl nil complex_lnexp nil)
    (c_sinh_0 formula-decl nil complex_lnexp nil)
    (tanh const-decl "complex" complex_lnexp nil))
   shostak))
 (c_sech_0 0
  (c_sech_0-1 nil 3456902083
   ("" (expand "sech")
    (("" (assert)
      (("" (lemma "c_cosh_0")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (replace -1)
                (("" (expand "sq_abs")
                  (("" (assert)
                    (("" (replace -1)
                      (("" (replace -2)
                        (("" (hide-all-but 1) (("" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types
     nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_div2 formula-decl nil complex_types nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (c_cosh_0 formula-decl nil complex_lnexp nil)
    (sech const-decl "complex" complex_lnexp nil))
   shostak))
 (c_cosh_sinh_one 0
  (c_cosh_sinh_one-1 nil 3456902156
   ("" (skosimp)
    (("" (assert)
      (("" (lemma "sin2_cos2" ("a" "Im(z!1)"))
        (("" (lemma "cosh_sinh_one" ("x" "Re(z!1)"))
          ((""
            (lemma "both_sides_times1"
             ("x" "sq(cosh(Re(z!1))) - sq(sinh(Re(z!1)))" "y" "1" "n0z"
              "sq(sin(Im(z!1))) + sq(cos(Im(z!1)))"))
            (("1" (expand "sq") (("1" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (complex_sq_def formula-decl nil complex_types nil)
    (cosh_sinh_one formula-decl nil hyperbolic "lnexp/")
    (Re const-decl "real" complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sinh const-decl "real" hyperbolic "lnexp/")
    (cosh const-decl "posreal_ge1" hyperbolic "lnexp/")
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic "lnexp/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" trig_basic "trig/")
    (sin const-decl "real" trig_basic "trig/")
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Im const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin2_cos2 formula-decl nil trig_basic "trig/"))
   shostak))
 (c_tanh_sech_one 0
  (c_tanh_sech_one-1 nil 3456993091
   ("" (skosimp)
    (("" (typepred "cz!1")
      (("" (expand "Cosh?")
        (("" (expand "tanh")
          (("" (expand "sech")
            (("" (lemma "c_cosh_sinh_one" ("z" "cz!1"))
              ((""
                (lemma "complex_sq_div"
                 ("z" "sinh(cz!1)" "n0z" "cosh(cz!1)"))
                ((""
                  (lemma "complex_sq_div"
                   ("z" "complex_(1,0)" "n0z" "cosh(cz!1)"))
                  (("" (case "sq(cosh(cz!1)) /=0")
                    (("1" (name-replace "SC" "sq(cosh(cz!1))")
                      (("1" (name-replace "SS" "sq(sinh(cz!1))")
                        (("1"
                          (name-replace "DRL1"
                           "sq(sinh(cz!1) / cosh(cz!1))")
                          (("1"
                            (name-replace "DRL2" "sq(1 / cosh(cz!1))")
                            (("1"
                              (name-replace "DRL3"
                               "sq(complex_(1, 0) / cosh(cz!1))")
                              (("1"
                                (hide -5)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case-replace
                                       "Re(DRL2)=Re(DRL3)")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case-replace
                                           "Im(DRL2)=Im(DRL3)")
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (replace -4)
                                                  (("1"
                                                    (replace -5)
                                                    (("1"
                                                      (hide
                                                       -2
                                                       -3
                                                       -4
                                                       -5)
                                                      (("1"
                                                        (case
                                                         "sq_abs(SC)>0")
                                                        (("1"
                                                          (lemma
                                                           "div_cancel3"
                                                           ("y"
                                                            "1"
                                                            "x"
                                                            "Im(SS) * Im(SC) + Re(SS) * Re(SC)+Re(SC)"
                                                            "n0z"
                                                            "sq_abs(SC)"))
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 "div_cancel3"
                                                                 ("y"
                                                                  "0"
                                                                  "x"
                                                                  "Im(SS) * Re(SC) - Re(SS) * Im(SC)-Im(SC)"
                                                                  "n0z"
                                                                  "sq_abs(SC)"))
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "sq_abs")
                                                                      (("1"
                                                                        (expand
                                                                         "sq")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (expand
                                                             "sq_abs")
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (lemma
                                                                 "sq_nz_pos"
                                                                 ("nz"
                                                                  "Re(SC)"))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "sq_nz_pos"
                                                                 ("nz"
                                                                  "Im(SC)"))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "DRL2")
                                            (("2"
                                              (expand "DRL3")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "sq")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "DRL2")
                                        (("2"
                                          (expand "DRL3")
                                          (("2"
                                            (expand "sq")
                                            (("2"
                                              (hide-all-but 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 -4))
                      (("2" (name-replace "X" "cosh(cz!1)")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2"
                              (lemma "zero_times3"
                               ("x" "Im(X)" "y" "Re(X)"))
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (lemma "sq_eq_0" ("a" "Re(X)"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "sq_rew")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "sq_rew")
                                        (("2"
                                          (lemma
                                           "sq_eq_0"
                                           ("a" "Im(X)"))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Cosh? const-decl "bool" complex_lnexp nil)
    (complex type-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tanh const-decl "complex" complex_lnexp nil)
    (c_cosh_sinh_one formula-decl nil complex_lnexp nil)
    (complex_? adt-recognizer-decl "[complex -> boolean]" complex_types
     nil)
    (complex_ adt-constructor-decl "[[real, real] -> (complex_?)]"
     complex_types nil)
    (zero_times3 formula-decl nil real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sq_rew formula-decl nil sq "reals/")
    (sq_eq_0 formula-decl nil sq "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/ const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (c_ne3 formula-decl nil complex_types nil)
    (complex_sq_def formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (DRL3 skolem-const-decl "complex" complex_lnexp nil)
    (mul_nzcomplex1 application-judgement "nzcomplex" complex_types
     nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types
     nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (Re_div2 formula-decl nil complex_types nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_div2 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (DRL2 skolem-const-decl "complex" complex_lnexp nil)
    (/ const-decl "complex" complex_types nil)
    (sq const-decl "complex" complex_types nil)
    (/= const-decl "bool" complex_types nil)
    (complex_sq_div formula-decl nil complex_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (cosh const-decl "complex" complex_lnexp nil)
    (sinh const-decl "complex" complex_lnexp nil)
    (sech const-decl "complex" complex_lnexp nil))
   shostak))
 (c_coth_csch_one 0
  (c_coth_csch_one-1 nil 3472821686
   ("" (skosimp)
    (("" (typepred "sz!1")
      (("" (expand "Sinh?")
        (("" (expand "coth")
          (("" (expand "csch")
            ((""
              (lemma "complex_sq_div"
               ("z" "cosh(sz!1)" "n0z" "sinh(sz!1)"))
              ((""
                (lemma "complex_sq_div"
                 ("z" "complex_(1,0)" "n0z" "sinh(sz!1)"))
                (("" (lemma "c_cosh_sinh_one" ("z" "sz!1"))
                  (("" (name-replace "SINH" "sinh(sz!1)")
                    (("" (name-replace "DRL1" "sq(cosh(sz!1) / SINH)")
                      ((""
                        (case "sq(complex_(1, 0) / SINH)=sq(1 / SINH)")
                        (("1"
                          (name-replace "DRL2"
                           "sq(complex_(1, 0) / SINH)")
                          (("1" (name-replace "DRL3" "sq(1 / SINH)")
                            (("1" (name-replace "SS" "sq(SINH)")
                              (("1"
                                (name-replace "SC" "sq(cosh(sz!1))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -5)
                                            (("1"
                                              (replace -7)
                                              (("1"
                                                (case-replace
                                                 "Im(SC)=Im(SS)")
                                                (("1"
                                                  (case-replace
                                                   "Re(SC)=1+Re(SS)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "div_simp"
                                                       ("n0x"
                                                        "sq_abs(SS)"))
                                                      (("1"
                                                        (expand
                                                         "sq_abs"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "sq"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2 -2 -3 -1)
                          (("2" (expand "sq") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sinh? const-decl "bool" complex_lnexp nil)
    (complex type-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (coth const-decl "complex" complex_lnexp nil)
    (cosh const-decl "complex" complex_lnexp nil)
    (sinh const-decl "complex" complex_lnexp nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (complex_sq_div formula-decl nil complex_types nil)
    (c_cosh_sinh_one formula-decl nil complex_lnexp nil)
    (/ const-decl "complex" complex_types nil)
    (sq const-decl "complex" complex_types nil)
    (Re_div2 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types
     nil)
    (mul_nzcomplex1 application-judgement "nzcomplex" complex_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (c_eq3 formula-decl nil complex_types nil)
    (complex_sq_def formula-decl nil complex_types nil)
    (Re_rew formula-decl nil complex_types nil)
    (Im_rew formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (c_ne3 formula-decl nil complex_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (/ const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (complex_ adt-constructor-decl "[[real, real] -> (complex_?)]"
     complex_types nil)
    (complex_? adt-recognizer-decl "[complex -> boolean]" complex_types
     nil)
    (csch const-decl "complex" complex_lnexp nil))
   shostak))
 (c_cosh_plus_sinh 0
  (c_cosh_plus_sinh-1 nil 3456902338
   ("" (skosimp)
    (("" (assert)
      (("" (assert)
        (("" (lemma "cosh_plus_sinh" ("x" "Re(z!1)"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (cosh_plus_sinh formula-decl nil hyperbolic "lnexp/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil))
   shostak))
 (c_cosh_minus_sinh 0
  (c_cosh_minus_sinh-1 nil 3456902390
   ("" (skosimp)
    (("" (assert)
      (("" (lemma "cosh_minus_sinh" ("x" "Re(z!1)"))
        (("" (assert)
          (("" (rewrite "cos_neg")
            (("" (rewrite "sin_neg") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_exp formula-decl nil complex_lnexp nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_exp formula-decl nil complex_lnexp nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (sin_neg formula-decl nil trig_basic "trig/")
    (cos_neg formula-decl nil trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh_minus_sinh formula-decl nil hyperbolic "lnexp/"))
   shostak))
 (c_sinh_neg 0
  (c_sinh_neg-1 nil 3456902501
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "sin_neg")
        (("" (rewrite "cos_neg")
          (("" (rewrite "cosh_neg")
            (("" (rewrite "sinh_neg") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (cos_neg formula-decl nil trig_basic "trig/")
    (sinh_neg formula-decl nil hyperbolic "lnexp/")
    (cosh_neg formula-decl nil hyperbolic "lnexp/")
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_neg formula-decl nil trig_basic "trig/"))
   shostak))
 (c_cosh_neg 0
  (c_cosh_neg-1 nil 3456902540
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "sinh_neg")
        (("" (rewrite "cosh_neg")
          (("" (rewrite "cos_neg")
            (("" (rewrite "sin_neg") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (cosh_neg formula-decl nil hyperbolic "lnexp/")
    (sin_neg formula-decl nil trig_basic "trig/")
    (cos_neg formula-decl nil trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_neg formula-decl nil hyperbolic "lnexp/"))
   shostak))
 (c_tanh_neg_TCC1 0
  (c_tanh_neg_TCC1-1 nil 3456901832 ("" (subtype-tcc) nil nil)
   ((complex type-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (+ const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (cosh const-decl "complex" complex_lnexp nil)
    (/= const-decl "bool" complex_types nil)
    (Cosh? const-decl "bool" complex_lnexp nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (c_tanh_neg 0
  (c_tanh_neg-1 nil 3472834131
   ("" (skosimp)
    (("" (expand "tanh")
      (("" (lemma "c_sinh_neg" ("z" "cz!1"))
        (("" (lemma "c_cosh_neg" ("z" "cz!1"))
          (("" (typepred "cz!1")
            (("" (expand "Cosh?")
              (("" (name-replace "CNZ" "cosh(-cz!1)")
                (("" (name-replace "SNZ" "sinh(-cz!1)")
                  (("" (name-replace "CZ" "cosh(cz!1)")
                    (("" (name-replace "SZ" "sinh(cz!1)")
                      (("" (assert)
                        (("" (flatten)
                          (("" (expand "sq_abs")
                            (("" (replace -2)
                              ((""
                                (replace -3)
                                ((""
                                  (replace -4)
                                  ((""
                                    (replace -5)
                                    ((""
                                      (hide -2 -3 -4 -5)
                                      (("" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tanh const-decl "complex" complex_lnexp nil)
    (c_cosh_neg formula-decl nil complex_lnexp nil)
    (sinh const-decl "complex" complex_lnexp nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (c_ne3 formula-decl nil complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cosh const-decl "complex" complex_lnexp nil)
    (- const-decl "complex" complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (c_sinh_neg formula-decl nil complex_lnexp nil)
    (complex type-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Cosh? const-decl "bool" complex_lnexp nil))
   shostak))
 (c_csch_neg_TCC1 0
  (c_csch_neg_TCC1-1 nil 3456901832 ("" (subtype-tcc) nil nil)
   ((complex type-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (exp const-decl "nzcomplex" complex_lnexp nil)
    (- const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (sinh const-decl "complex" complex_lnexp nil)
    (/= const-decl "bool" complex_types nil)
    (Sinh? const-decl "bool" complex_lnexp nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (c_csch_neg 0
  (c_csch_neg-1 nil 3472834811
   ("" (skosimp)
    (("" (typepred "sz!1")
      (("" (expand "Sinh?")
        (("" (expand "csch")
          (("" (lemma "c_sinh_neg" ("z" "sz!1"))
            (("" (name-replace "SNZ" "sinh(-sz!1)")
              (("" (name-replace "SZ" "sinh(sz!1)")
                (("" (assert)
                  (("" (flatten)
                    (("" (expand "sq_abs")
                      (("" (replace -1)
                        (("" (replace -2)
                          (("" (hide -1 -2)
                            (("" (rewrite "sq_neg")
                              ((""
                                (rewrite "sq_neg")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sinh? const-decl "bool" complex_lnexp nil)
    (complex type-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (csch const-decl "complex" complex_lnexp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sinh const-decl "complex" complex_lnexp nil)
    (- const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (neg_nzcomplex application-judgement "nzcomplex" complex_types nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (c_ne3 formula-decl nil complex_types nil)
    (Re_div2 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_neg formula-decl nil sq "reals/")
    (Re const-decl "real" complex_types nil)
    (c_sinh_neg formula-decl nil complex_lnexp nil))
   shostak))
 (c_sech_neg 0
  (c_sech_neg-1 nil 3472834931
   ("" (skosimp)
    (("" (typepred "cz!1")
      (("" (expand "Cosh?")
        (("" (expand "sech")
          (("" (lemma "c_cosh_neg" ("z" "cz!1"))
            (("" (name-replace "CNZ" "cosh(-cz!1)")
              (("" (name-replace "CZ" "cosh(cz!1)")
                (("" (assert)
                  (("" (flatten)
                    (("" (expand "sq_abs")
                      (("" (replace -1)
                        (("" (replace -2) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Cosh? const-decl "bool" complex_lnexp nil)
    (complex type-decl nil complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sech const-decl "complex" complex_lnexp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cosh const-decl "complex" complex_lnexp nil)
    (- const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_nzcomplex2 application-judgement "nzcomplex" complex_types
     nil)
    (c_eq1 formula-decl nil complex_types nil)
    (c_ne3 formula-decl nil complex_types nil)
    (Re_div2 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (c_cosh_neg formula-decl nil complex_lnexp nil))
   shostak))
 (c_coth_neg 0
  (c_coth_neg-1 nil 3472834455
   ("" (skosimp)
    (("" (expand "coth")
      (("" (typepred "sz!1")
        (("" (expand "Sinh?")
          (("" (lemma "c_sinh_neg" ("z" "sz!1"))
            (("" (lemma "c_cosh_neg" ("z" "sz!1"))
              (("" (name-replace "SZ" "sinh(sz!1)")
                (("" (name-replace "SNZ" "sinh(-sz!1)")
                  (("" (name-replace "CZ" "cosh(sz!1)")
                    (("" (name-replace "CNZ" "cosh(-sz!1)")
                      (("" (assert)
                        (("" (flatten)
                          (("" (expand "sq_abs")
                            (("" (replace -1)
                              ((""
                                (replace -2)
                                ((""
                                  (replace -3)
                                  ((""
                                    (replace -4)
                                    ((""
                                      (rewrite "sq_neg")
                                      ((""
                                        (rewrite "sq_neg")
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coth const-decl "complex" complex_lnexp nil)
    (c_cosh_neg formula-decl nil complex_lnexp nil)
    (- const-decl "complex" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_neg formula-decl nil sq "reals/")
    (Re const-decl "real" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (c_ne3 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cosh const-decl "complex" complex_lnexp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sinh const-decl "complex" complex_lnexp nil)
    (c_sinh_neg formula-decl nil complex_lnexp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (complex type-decl nil complex_types nil)
    (Sinh? const-decl "bool" complex_lnexp nil))
   shostak))
 (c_sinh_sum 0
  (c_sinh_sum-1 nil 3456902582
   ("" (skosimp)
    (("" (assert)
      (("" (assert)
        (("" (rewrite "sinh_sum")
          (("" (assert)
            (("" (rewrite "cosh_sum")
              (("" (rewrite "cos_plus")
                (("" (rewrite "sin_plus") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_sum formula-decl nil hyperbolic "lnexp/")
    (cosh_sum formula-decl nil hyperbolic "lnexp/")
    (sin_plus formula-decl nil trig_basic "trig/")
    (cos_plus formula-decl nil trig_basic "trig/")
    (Im const-decl "real" complex_types nil))
   shostak))
 (c_sinh_diff 0
  (c_sinh_diff-1 nil 3456989995
   ("" (skosimp)
    (("" (lemma "c_sinh_sum" ("x" "x!1" "y" "-y!1"))
      (("" (assert)
        (("" (flatten)
          (("" (rewrite "sin_neg")
            (("" (rewrite "cos_neg")
              (("" (rewrite "cosh_neg")
                (("" (rewrite "sinh_neg") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "complex" complex_types nil)
    (complex type-decl nil complex_types nil)
    (c_sinh_sum formula-decl nil complex_lnexp nil)
    (cos_neg formula-decl nil trig_basic "trig/")
    (sinh_neg formula-decl nil hyperbolic "lnexp/")
    (cosh_neg formula-decl nil hyperbolic "lnexp/")
    (Re const-decl "real" complex_types nil)
    (sin_neg formula-decl nil trig_basic "trig/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Im const-decl "real" complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/"))
   shostak))
 (c_cosh_sum 0
  (c_cosh_sum-1 nil 3456990162
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "cosh_sum")
        (("" (rewrite "cos_plus")
          (("" (rewrite "sinh_sum")
            (("" (rewrite "sin_plus") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (cos_plus formula-decl nil trig_basic "trig/")
    (sin_plus formula-decl nil trig_basic "trig/")
    (sinh_sum formula-decl nil hyperbolic "lnexp/")
    (cosh_sum formula-decl nil hyperbolic "lnexp/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil))
   shostak))
 (c_cosh_diff 0
  (c_cosh_diff-1 nil 3456990226
   ("" (skosimp)
    (("" (lemma "c_cosh_sum" ("x" "x!1" "y" "-y!1"))
      (("" (assert)
        (("" (rewrite "cosh_neg")
          (("" (rewrite "cos_neg")
            (("" (rewrite "sin_neg")
              (("" (rewrite "sinh_neg")
                (("" (assert)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "complex" complex_types nil)
    (complex type-decl nil complex_types nil)
    (c_cosh_sum formula-decl nil complex_lnexp nil)
    (Re const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh_neg formula-decl nil hyperbolic "lnexp/")
    (sin_neg formula-decl nil trig_basic "trig/")
    (sinh_neg formula-decl nil hyperbolic "lnexp/")
    (cos_neg formula-decl nil trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/"))
   shostak))
 (c_sinh2x 0
  (c_sinh2x-1 nil 3456991337
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "cos_2a")
        (("" (rewrite "sin_2a")
          (("" (rewrite "sinh2x")
            (("" (rewrite "cosh2x")
              (("" (split)
                (("1" (assert) nil nil)
                 ("2"
                  (case-replace
                   "2*sq(cosh(Re(x!1))) - 1=sq(cosh(Re(x!1)))+sq(sinh(Re(x!1)))")
                  (("1" (expand "sq") (("1" (propax) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (lemma "cosh_sinh_one" ("x" "Re(x!1)"))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (sin_2a formula-decl nil trig_basic "trig/")
    (cosh2x formula-decl nil hyperbolic "lnexp/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sinh const-decl "real" hyperbolic "lnexp/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cosh const-decl "posreal_ge1" hyperbolic "lnexp/")
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic "lnexp/")
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cosh_sinh_one formula-decl nil hyperbolic "lnexp/")
    (sinh2x formula-decl nil hyperbolic "lnexp/")
    (Re const-decl "real" complex_types nil)
    (cos_2a formula-decl nil trig_basic "trig/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil))
   shostak))
 (c_cosh2x 0
  (c_cosh2x-1 nil 3456991747
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "cosh2x")
        (("" (rewrite "sinh2x")
          (("" (rewrite "cos_2a")
            (("" (rewrite "sin_2a")
              (("" (assert)
                (("" (expand "sq")
                  (("" (rewrite "sq_rew")
                    (("" (rewrite "sq_rew")
                      (("" (rewrite "sq_rew")
                        (("" (lemma "sin2_cos2" ("a" "Im(x!1)"))
                          (("" (expand "sq")
                            (("" (assert)
                              ((""
                                (case-replace
                                 "cos(Im(x!1)) * cos(Im(x!1))=1-sin(Im(x!1)) * sin(Im(x!1))")
                                (("1"
                                  (hide -1 -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "cosh_sinh_one"
                                       ("x" "Re(x!1)"))
                                      (("1"
                                        (expand "sq")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_sub3 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_sub3 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (complex_sq_def formula-decl nil complex_types nil)
    (sinh2x formula-decl nil hyperbolic "lnexp/")
    (sin_2a formula-decl nil trig_basic "trig/")
    (sq const-decl "nonneg_real" sq "reals/")
    (cosh const-decl "posreal_ge1" hyperbolic "lnexp/")
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic "lnexp/")
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sin2_cos2 formula-decl nil trig_basic "trig/")
    (cosh_sinh_one formula-decl nil hyperbolic "lnexp/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" trig_basic "trig/")
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sq_rew formula-decl nil sq "reals/")
    (sin const-decl "real" trig_basic "trig/")
    (cos_2a formula-decl nil trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cosh2x formula-decl nil hyperbolic "lnexp/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil))
   shostak))
 (c_cosh2x_B 0
  (c_cosh2x_B-1 nil 3456992244
   ("" (skosimp)
    (("" (lemma "c_cosh2x" ("x" "x!1"))
      (("" (lemma "c_cosh_sinh_one" ("z" "x!1"))
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-decl nil complex_types nil)
    (c_cosh2x formula-decl nil complex_lnexp nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Im_add3 formula-decl nil complex_types nil)
    (Re_add3 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_sub3 formula-decl nil complex_types nil)
    (Re_sub3 formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (complex_sq_def formula-decl nil complex_types nil)
    (c_cosh_sinh_one formula-decl nil complex_lnexp nil))
   shostak))
 (c_cosh2x_C 0
  (c_cosh2x_C-1 nil 3456992191
   ("" (skosimp)
    (("" (lemma "c_cosh2x" ("x" "x!1"))
      (("" (lemma "c_cosh_sinh_one" ("z" "x!1"))
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((complex type-decl nil complex_types nil)
    (c_cosh2x formula-decl nil complex_lnexp nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_sub3 formula-decl nil complex_types nil)
    (Re_sub3 formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (complex_sq_def formula-decl nil complex_types nil)
    (c_cosh_sinh_one formula-decl nil complex_lnexp nil))
   shostak))
 (c_sinh4x 0
  (c_sinh4x-1 nil 3456992272
   ("" (skosimp)
    (("" (assert)
      (("" (rewrite "sinh4x")
        (("" (rewrite "cosh4x")
          (("" (rewrite "expt_x4")
            (("" (rewrite "expt_x4")
              (("" (assert)
                (("" (lemma "cos_2a" ("a" "Im(x!1)"))
                  (("" (lemma "cos_2a" ("a" "2*Im(x!1)"))
                    (("" (replace -1)
                      (("" (replace -2)
                        (("" (lemma "sin_2a" ("a" "Im(x!1)"))
                          (("" (lemma "sin_2a" ("a" "2*Im(x!1)"))
                            (("" (replace -1)
                              ((""
                                (replace -2)
                                ((""
                                  (assert)
                                  ((""
                                    (replace -4)
                                    ((""
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "sq")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "sq")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (complex_sq_def formula-decl nil complex_types nil)
    (cosh4x formula-decl nil hyperbolic "lnexp/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sinh const-decl "real" hyperbolic "lnexp/")
    (cos_2a formula-decl nil trig_basic "trig/")
    (Im const-decl "real" complex_types nil)
    (sin_2a formula-decl nil trig_basic "trig/")
    (sq const-decl "nonneg_real" sq "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt_x4 formula-decl nil exponentiation nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic "lnexp/")
    (cosh const-decl "posreal_ge1" hyperbolic "lnexp/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sinh4x formula-decl nil hyperbolic "lnexp/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil))
   shostak))
 (complex_sin_def 0
  (complex_sin_def-1 nil 3456899653
   ("" (skosimp)
    (("" (assert)
      (("" (lemma "cosh_neg" ("x" "Im(z!1)"))
        (("" (lemma "sinh_neg" ("x" "Im(z!1)"))
          (("" (assert)
            (("" (rewrite "zero_times1")
              (("" (assert)
                (("" (lemma "sin_neg" ("a" "Re(z!1)"))
                  (("" (lemma "cos_neg" ("a" "Re(z!1)"))
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((neg_nzcomplex application-judgement "nzcomplex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_sin formula-decl nil complex_lnexp nil)
    (Im_sinh formula-decl nil complex_lnexp nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_sinh formula-decl nil complex_lnexp nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_conjugate formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Re_conjugate formula-decl nil complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Re_i formula-decl nil complex_types nil)
    (Re_sin formula-decl nil complex_lnexp nil))
   shostak))
 (complex_cos_def 0
  (complex_cos_def-1 nil 3456899846
   ("" (skosimp)
    (("" (assert)
      (("" (assert)
        (("" (rewrite "Im_cos")
          (("" (rewrite "Im_cosh")
            (("" (lemma "cosh_neg" ("x" "Im(z!1)"))
              (("" (lemma "sinh_neg" ("x" "Im(z!1)"))
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" trig_basic "trig/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" trig_basic "trig/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_cosh formula-decl nil complex_lnexp nil)
    (Re_cosh formula-decl nil complex_lnexp nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_i formula-decl nil complex_types nil)
    (Re_i formula-decl nil complex_types nil)
    (Re_cos formula-decl nil complex_lnexp nil)
    (complex type-decl nil complex_types nil)
    (Im_cos formula-decl nil complex_lnexp nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sinh_neg formula-decl nil hyperbolic "lnexp/")
    (Im const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh_neg formula-decl nil hyperbolic "lnexp/"))
   shostak)))

