(exp_approx
 (exp_neg_le1_bounds 0
  (exp_neg_le1_bounds-3 nil 3307800311
   ("" (expand "exp_neg_le1_lb")
    (("" (expand "exp_neg_le1_ub")
      (("" (skosimp)
        (("" (case "FORALL (n:nat): 0 < x!1^(2*n) & x!1^(2*n) <= 1")
          (("1"
            (case "FORALL (n:nat): -1 <= x!1^(2*n+1) & x!1^(2*n+1) < 0")
            (("1" (case "max(exp(x!1), 1) = 1")
              (("1"
                (case "FORALL (n,m:posnat): n < m => abs(x!1)^m/factorial(m) < abs(x!1)^n/factorial(n)")
                (("1"
                  (case-replace "FORALL (n: nat, x: real):
                  exp_estimate(x, n) =
                   sigma(0, n,
                         LAMBDA (nn: nat):
                           IF nn = 0 THEN 1 ELSE x ^ nn / factorial(nn) ENDIF)")
                  (("1" (hide -1)
                    (("1"
                      (case-replace
                       "exp_estimate(x!1, 1 + 2 * n!1) < exp(x!1)")
                      (("1"
                        (lemma "exp_taylors_err"
                         ("x" "x!1" "n" "1+2*n!1"))
                        (("1" (reveal -1)
                          (("1" (copy -1)
                            (("1" (inst?)
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "abs" -1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (expand "sigma" -1 1)
                                                  (("1"
                                                    (name-replace
                                                     "RHS"
                                                     "sigma(0, 2 * n!1,
                                                   LAMBDA (nn: nat):
                                                     IF nn = 0 THEN 1 ELSE x!1 ^ nn / factorial(nn) ENDIF)")
                                                    (("1"
                                                      (case
                                                       "(x!1^(1+2*n!1))/factorial(1+2*n!1) + abs(x!1)^(2+2*n!1)/factorial(2+2*n!1) < 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -2
                                                         "1+2*n!1"
                                                         "2+2*n!1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case-replace
                                                             "abs(x!1) ^ (1 + 2 * n!1) = -(x!1^(1+2*n!1))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3
                                                               -1
                                                               -3)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3)
                                                                (("2"
                                                                  (rewrite
                                                                   "expt_plus")
                                                                  (("2"
                                                                    (rewrite
                                                                     "expt_plus")
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_times")
                                                                      (("2"
                                                                        (rewrite
                                                                         "expt_times")
                                                                        (("2"
                                                                          (expand
                                                                           "abs")
                                                                          (("2"
                                                                            (case-replace
                                                                             "(-x!1) ^ 2=x!1 ^ 2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (lemma "exp_taylors_err"
                           ("x" "x!1" "n" "2+2*n!1"))
                          (("2" (reveal -1)
                            (("2" (inst?)
                              (("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (reveal -2)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (expand "abs" -1 1)
                                              (("2"
                                                (expand "sigma" -1)
                                                (("2"
                                                  (name-replace
                                                   "LB"
                                                   "sigma(0, 1 + 2 * n!1,
                                                  LAMBDA (nn: nat):
                                                    IF nn = 0 THEN 1 ELSE x!1 ^ nn / factorial(nn) ENDIF)")
                                                  (("2"
                                                    (case-replace
                                                     "exp(x!1) - LB - (x!1 ^ (2 + 2 * n!1)) / factorial(2 + 2 * n!1) < 0")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (case
                                                         "x!1^(2+2*n!1) / factorial(2+2*n!1) - abs(x!1)^(3+2*n!1)/factorial(3+2*n!1) > 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "2+2*n!1"
                                                             "3+2*n!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case-replace
                                                                 "abs(x!1) ^ (2 + 2 * n!1) = x!1 ^ (2 + 2 * n!1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "expt_times"
                                                                     ("i"
                                                                      "2"
                                                                      "j"
                                                                      "1+n!1"))
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "abs(x!1)")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (case-replace
                                                                           "abs(x!1)^2 = x!1^2")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-7
                                                                              1))
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (expand
                                                                                 "expt")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1)
                                                      (("2"
                                                        (case
                                                         "(x!1 ^ (2 + 2 * n!1)) / factorial(2 + 2 * n!1) > 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "1+n!1")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "posreal_div_posreal_is_posreal"
                                                                 ("px"
                                                                  "x!1 ^ (2 + 2 * n!1)"
                                                                  "py"
                                                                  "factorial(2 + 2 * n!1)"))
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (skosimp*)
                      (("2" (expand "exp_estimate")
                        (("2" (lemma "sigma_first")
                          (("2"
                            (inst - "LAMBDA (nn: nat):
                             IF nn = 0 THEN 1 ELSE x!2 ^ nn / factorial(nn) ENDIF"
                             "n!2" "0")
                            (("2" (case-replace "n!2 > 0 ")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (rewrite "sigma_restrict_eq")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (expand "restrict")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case-replace "n!2 = 0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "sigma")
                                      (("1"
                                        (expand "sigma")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-4 -5 1))
                  (("2" (skosimp)
                    (("2"
                      (case "forall (n,m:posnat): factorial(n) < factorial(n+m)")
                      (("1" (case "abs(x!1) ^ m!1 <= abs(x!1) ^ n!2")
                        (("1"
                          (lemma "lt_div_lt_pos1"
                           ("px" "abs(x!1) ^ m!1" "w" "factorial(m!1)"
                            "y" "abs(x!1) ^ n!2" "pz"
                            "factorial(n!2)"))
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (inst - "n!2" "m!1-n!2")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2"
                            (lemma "expt_pos"
                             ("px" "abs(x!1)" "i" "m!1"))
                            (("1" (propax) nil nil)
                             ("2" (expand "abs")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 2 -1)
                          (("2" (case-replace "abs(x!1)=1")
                            (("1" (rewrite "expt_1i")
                              (("1"
                                (rewrite "expt_1i")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (case "abs(x!1)<1")
                              (("1"
                                (lemma
                                 "both_sides_expt_lt1_lt"
                                 ("lt1x"
                                  "abs(x!1)"
                                  "i"
                                  "m!1"
                                  "j"
                                  "n!2"))
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "abs")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -2 -3 2)
                        (("2" (hide -1)
                          (("2" (induct "m")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (skosimp*)
                              (("3"
                                (case-replace "j!1=0")
                                (("1"
                                  (expand "factorial" 1 2)
                                  (("1"
                                    (lemma
                                     "both_sides_times_pos_lt1"
                                     ("pz"
                                      "factorial(n!3)"
                                      "x"
                                      "1"
                                      "y"
                                      "1+n!3"))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst - "n!3")
                                    (("2"
                                      (expand "factorial" 2 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-4 1))
                (("2" (expand "max")
                  (("2" (lemma "exp_strict_increasing")
                    (("2" (expand "strict_increasing?")
                      (("2" (inst - "x!1" "0")
                        (("2" (rewrite "exp_0")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (inst - "n!2")
                  (("2" (flatten)
                    (("2" (rewrite "expt_plus" 1)
                      (("2"
                        (lemma "both_sides_times_neg_lt1"
                         ("nz" "x!1" "y" "0" "x" "x!1^(2*n!2)"))
                        (("1"
                          (lemma "both_sides_times_neg_le1"
                           ("nz" "x!1" "x" "1" "y" "x!1^(2*n!2)"))
                          (("1" (assert)
                            (("1" (name-replace "AA" "x!1 ^ (2 * n!2)")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (rewrite "expt_times" 1)
                (("2" (case "0 < x!1^2 & x!1^2<=1")
                  (("1" (flatten)
                    (("1" (lemma "expt_pos" ("i" "n!2" "px" "x!1^2"))
                      (("1" (expand "<=" -3)
                        (("1" (split -3)
                          (("1" (case-replace "n!2=0")
                            (("1" (rewrite "expt_x0")
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (lemma "both_sides_expt_pos_lt"
                               ("px" "x!1^2" "py" "1" "pm" "n!2"))
                              (("1"
                                (rewrite "expt_1i")
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (rewrite "expt_1i")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (lemma "negreal_times_negreal_is_posreal"
                       ("nx" "x!1" "ny" "x!1"))
                      (("1" (lemma "le_times_le_neg")
                        (("1" (inst - "x!1" "x!1" "-1" "-1")
                          (("1" (expand "^")
                            (("1" (expand "expt")
                              (("1"
                                (expand "expt")
                                (("1"
                                  (expand "expt")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp_neg_le1_ub const-decl "real" exp_approx nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (posreal_max application-judgement
     "{z: posreal | z >= x AND z >= y}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (both_sides_expt_lt1_lt formula-decl nil exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (lt_div_lt_pos1 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (m!1 skolem-const-decl "posnat" exp_approx nil)
    (n!2 skolem-const-decl "posnat" exp_approx nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_pos formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (exp_estimate const-decl "real" exp_series nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (exp_taylors_err formula-decl nil exp_series nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_first formula-decl nil sigma "reals/")
    (restrict const-decl "[T -> real]" sigma "reals/")
    (sigma_restrict_eq formula-decl nil sigma "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (exp_0 formula-decl nil ln_exp nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (x!1 skolem-const-decl "real" exp_approx nil)
    (le_times_le_neg formula-decl nil real_props nil)
    (exp_neg_le1_lb const-decl "real" exp_approx nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)
  (exp_neg_le1_bounds-2 nil 3307367265
   ("" (expand "exp_neg_le1_lb")
    (("" (expand "exp_neg_le1_ub")
      (("" (skosimp)
        (("" (case "FORALL (n:nat): 0 < x!1^(2*n) & x!1^(2*n) <= 1")
          (("1"
            (case "FORALL (n:nat): -1 <= x!1^(2*n+1) & x!1^(2*n+1) < 0")
            (("1" (case "max(exp(x!1), 1) = 1")
              (("1"
                (case "FORALL (n,m:posnat): n < m => abs(x!1)^m/factorial(m) < abs(x!1)^n/factorial(n)")
                (("1"
                  (case-replace
                   "exp_estimate(x!1, 1 + 2 * n!1) < exp(x!1)")
                  (("1" (lemma "exp_series" ("x" "x!1" "n" "1+2*n!1"))
                    (("1" (expand "abs" -1 1)
                      (("1" (assert)
                        (("1" (replace -4)
                          (("1" (hide -2)
                            (("1" (expand "exp_estimate")
                              (("1"
                                (expand "sigma" -1 1)
                                (("1"
                                  (name-replace
                                   "RHS"
                                   "sigma(0, 2 * n!1,
                         LAMBDA (nn: nat):
                           IF nn = 0 THEN 1 ELSE x!1 ^ nn / factorial(nn) ENDIF)")
                                  (("1"
                                    (case
                                     "(x!1^(1+2*n!1))/factorial(1+2*n!1) + abs(x!1)^(2+2*n!1)/factorial(2+2*n!1) < 0")
                                    (("1" (assert) nil)
                                     ("2"
                                      (inst -2 "1+2*n!1" "2+2*n!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "abs(x!1) ^ (1 + 2 * n!1) = -(x!1^(1+2*n!1))")
                                          (("1" (assert) nil)
                                           ("2"
                                            (hide 2 3 -1 -3)
                                            (("2"
                                              (hide -1 -2 -3)
                                              (("2"
                                                (rewrite "expt_plus")
                                                (("1"
                                                  (rewrite "expt_plus")
                                                  (("1"
                                                    (rewrite "expt_x1")
                                                    (("1"
                                                      (rewrite
                                                       "expt_x1")
                                                      (("1"
                                                        (rewrite
                                                         "expt_times")
                                                        (("1"
                                                          (rewrite
                                                           "expt_times")
                                                          (("1"
                                                            (expand
                                                             "abs")
                                                            (("1"
                                                              (case-replace
                                                               "(-x!1) ^ 2=x!1 ^ 2")
                                                              (("1"
                                                                (assert)
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "^")
                                                                  (("2"
                                                                    (expand
                                                                     "expt")
                                                                    (("2"
                                                                      (expand
                                                                       "expt")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))
                                                         ("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))))))
                                                 ("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (assert)
                                                    nil)))))))))))))))))))))))))))))))))
                   ("2" (hide 2)
                    (("2"
                      (lemma "exp_series" ("x" "x!1" "n" "2+2*n!1"))
                      (("2" (replace -3)
                        (("2" (expand "abs" -1 1)
                          (("2" (expand "exp_estimate")
                            (("2" (expand "sigma" -1)
                              (("2"
                                (name-replace
                                 "LB"
                                 "sigma(0, 1 + 2 * n!1,
                        LAMBDA (nn: nat):
                          IF nn = 0 THEN 1 ELSE x!1 ^ nn / factorial(nn) ENDIF)")
                                (("2"
                                  (case-replace
                                   "exp(x!1) - LB - (x!1 ^ (2 + 2 * n!1)) / factorial(2 + 2 * n!1) < 0")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (case
                                       "x!1^(2+2*n!1) / factorial(2+2*n!1) - abs(x!1)^(3+2*n!1)/factorial(3+2*n!1) > 0")
                                      (("1" (assert) nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (inst - "2+2*n!1" "3+2*n!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case-replace
                                               "abs(x!1) ^ (2 + 2 * n!1) = x!1 ^ (2 + 2 * n!1)")
                                              (("1" (assert) nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (lemma
                                                   "expt_times"
                                                   ("i"
                                                    "2"
                                                    "j"
                                                    "1+n!1"))
                                                  (("2"
                                                    (inst-cp
                                                     -
                                                     "abs(x!1)")
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (case-replace
                                                         "abs(x!1)^2 = x!1^2")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-7 1))
                                                          (("2"
                                                            (expand
                                                             "^")
                                                            (("2"
                                                              (expand
                                                               "expt")
                                                              (("2"
                                                                (expand
                                                                 "expt")
                                                                (("2"
                                                                  (expand
                                                                   "expt")
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (assert)
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))
                                   ("2"
                                    (hide -1)
                                    (("2"
                                      (case
                                       "(x!1 ^ (2 + 2 * n!1)) / factorial(2 + 2 * n!1) > 0")
                                      (("1" (assert) nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (inst -4 "1+n!1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "posreal_div_posreal_is_posreal"
                                               ("px"
                                                "x!1 ^ (2 + 2 * n!1)"
                                                "py"
                                                "factorial(2 + 2 * n!1)"))
                                              (("1" (propax) nil)
                                               ("2"
                                                (assert)
                                                nil)))))))))))))))))))))))))))))))
                 ("2" (hide-all-but (-4 -5 1))
                  (("2" (skosimp)
                    (("2"
                      (case "forall (n,m:posnat): factorial(n) < factorial(n+m)")
                      (("1" (case "abs(x!1) ^ m!1 <= abs(x!1) ^ n!2")
                        (("1"
                          (lemma "lt_div_lt_pos1"
                           ("px" "abs(x!1) ^ m!1" "w" "factorial(m!1)"
                            "y" "abs(x!1) ^ n!2" "pz"
                            "factorial(n!2)"))
                          (("1" (split -1)
                            (("1" (propax) nil) ("2" (propax) nil)
                             ("3" (inst - "n!2" "m!1-n!2")
                              (("1" (assert) nil)
                               ("2" (assert) nil)))))
                           ("2"
                            (lemma "expt_pos"
                             ("px" "abs(x!1)" "i" "m!1"))
                            (("1" (propax) nil)
                             ("2" (expand "abs")
                              (("2" (assert) nil)))))))
                         ("2" (hide 2 -1)
                          (("2" (case-replace "abs(x!1)=1")
                            (("1" (rewrite "expt_1i")
                              (("1"
                                (rewrite "expt_1i")
                                (("1" (assert) nil)))))
                             ("2" (case "abs(x!1)<1")
                              (("1"
                                (lemma
                                 "both_sides_expt_lt1_lt"
                                 ("lt1x"
                                  "abs(x!1)"
                                  "i"
                                  "m!1"
                                  "j"
                                  "n!2"))
                                (("1" (assert) nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "abs")
                                    (("2" (assert) nil)))))))
                               ("2"
                                (expand "abs")
                                (("2" (assert) nil)))))))))))
                       ("2" (hide -2 -3 2)
                        (("2" (hide -1)
                          (("2" (induct "m")
                            (("1" (assert) nil) ("2" (assert) nil)
                             ("3" (skosimp*)
                              (("3"
                                (case-replace "j!1=0")
                                (("1"
                                  (expand "factorial" 1 2)
                                  (("1"
                                    (lemma
                                     "both_sides_times_pos_lt1"
                                     ("pz"
                                      "factorial(n!3)"
                                      "x"
                                      "1"
                                      "y"
                                      "1+n!3"))
                                    (("1" (assert) nil)))))
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst - "n!3")
                                    (("2"
                                      (expand "factorial" 2 2)
                                      (("2"
                                        (assert)
                                        nil)))))))))))))))))))))))))
               ("2" (hide-all-but (-4 1))
                (("2" (expand "max")
                  (("2" (lemma "exp_strict_increasing")
                    (("2" (expand "strict_increasing?")
                      (("2" (inst - "x!1" "0")
                        (("2" (rewrite "exp_0")
                          (("2" (assert) nil)))))))))))))))
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (inst - "n!2")
                  (("2" (flatten)
                    (("2" (rewrite "expt_plus" 1)
                      (("2" (rewrite "expt_x1" 1)
                        (("2"
                          (lemma "both_sides_times_neg_lt1"
                           ("nz" "x!1" "y" "0" "x" "x!1^(2*n!2)"))
                          (("1"
                            (lemma "both_sides_times_neg_le1"
                             ("nz" "x!1" "x" "1" "y" "x!1^(2*n!2)"))
                            (("1" (assert) nil)))
                           ("2" (assert) nil)))))))))))))))))
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (rewrite "expt_times" 1)
                (("2" (case "0 < x!1^2 & x!1^2<=1")
                  (("1" (flatten)
                    (("1" (lemma "expt_pos" ("i" "n!2" "px" "x!1^2"))
                      (("1" (expand "<=" -3)
                        (("1" (split -3)
                          (("1" (case-replace "n!2=0")
                            (("1" (rewrite "expt_x0")
                              (("1" (assert) nil)))
                             ("2"
                              (lemma "both_sides_expt_pos_lt"
                               ("px" "x!1^2" "py" "1" "pm" "n!2"))
                              (("1"
                                (rewrite "expt_1i")
                                (("1" (assert) nil)))
                               ("2" (assert) nil)))))
                           ("2" (replace -1)
                            (("2" (rewrite "expt_1i")
                              (("2" (assert) nil)))))))))
                       ("2" (assert) nil)))))
                   ("2" (hide 2)
                    (("2"
                      (lemma "negreal_times_negreal_is_posreal"
                       ("nx" "x!1" "ny" "x!1"))
                      (("1" (lemma "le_times_le_neg")
                        (("1" (inst - "x!1" "x!1" "-1" "-1")
                          (("1" (expand "^")
                            (("1" (expand "expt")
                              (("1"
                                (expand "expt")
                                (("1"
                                  (expand "expt")
                                  (("1" (assert) nil)))))))))
                           ("2" (assert) nil)))))
                       ("2" (assert) nil))))))))))))))))))))
    nil)
   nil nil)
  (exp_neg_le1_bounds-1 nil 3295528895
   ("" (expand "exp_neg_le1_lb")
    (("" (expand "exp_neg_le1_ub")
      (("" (skosimp)
        (("" (case "FORALL (n:nat): 0 < x!1^(2*n) & x!1^(2*n) <= 1")
          (("1"
            (case "FORALL (n:nat): -1 <= x!1^(2*n+1) & x!1^(2*n+1) < 0")
            (("1" (case "max(exp(x!1), 1) = 1")
              (("1"
                (case "FORALL (n,m:posnat): n < m => abs(x!1)^m/factorial(m) < abs(x!1)^n/factorial(n)")
                (("1"
                  (case-replace
                   "exp_series_n(x!1, 1 + 2 * n!1) < exp(x!1)")
                  (("1" (lemma "exp_series" ("x" "x!1" "n" "1+2*n!1"))
                    (("1" (expand "abs" -1 1)
                      (("1" (assert)
                        (("1" (replace -4)
                          (("1" (hide -2)
                            (("1" (expand "exp_series_n")
                              (("1"
                                (expand "sigma" -1 1)
                                (("1"
                                  (name-replace
                                   "RHS"
                                   "sigma(0, 2 * n!1,
             LAMBDA (nn: nat):
               IF nn = 0 THEN 1 ELSE x!1 ^ nn / factorial(nn) ENDIF)")
                                  (("1"
                                    (case
                                     "(x!1^(1+2*n!1))/factorial(1+2*n!1) + abs(x!1)^(2+2*n!1)/factorial(2+2*n!1) < 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (inst -2 "1+2*n!1" "2+2*n!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "abs(x!1) ^ (1 + 2 * n!1) = -(x!1^(1+2*n!1))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2 3 -1 -3)
                                            (("2"
                                              (hide -1 -2 -3)
                                              (("2"
                                                (rewrite "expt_plus")
                                                (("1"
                                                  (rewrite "expt_plus")
                                                  (("1"
                                                    (rewrite "expt_x1")
                                                    (("1"
                                                      (rewrite
                                                       "expt_x1")
                                                      (("1"
                                                        (rewrite
                                                         "expt_times")
                                                        (("1"
                                                          (rewrite
                                                           "expt_times")
                                                          (("1"
                                                            (expand
                                                             "abs")
                                                            (("1"
                                                              (case-replace
                                                               "(-x!1) ^ 2=x!1 ^ 2")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "^")
                                                                  (("2"
                                                                    (expand
                                                                     "expt")
                                                                    (("2"
                                                                      (expand
                                                                       "expt")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (lemma "exp_series" ("x" "x!1" "n" "2+2*n!1"))
                      (("2" (replace -3)
                        (("2" (expand "abs" -1 1)
                          (("2" (expand "exp_series_n")
                            (("2" (expand "sigma" -1)
                              (("2"
                                (name-replace
                                 "LB"
                                 "sigma(0, 1 + 2 * n!1,
            LAMBDA (nn: nat):
              IF nn = 0 THEN 1 ELSE x!1 ^ nn / factorial(nn) ENDIF)")
                                (("2"
                                  (case-replace
                                   "exp(x!1) - LB - (x!1 ^ (2 + 2 * n!1)) / factorial(2 + 2 * n!1) < 0")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (case
                                       "x!1^(2+2*n!1) / factorial(2+2*n!1) - abs(x!1)^(3+2*n!1)/factorial(3+2*n!1) > 0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2"
                                          (inst - "2+2*n!1" "3+2*n!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case-replace
                                               "abs(x!1) ^ (2 + 2 * n!1) = x!1 ^ (2 + 2 * n!1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (lemma
                                                   "expt_times"
                                                   ("i"
                                                    "2"
                                                    "j"
                                                    "1+n!1"))
                                                  (("2"
                                                    (inst-cp
                                                     -
                                                     "abs(x!1)")
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (case-replace
                                                         "abs(x!1)^2 = x!1^2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-7 1))
                                                          (("2"
                                                            (expand
                                                             "^")
                                                            (("2"
                                                              (expand
                                                               "expt")
                                                              (("2"
                                                                (expand
                                                                 "expt")
                                                                (("2"
                                                                  (expand
                                                                   "expt")
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1)
                                    (("2"
                                      (case
                                       "(x!1 ^ (2 + 2 * n!1)) / factorial(2 + 2 * n!1) > 0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (inst -4 "1+n!1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "posreal_div_posreal_is_posreal"
                                               ("px"
                                                "x!1 ^ (2 + 2 * n!1)"
                                                "py"
                                                "factorial(2 + 2 * n!1)"))
                                              (("1" (propax) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-4 -5 1))
                  (("2" (skosimp)
                    (("2"
                      (case "forall (n,m:posnat): factorial(n) < factorial(n+m)")
                      (("1" (case "abs(x!1) ^ m!1 <= abs(x!1) ^ n!2")
                        (("1"
                          (lemma "lt_div_lt_pos1"
                           ("px" "abs(x!1) ^ m!1" "w" "factorial(m!1)"
                            "y" "abs(x!1) ^ n!2" "pz"
                            "factorial(n!2)"))
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (inst - "n!2" "m!1-n!2")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2"
                            (lemma "expt_pos"
                             ("px" "abs(x!1)" "i" "m!1"))
                            (("1" (propax) nil nil)
                             ("2" (expand "abs")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 2 -1)
                          (("2" (case-replace "abs(x!1)=1")
                            (("1" (rewrite "expt_1i")
                              (("1"
                                (rewrite "expt_1i")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (case "abs(x!1)<1")
                              (("1"
                                (lemma
                                 "both_sides_expt_lt1_lt"
                                 ("lt1x"
                                  "abs(x!1)"
                                  "i"
                                  "m!1"
                                  "j"
                                  "n!2"))
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "abs")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "abs")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -2 -3 2)
                        (("2" (hide -1)
                          (("2" (induct "m")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (skosimp*)
                              (("3"
                                (case-replace "j!1=0")
                                (("1"
                                  (expand "factorial" 1 2)
                                  (("1"
                                    (lemma
                                     "both_sides_times_pos_lt1"
                                     ("pz"
                                      "factorial(n!3)"
                                      "x"
                                      "1"
                                      "y"
                                      "1+n!3"))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst - "n!3")
                                    (("2"
                                      (expand "factorial" 2 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-4 1))
                (("2" (expand "max")
                  (("2" (lemma "exp_strict_increasing")
                    (("2" (expand "strict_increasing?")
                      (("2" (inst - "x!1" "0")
                        (("2" (rewrite "exp_0")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (inst - "n!2")
                  (("2" (flatten)
                    (("2" (rewrite "expt_plus" 1)
                      (("2" (rewrite "expt_x1" 1)
                        (("2"
                          (lemma "both_sides_times_neg_lt1"
                           ("nz" "x!1" "y" "0" "x" "x!1^(2*n!2)"))
                          (("1"
                            (lemma "both_sides_times_neg_le1"
                             ("nz" "x!1" "x" "1" "y" "x!1^(2*n!2)"))
                            (("1" (assert) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (rewrite "expt_times" 1)
                (("2" (case "0 < x!1^2 & x!1^2<=1")
                  (("1" (flatten)
                    (("1" (lemma "expt_pos" ("i" "n!2" "px" "x!1^2"))
                      (("1" (expand "<=" -3)
                        (("1" (split -3)
                          (("1" (case-replace "n!2=0")
                            (("1" (rewrite "expt_x0")
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (lemma "both_sides_expt_pos_lt"
                               ("px" "x!1^2" "py" "1" "pm" "n!2"))
                              (("1"
                                (rewrite "expt_1i")
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (rewrite "expt_1i")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (lemma "negreal_times_negreal_is_posreal"
                       ("nx" "x!1" "ny" "x!1"))
                      (("1" (lemma "le_times_le_neg")
                        (("1" (inst - "x!1" "x!1" "-1" "-1")
                          (("1" (expand "^")
                            (("1" (expand "expt")
                              (("1"
                                (expand "expt")
                                (("1"
                                  (expand "expt")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (sigma def-decl "real" sigma "reals/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (exp_0 formula-decl nil ln_exp nil)
    (exp_strict_increasing formula-decl nil ln_exp nil))
   shostak))
 (exp_neg_le1_ub_strict_decreasing_n 0
  (exp_neg_le1_ub_strict_decreasing_n-2 nil 3307800357
   ("" (expand "strict_decreasing?")
    (("" (expand "exp_neg_le1_ub")
      (("" (skosimp*)
        ((""
          (case "FORALL (i:nat,j:posnat): exp_estimate(x!1, 2 * (i+j)) < exp_estimate(x!1, 2 * i)")
          (("1" (inst - "x!2" "y!1-x!2")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (hide -3 2)
            (("2" (skolem 1 ("m" "_"))
              (("2" (induct "j")
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (skolem 1 ("n"))
                  (("3" (flatten)
                    (("3" (expand "exp_estimate")
                      (("3" (expand "sigma" 1 1)
                        (("3" (expand "sigma" 1 1)
                          (("3"
                            (case "(x!1 ^ (1 + 2 * m + 2 * n)) / factorial(1 + 2 * m + 2 * n)
                                        + (x!1 ^ (2 + 2 * m + 2 * n)) / factorial(2 + 2 * m + 2 * n) < 0")
                            (("1" (case-replace "n=0")
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (case-replace "m = 0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "sigma")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (hide 2 -1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma
                                   "both_sides_div_pos_lt1"
                                   ("x"
                                    "x!1 ^ (1 + 2 * m + 2 * n)"
                                    "y"
                                    "0"
                                    "pz"
                                    "factorial(1 + 2 * m + 2 * n)"))
                                  (("2"
                                    (lemma
                                     "expt_plus"
                                     ("n0x"
                                      "x!1"
                                      "i"
                                      "1"
                                      "j"
                                      "2*m+2*n"))
                                    (("1"
                                      (rewrite "expt_x1")
                                      (("1"
                                        (lemma
                                         "expt_times"
                                         ("n0x"
                                          "x!1"
                                          "i"
                                          "2"
                                          "j"
                                          "m+n"))
                                        (("1"
                                          (lemma
                                           "expt_pos"
                                           ("px" "x!1^2" "i" "m+n"))
                                          (("1"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("x"
                                              "x!1"
                                              "y"
                                              "0"
                                              "pz"
                                              "x!1 ^ (2 * m + 2 * n)"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "both_sides_times_neg_lt1"
                                                 ("nz"
                                                  "x!1 ^ (1 + 2 * m + 2 * n) / factorial(1 + 2 * m + 2 * n)"
                                                  "y"
                                                  "-1*(x!1/(2+2*m+2*n))"
                                                  "x"
                                                  "1"))
                                                (("1"
                                                  (lemma
                                                   "div_mult_pos_lt1"
                                                   ("py"
                                                    "2+2*n+2*m"
                                                    "z"
                                                    "-1*x!1"
                                                    "x"
                                                    "1"))
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "div_times"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "factorial"
                                                             1
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus"
                                                               ("n0x"
                                                                "x!1"
                                                                "i"
                                                                "1"
                                                                "j"
                                                                "1+2*n+2*m"))
                                                              (("1"
                                                                (rewrite
                                                                 "expt_x1")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-5 1))
                                            (("2"
                                              (lemma
                                               "negreal_times_negreal_is_posreal"
                                               ("nx" "x!1" "ny" "x!1"))
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp_neg_le1_ub const-decl "real" exp_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp_estimate const-decl "real" exp_series nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!2 skolem-const-decl "nat" exp_approx nil)
    (y!1 skolem-const-decl "nat" exp_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_pos formula-decl nil exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_times formula-decl nil real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (expt def-decl "real" exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/"))
   nil)
  (exp_neg_le1_ub_strict_decreasing_n-1 nil 3295616436
   ("" (expand "strict_decreasing?")
    (("" (expand "exp_neg_le1_ub")
      (("" (skosimp*)
        ((""
          (case "FORALL (i:nat,j:posnat): exp_series_n(x!1, 2 * (i+j)) < exp_series_n(x!1, 2 * i)")
          (("1" (inst - "x!2" "y!1-x!2")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (hide -3 2)
            (("2" (skolem 1 ("m" "_"))
              (("2" (induct "j")
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (skolem 1 ("n"))
                  (("3" (flatten)
                    (("3" (expand "exp_series_n")
                      (("3" (expand "sigma" 1 1)
                        (("3" (expand "sigma" 1 1)
                          (("3"
                            (case "(x!1 ^ (1 + 2 * m + 2 * n)) / factorial(1 + 2 * m + 2 * n)
       + (x!1 ^ (2 + 2 * m + 2 * n)) / factorial(2 + 2 * m + 2 * n) < 0")
                            (("1" (case-replace "n=0")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (hide 2 -1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma
                                   "both_sides_div_pos_lt1"
                                   ("x"
                                    "x!1 ^ (1 + 2 * m + 2 * n)"
                                    "y"
                                    "0"
                                    "pz"
                                    "factorial(1 + 2 * m + 2 * n)"))
                                  (("2"
                                    (lemma
                                     "expt_plus"
                                     ("n0x"
                                      "x!1"
                                      "i"
                                      "1"
                                      "j"
                                      "2*m+2*n"))
                                    (("1"
                                      (rewrite "expt_x1")
                                      (("1"
                                        (lemma
                                         "expt_times"
                                         ("n0x"
                                          "x!1"
                                          "i"
                                          "2"
                                          "j"
                                          "m+n"))
                                        (("1"
                                          (lemma
                                           "expt_pos"
                                           ("px" "x!1^2" "i" "m+n"))
                                          (("1"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("x"
                                              "x!1"
                                              "y"
                                              "0"
                                              "pz"
                                              "x!1 ^ (2 * m + 2 * n)"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "both_sides_times_neg_lt1"
                                                 ("nz"
                                                  "x!1 ^ (1 + 2 * m + 2 * n) / factorial(1 + 2 * m + 2 * n)"
                                                  "y"
                                                  "-1*(x!1/(2+2*m+2*n))"
                                                  "x"
                                                  "1"))
                                                (("1"
                                                  (lemma
                                                   "div_mult_pos_lt1"
                                                   ("py"
                                                    "2+2*n+2*m"
                                                    "z"
                                                    "-1*x!1"
                                                    "x"
                                                    "1"))
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "div_times"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "factorial"
                                                             1
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus"
                                                               ("n0x"
                                                                "x!1"
                                                                "i"
                                                                "1"
                                                                "j"
                                                                "1+2*n+2*m"))
                                                              (("1"
                                                                (rewrite
                                                                 "expt_x1")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-5 1))
                                            (("2"
                                              (lemma
                                               "negreal_times_negreal_is_posreal"
                                               ("nx" "x!1" "ny" "x!1"))
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma "reals/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (exp_neg_le1_lb_strict_increasing_n 0
  (exp_neg_le1_lb_strict_increasing_n-2 nil 3307800385
   ("" (expand "strict_increasing?")
    (("" (expand "exp_neg_le1_lb")
      (("" (skosimp*)
        ((""
          (case "FORALL (i:nat,j:posnat): exp_estimate(x!1, 1 + 2*i) < exp_estimate(x!1, 1+2*(j+i))")
          (("1" (inst - "x!2" "y!1-x!2")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (hide -3 2)
            (("2" (skolem 1 ("n" "_"))
              (("2" (induct "j")
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (skolem 1 ("m"))
                  (("3" (flatten)
                    (("3" (expand "exp_estimate")
                      (("3" (expand "sigma" 1 2)
                        (("3" (expand "sigma" 1 2)
                          (("3"
                            (case "(x!1 ^ (2 + 2 * m + 2 * n)) / factorial(2 + 2 * m + 2 * n)
                   + (x!1 ^ (3 + 2 * m + 2 * n)) / factorial(3 + 2 * m + 2 * n) > 0")
                            (("1" (case-replace "m=0")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (lemma
                                 "posreal_div_posreal_is_posreal"
                                 ("px"
                                  "x!1 ^ (2 + 2 * m + 2 * n)"
                                  "py"
                                  "factorial(2 + 2 * m + 2 * n)"))
                                (("1"
                                  (lemma
                                   "both_sides_times_pos_lt1"
                                   ("pz"
                                    "x!1 ^ (2 + 2 * m + 2 * n) / factorial(2 + 2 * m + 2 * n)"
                                    "x"
                                    "-1*(x!1/(3 + 2 * m + 2 * n))"
                                    "y"
                                    "1"))
                                  (("1"
                                    (lemma
                                     "div_mult_pos_lt1"
                                     ("py"
                                      "3 + 2 * m + 2 * n"
                                      "z"
                                      "-1*x!1"
                                      "x"
                                      "1"))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "div_times" -2)
                                        (("1"
                                          (lemma
                                           "expt_plus"
                                           ("n0x"
                                            "x!1"
                                            "i"
                                            "1"
                                            "j"
                                            "2+2*m+2*n"))
                                          (("1"
                                            (rewrite "expt_x1")
                                            (("1"
                                              (replace -1 -3 rl)
                                              (("1"
                                                (expand
                                                 "factorial"
                                                 1
                                                 2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma
                                     "expt_times"
                                     ("n0x" "x!1" "i" "2" "j" "1+m+n"))
                                    (("1"
                                      (lemma
                                       "expt_pos"
                                       ("px" "x!1^2" "i" "1+m+n"))
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1 2 -2 -3)
                                        (("2"
                                          (lemma
                                           "negreal_times_negreal_is_posreal"
                                           ("nx" "x!1" "ny" "x!1"))
                                          (("1" (grind) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (exp_neg_le1_lb const-decl "real" exp_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp_estimate const-decl "real" exp_series nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!2 skolem-const-decl "nat" exp_approx nil)
    (y!1 skolem-const-decl "nat" exp_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_pos formula-decl nil exponentiation nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (expt def-decl "real" exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (div_times formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/"))
   nil)
  (exp_neg_le1_lb_strict_increasing_n-1 nil 3295619040
   ("" (expand "strict_increasing?")
    (("" (expand "exp_neg_le1_lb")
      (("" (skosimp*)
        ((""
          (case "FORALL (i:nat,j:posnat): exp_series_n(x!1, 1 + 2*i) < exp_series_n(x!1, 1+2*(j+i))")
          (("1" (inst - "x!2" "y!1-x!2")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (hide -3 2)
            (("2" (skolem 1 ("n" "_"))
              (("2" (induct "j")
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (skolem 1 ("m"))
                  (("3" (flatten)
                    (("3" (expand "exp_series_n")
                      (("3" (expand "sigma" 1 2)
                        (("3" (expand "sigma" 1 2)
                          (("3"
                            (case "(x!1 ^ (2 + 2 * m + 2 * n)) / factorial(2 + 2 * m + 2 * n)
        + (x!1 ^ (3 + 2 * m + 2 * n)) / factorial(3 + 2 * m + 2 * n) > 0")
                            (("1" (case-replace "m=0")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2"
                                (lemma
                                 "posreal_div_posreal_is_posreal"
                                 ("px"
                                  "x!1 ^ (2 + 2 * m + 2 * n)"
                                  "py"
                                  "factorial(2 + 2 * m + 2 * n)"))
                                (("1"
                                  (lemma
                                   "both_sides_times_pos_lt1"
                                   ("pz"
                                    "x!1 ^ (2 + 2 * m + 2 * n) / factorial(2 + 2 * m + 2 * n)"
                                    "x"
                                    "-1*(x!1/(3 + 2 * m + 2 * n))"
                                    "y"
                                    "1"))
                                  (("1"
                                    (lemma
                                     "div_mult_pos_lt1"
                                     ("py"
                                      "3 + 2 * m + 2 * n"
                                      "z"
                                      "-1*x!1"
                                      "x"
                                      "1"))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "div_times" -2)
                                        (("1"
                                          (lemma
                                           "expt_plus"
                                           ("n0x"
                                            "x!1"
                                            "i"
                                            "1"
                                            "j"
                                            "2+2*m+2*n"))
                                          (("1"
                                            (rewrite "expt_x1")
                                            (("1"
                                              (replace -1 -3 rl)
                                              (("1"
                                                (expand
                                                 "factorial"
                                                 1
                                                 2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma
                                     "expt_times"
                                     ("n0x" "x!1" "i" "2" "j" "1+m+n"))
                                    (("1"
                                      (lemma
                                       "expt_pos"
                                       ("px" "x!1^2" "i" "1+m+n"))
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1 2 -2 -3)
                                        (("2"
                                          (lemma
                                           "negreal_times_negreal_is_posreal"
                                           ("nx" "x!1" "ny" "x!1"))
                                          (("1" (grind) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma "reals/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (exp_neg_le1_lb_pos 0
  (exp_neg_le1_lb_pos-2 nil 3307800417
   ("" (skosimp*)
    (("" (case "exp_neg_le1_lb(1, x!1) > 0")
      (("1" (lemma "exp_neg_le1_lb_strict_increasing_n" ("x" "x!1"))
        (("1" (expand "strict_increasing?")
          (("1" (assert)
            (("1" (case-replace "pn!1=1")
              (("1" (inst - "1" "pn!1") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "exp_neg_le1_lb")
          (("2" (expand "exp_estimate")
            (("2" (expand "sigma")
              (("2" (expand "sigma")
                (("2" (expand "sigma")
                  (("2" (expand "factorial")
                    (("2" (expand "factorial")
                      (("2" (expand "factorial")
                        (("2" (expand "factorial")
                          (("2" (lemma "quad_min_val")
                            (("2" (inst - "1/2" "1" "1" "x!1")
                              (("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "(4 * (1 / 2) - 1) / (4 * (1 / 2)) = 1/2")
                                  (("1"
                                    (expand "quadratic")
                                    (("1"
                                      (case-replace
                                       "x!1 ^ 2 = sq(x!1)")
                                      (("1"
                                        (case "x!1 ^ 3 / 6 >= -1/6")
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (hide -2 -3 2)
                                          (("2"
                                            (lemma
                                             "sq_le"
                                             ("nna" "-x!1" "nnb" "1"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite "sq_neg")
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (expand "expt" 1)
                                                    (("2"
                                                      (replace -2 1)
                                                      (("2"
                                                        (lemma
                                                         "sq_nz_pos")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "-x!1")
                                                          (("2"
                                                            (rewrite
                                                             "sq_neg")
                                                            (("2"
                                                              (hide -3)
                                                              (("2"
                                                                (lemma
                                                                 "le_times_le_pos"
                                                                 ("nnx"
                                                                  "sq(x!1)/6"
                                                                  "y"
                                                                  "1/6"
                                                                  "nnz"
                                                                  "-x!1"
                                                                  "w"
                                                                  "1"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp_neg_le1_lb const-decl "real" exp_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp_neg_le1_lb_strict_increasing_n formula-decl nil exp_approx
     nil)
    (sigma def-decl "real" sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (sq_neg formula-decl nil sq "reals/")
    (sq_le formula-decl nil sq "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quadratic const-decl "real" quadratic "reals/")
    (sq_1 formula-decl nil sq "reals/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (quad_min_val formula-decl nil quad_minmax "reals/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp_estimate const-decl "real" exp_series nil))
   nil)
  (exp_neg_le1_lb_pos-1 nil 3295554734
   ("" (skosimp*)
    (("" (case "exp_neg_le1_lb(1, x!1) > 0")
      (("1" (lemma "exp_neg_le1_lb_strict_increasing_n" ("x" "x!1"))
        (("1" (expand "strict_increasing?")
          (("1" (assert)
            (("1" (case-replace "pn!1=1")
              (("1" (inst - "1" "pn!1") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "exp_neg_le1_lb")
          (("2" (expand "exp_series_n")
            (("2" (expand "sigma")
              (("2" (expand "sigma")
                (("2" (expand "sigma")
                  (("2" (expand "sigma")
                    (("2" (expand "factorial")
                      (("2" (expand "factorial")
                        (("2" (expand "factorial")
                          (("2" (expand "factorial")
                            (("2"
                              (lemma "quadratic_min_val"
                               ("a"
                                "1/2"
                                "b"
                                "1"
                                "c"
                                "1"
                                "x"
                                "x!1"
                                "f"
                                "quadratic(1/2,1,1)"
                                "minpt"
                                "-1"))
                              (("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "(4 * (1 / 2) - 1) / (4 * (1 / 2)) = 1/2")
                                  (("1"
                                    (expand "quadratic")
                                    (("1"
                                      (case-replace
                                       "x!1 ^ 2 = sq(x!1)")
                                      (("1"
                                        (case "x!1 ^ 3 / 6 >= -1/6")
                                        (("1"
                                          (rewrite "expt_x1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide -2 -3 2)
                                          (("2"
                                            (lemma
                                             "sq_le"
                                             ("nna" "-x!1" "nnb" "1"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite "sq_neg")
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (expand "expt" 1)
                                                    (("2"
                                                      (replace -2 1)
                                                      (("2"
                                                        (lemma
                                                         "sq_nz_pos")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "-x!1")
                                                          (("2"
                                                            (rewrite
                                                             "sq_neg")
                                                            (("2"
                                                              (hide -3)
                                                              (("2"
                                                                (lemma
                                                                 "le_times_le_pos"
                                                                 ("nnx"
                                                                  "sq(x!1)/6"
                                                                  "y"
                                                                  "1/6"
                                                                  "nnz"
                                                                  "-x!1"
                                                                  "w"
                                                                  "1"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (sigma def-decl "real" sigma "reals/")
    (quadratic const-decl "real" quadratic "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (sq_neg formula-decl nil sq "reals/")
    (sq_le formula-decl nil sq "reals/")
    (sq_1 formula-decl nil sq "reals/"))
   shostak))
 (exp_neg_ub_TCC1 0
  (exp_neg_ub_TCC1-1 nil 3295622180
   ("" (skosimp)
    (("" (typepred "floor(nx!1)")
      (("" (typepred "nx!1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (exp_neg_ub_TCC2 0
  (exp_neg_ub_TCC2-1 nil 3295622180
   ("" (skosimp)
    (("" (lemma "exp_neg_ub_TCC1" ("nx" "nx!1"))
      (("" (assert) nil nil)) nil))
    nil)
   ((negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_neg_ub_TCC1 subtype-tcc nil exp_approx nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (exp_neg_ub_TCC3 0
  (exp_neg_ub_TCC3-2 nil 3374415239
   ("" (skosimp*)
    (("" (assert)
      (("" (lemma "exp_neg_ub_TCC1" ("nx" "nx!1"))
        (("" (typepred "floor(nx!1)")
          (("" (name-replace "F" "floor(nx!1)")
            (("" (name "P" "-F")
              (("" (replace -1)
                ((""
                  (lemma "both_sides_div_pos_lt1"
                   ("x" "nx!1" "y" "0" "pz" "P"))
                  (("1" (assert)
                    (("1"
                      (lemma "div_mult_pos_le2"
                       ("py" "P" "z" "nx!1" "x" "-1"))
                      (("1" (assert)
                        (("1"
                          (lemma "exp_neg_le1_bounds"
                           ("x" "nx!1/P" "n" "1+n!1"))
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (typepred "exp(nx!1 / P)")
                                (("1"
                                  (lemma
                                   "expt_pos"
                                   ("px"
                                    "exp_neg_le1_ub(1 + n!1, nx!1 / P)"
                                    "i"
                                    "P"))
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (exp_neg_le1_bounds formula-decl nil exp_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (expt_pos formula-decl nil exponentiation nil)
    (exp_neg_le1_ub const-decl "real" exp_approx nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp_neg_ub_TCC1 subtype-tcc nil exp_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil))
   nil)
  (exp_neg_ub_TCC3-1 nil 3295622180
   ("" (skosimp) (("" (assert) nil nil)) nil) nil shostak))
 (exp_neg_lb_TCC1 0
  (exp_neg_lb_TCC1-1 nil 3295622181
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (exp_neg_lb_TCC2 0
  (exp_neg_lb_TCC2-1 nil 3295622181
   ("" (skosimp*)
    (("" (assert)
      (("" (typepred "floor(nx!1)")
        (("" (name-replace "F" "floor(nx!1)")
          (("" (typepred "nx!1")
            (("" (name "P" "-F")
              (("" (replace -1)
                ((""
                  (lemma "both_sides_div_pos_lt1"
                   ("x" "nx!1" "y" "0" "pz" "P"))
                  (("1" (assert)
                    (("1"
                      (lemma "div_mult_pos_le2"
                       ("py" "P" "z" "nx!1" "x" "-1"))
                      (("1" (assert)
                        (("1"
                          (lemma "exp_neg_le1_lb_pos"
                           ("x" "nx!1/P" "pn" "1+n!1"))
                          (("1" (assert)
                            (("1"
                              (lemma "expt_pos"
                               ("px"
                                "exp_neg_le1_lb(1 + n!1, nx!1 / P)"
                                "i"
                                "P"))
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (exp_neg_le1_lb_pos formula-decl nil exp_approx nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (expt_pos formula-decl nil exponentiation nil)
    (exp_neg_le1_lb const-decl "real" exp_approx nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil))
   shostak))
 (exp_neg_bounds 0
  (exp_neg_bounds-1 nil 3295363258
   ("" (skosimp)
    (("" (expand "exp_neg_lb")
      (("" (expand "exp_neg_ub")
        (("" (typepred "floor(nx!1)")
          (("" (typepred "nx!1")
            (("" (name-replace "F" "floor(nx!1)")
              (("" (name "P" "-F")
                (("" (replace -1)
                  ((""
                    (lemma "both_sides_div_pos_lt1"
                     ("pz" "P" "x" "nx!1" "y" "0"))
                    (("1"
                      (lemma "div_mult_pos_le2"
                       ("py" "P" "z" "nx!1" "x" "-1"))
                      (("1" (assert)
                        (("1" (lemma "exp_scal" ("i" "P" "x" "nx!1/P"))
                          (("1" (rewrite "div_cancel1" -1)
                            (("1" (replace -1)
                              (("1"
                                (lemma
                                 "exp_neg_le1_bounds"
                                 ("x" "nx!1/P" "n" "1+n!1"))
                                (("1"
                                  (lemma
                                   "exp_neg_le1_lb_pos"
                                   ("x" "nx!1/P" "pn" "1+n!1"))
                                  (("1"
                                    (typepred "exp(nx!1 / P)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "both_sides_expt_pos_lt"
                                           ("pm" "P"))
                                          (("1"
                                            (inst-cp
                                             -
                                             "exp_neg_le1_lb(1 + n!1, nx!1 / P)"
                                             "exp(nx!1 / P)")
                                            (("1"
                                              (inst
                                               -
                                               "exp(nx!1 / P)"
                                               "exp_neg_le1_ub(1 + n!1, nx!1 / P)")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_int_is_int application-judgement "int" integers nil)
    (exp_neg_lb const-decl "posreal" exp_approx nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (exp_scal formula-decl nil ln_exp nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (exp_neg_le1_lb_pos formula-decl nil exp_approx nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (exp_neg_le1_ub const-decl "real" exp_approx nil)
    (n!1 skolem-const-decl "nat" exp_approx nil)
    (nx!1 skolem-const-decl "negreal" exp_approx nil)
    (P skolem-const-decl "int" exp_approx nil)
    (exp_neg_le1_lb const-decl "real" exp_approx nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (exp_neg_le1_bounds formula-decl nil exp_approx nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp_neg_ub const-decl "posreal" exp_approx nil))
   shostak))
 (exp_ub_TCC1 0
  (exp_ub_TCC1-1 nil 3295528481
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (exp_ub_TCC2 0
  (exp_ub_TCC2-1 nil 3295622181
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (exp_bounds 0
  (exp_bounds-1 nil 3295623866
   ("" (skosimp)
    (("" (lemma "trichotomy" ("x" "x!1"))
      (("" (split -1)
        (("1" (expand "exp_lb")
          (("1" (expand "exp_ub")
            (("1" (assert)
              (("1" (lemma "exp_neg_bounds" ("n" "n!1" "nx" "-x!1"))
                (("1" (flatten)
                  (("1" (lemma "exp_diff" ("x" "0" "y" "x!1"))
                    (("1" (rewrite "exp_0")
                      (("1" (replace -1)
                        (("1" (rewrite "div_mult_pos_lt1")
                          (("1" (rewrite "div_mult_pos_lt2")
                            (("1" (rewrite "div_mult_pos_le1")
                              (("1"
                                (rewrite "div_mult_pos_le2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "exp_ub")
          (("2" (expand "exp_lb")
            (("2" (replace -1)
              (("2" (rewrite "exp_0") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (lemma "exp_neg_bounds" ("n" "n!1" "nx" "x!1"))
          (("1" (flatten)
            (("1" (expand "exp_lb")
              (("1" (expand "exp_ub") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (exp_lb const-decl "posreal" exp_approx nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp_0 formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_neg_ub const-decl "posreal" exp_approx nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (exp_neg_lb const-decl "posreal" exp_approx nil)
    (exp_diff formula-decl nil ln_exp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (exp_neg_bounds formula-decl nil exp_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp_ub const-decl "posreal" exp_approx nil))
   shostak))
 (e_bounds 0
  (e_bounds-1 nil 3295625003
   ("" (skosimp)
    (("" (expand "e")
      (("" (expand "e_lb")
        (("" (expand "e_ub") (("" (rewrite "exp_bounds") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((e const-decl "posreal" ln_exp nil)
    (e_ub const-decl "posreal" exp_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_bounds formula-decl nil exp_approx nil)
    (e_lb const-decl "posreal" exp_approx nil))
   shostak))
 (e_bounds2 0
  (e_bounds2-1 nil 3307355846
   (""
    (case "1000000000/2718281829 < 1/e & 1/e <1000000000/2718281828")
    (("1" (flatten)
      (("1" (assert)
        (("1" (rewrite "div_mult_pos_lt2" -1)
          (("1" (rewrite "div_mult_pos_lt1" -2)
            (("1" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "exp_diff" ("x" "0" "y" "1"))
        (("2" (rewrite "exp_0")
          (("2" (expand "e")
            (("2" (replace -1 1 rl)
              (("2" (hide -1)
                (("2" (lemma "exp_neg_le1_bounds" ("x" "-1" "n" "10"))
                  (("2" (assert)
                    (("2" (flatten)
                      (("2"
                        (case "1000000000 / 2718281829 < exp_neg_le1_lb(10, -1)")
                        (("1"
                          (case "exp_neg_le1_ub(10, -1) < 1000000000 / 2718281828")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exp_0 formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_neg_le1_bounds formula-decl nil exp_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp_neg_le1_ub const-decl "real" exp_approx nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (sigma def-decl "real" sigma "reals/")
    (exp_estimate const-decl "real" exp_series nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (exp_neg_le1_lb const-decl "real" exp_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (exp_diff formula-decl nil ln_exp nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e const-decl "posreal" ln_exp nil))
   nil))
 (e_bound 0
  (e_bound-1 nil 3307358139
   ("" (lemma "e_bounds2")
    (("" (expand "e_lb")
      (("" (expand "e_ub") (("" (flatten) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((e_lb const-decl "posreal" exp_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (e_ub const-decl "posreal" exp_approx nil)
    (e_bounds2 formula-decl nil exp_approx nil))
   shostak)))

