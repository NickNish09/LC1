(series
 (sum_TCC1 0
  (sum_TCC1-1 nil 3251267739 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (sum_TCC2 0
  (sum_TCC2-1 nil 3251267739 ("" (grind) nil nil) nil shostak))
 (sum_lemma1 0
  (sum_lemma1-1 nil 3251267463
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst - "x!1" "xs!1" "ys!1")
        (("2" (replace -2 -1)
          (("2" (expand "sum" 1)
            (("2" (inst -2 "1+j!1") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sum def-decl "real" series nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (geometric_series_TCC1 0
  (geometric_series_TCC1-1 nil 3251270455 ("" (grind) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak))
 (geometric_series_aux1_TCC1 0
  (geometric_series_aux1_TCC1-1 nil 3251270455 ("" (grind) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak))
 (geometric_series_aux1_TCC2 0
  (geometric_series_aux1_TCC2-1 nil 3251270455 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (geometric_series_aux1 0
  (geometric_series_aux1-1 nil 3251268509
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (inst - "x!1")
        (("2" (assert)
          (("2" (expand "sum" 1)
            (("2" (replace -1 1)
              (("2" (expand "geometric_series" 1)
                (("2" (case "x!1=0")
                  (("1" (replace -1)
                    (("1" (simplify 1) (("1" (grind) nil nil)) nil))
                    nil)
                   ("2"
                    (lemma "expt_plus"
                     ("n0x" "x!1" "i" "1" "j" "1+j!1"))
                    (("1" (rewrite "expt_x1")
                      (("1"
                        (lemma "minus_div2"
                         ("n0x" "1-x!1" "x" "1-x!1*x!1^(1+j!1)" "y"
                          "1-x!1^(1+j!1)"))
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_div2 formula-decl nil real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (geometric_series const-decl "[nat -> real]" series nil)
    (sum def-decl "real" series nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (geometric_series_aux_odd_TCC1 0
  (geometric_series_aux_odd_TCC1-1 nil 3251280973 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (geometric_series_aux_odd 0
  (geometric_series_aux_odd-1 nil 3251277814
   ("" (skosimp*)
    (("" (expand "odd?")
      (("" (skosimp*)
        (("" (replace -1 1)
          (("" (lemma "div_cancel2" ("x" "j!1" "n0z" "2"))
            (("" (replace -1)
              ((""
                (lemma "geometric_series_aux1"
                 ("x" "x!1" "n" "1+2*j!1"))
                (("1"
                  (lemma "geometric_series_aux1"
                   ("x" "x!1*x!1" "n" "j!1"))
                  (("1"
                    (lemma "div_cancel2"
                     ("x" "(1-(x!1*x!1)^(j!1+1))/(1-x!1)" "n0z"
                      "1+x!1"))
                    (("1" (rewrite "div_div2")
                      (("1" (lemma "trichotomy" ("x" "x!1"))
                        (("1" (split -1)
                          (("1"
                            (lemma "expt_times"
                             ("n0x" "x!1" "i" "2" "j" "j!1"))
                            (("1"
                              (lemma "expt_plus"
                               ("n0x" "x!1" "i" "1" "j" "1"))
                              (("1"
                                (rewrite "expt_x1")
                                (("1"
                                  (lemma
                                   "lt_times_lt_pos1"
                                   ("px"
                                    "x!1"
                                    "y"
                                    "1"
                                    "nnz"
                                    "x!1"
                                    "w"
                                    "1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "posreal_times_posreal_is_posreal"
                                       ("px" "x!1" "py" "x!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -7 1)
                                          (("1"
                                            (replace -8 1)
                                            (("1"
                                              (replace -6 1)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (lemma
                                                   "expt_times"
                                                   ("n0x"
                                                    "x!1"
                                                    "i"
                                                    "2"
                                                    "j"
                                                    "j!1+1"))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("3"
                            (lemma "negreal_times_negreal_is_posreal"
                             ("nx" "x!1" "ny" "x!1"))
                            (("1"
                              (lemma "lt_times_lt_neg1"
                               ("x"
                                "-1"
                                "ny"
                                "x!1"
                                "z"
                                "-1"
                                "npw"
                                "x!1"))
                              (("1"
                                (assert)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -4)
                                    (("1"
                                      (replace -6)
                                      (("1"
                                        (lemma
                                         "expt_times"
                                         ("n0x"
                                          "x!1"
                                          "i"
                                          "2"
                                          "j"
                                          "j!1+1"))
                                        (("1"
                                          (lemma
                                           "expt_plus"
                                           ("n0x"
                                            "x!1"
                                            "i"
                                            "1"
                                            "j"
                                            "1"))
                                          (("1"
                                            (rewrite "expt_x1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil) ("3" (assert) nil nil)
                     ("4" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (odd? const-decl "bool" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_div2 formula-decl nil real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (lt_times_lt_neg1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (trichotomy formula-decl nil real_axioms nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (geometric_series_aux1 formula-decl nil series nil)
    (div_cancel2 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak))
 (geometric_series_aux_even_TCC1 0
  (geometric_series_aux_even_TCC1-1 nil 3251280976
   ("" (expand "even?")
    (("" (skosimp*)
      (("" (lemma "div_cancel2" ("x" "j!1" "n0z" "2"))
        (("" (replace -5)
          (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   shostak))
 (geometric_series_aux_even_TCC2 0
  (geometric_series_aux_even_TCC2-1 nil 3251280976 ("" (grind) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (geometric_series_aux_even 0
  (geometric_series_aux_even-1 nil 3251279760
   ("" (expand "even?")
    (("" (skosimp*)
      (("" (expand "sum")
        (("" (assert)
          ((""
            (lemma "geometric_series_aux_odd" ("n" "n!1-1" "x" "x!1"))
            (("" (assert)
              ((""
                (lemma "even_plus_odd_is_odd" ("e1" "n!1" "o2" "-1"))
                (("" (replace -1 -2)
                  (("" (lemma "trich_lt" ("x" "n!1" "y" "2"))
                    (("" (split -1)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (geometric_series const-decl "[nat -> real]" series nil)
    (trich_lt formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (odd_int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (even_plus_odd_is_odd judgement-tcc nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (geometric_series_aux_odd formula-decl nil series nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum def-decl "real" series nil)
    (even? const-decl "bool" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   shostak))
 (geometric_series_approx_set_contains1 0
  (geometric_series_approx_set_contains1-1 nil 3251302669
   ("" (expand "member")
    (("" (expand "geometric_series_approx_set")
      (("" (skosimp*) (("" (inst + "0") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((geometric_series_approx_set const-decl "setof[real]" series nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sum def-decl "real" series nil)
    (geometric_series const-decl "[nat -> real]" series nil)
    (member const-decl "bool" sets nil))
   shostak))
 (geometric_series_approx_set_nonempty 0
  (geometric_series_approx_set_nonempty-1 nil 3251274539
   ("" (skosimp*)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (inst - "1")
          (("" (expand "member")
            (("" (expand "geometric_series_approx_set")
              (("" (inst + "0") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (geometric_series_approx_set const-decl "setof[real]" series nil)
    (geometric_series const-decl "[nat -> real]" series nil)
    (sum def-decl "real" series nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (geometric_series_approx_set_pos_upper_bound_TCC1 0
  (geometric_series_approx_set_pos_upper_bound_TCC1-1 nil 3251277227
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (geometric_series_approx_set_pos_upper_bound_TCC2 0
  (geometric_series_approx_set_pos_upper_bound_TCC2-1 nil 3251277227
   ("" (skosimp*)
    (("" (lemma "  geometric_series_approx_set_nonempty" ("x" "x!1"))
      (("" (propax) nil nil)) nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (geometric_series_approx_set_nonempty formula-decl nil series nil))
   shostak))
 (geometric_series_approx_set_pos_upper_bound 0
  (geometric_series_approx_set_pos_upper_bound-1 nil 3251276647
   ("" (skosimp*)
    (("" (expand "upper_bound?")
      (("" (skosimp*)
        (("" (typepred "s!1")
          (("" (expand "geometric_series_approx_set")
            (("" (skosimp*)
              ((""
                (lemma "geometric_series_aux1" ("x" "x!1" "n" "n!1"))
                (("" (assert)
                  (("" (expand "<=" -3)
                    (("" (split -3)
                      (("1" (lemma "expt_pos" ("px" "x!1" "i" "1+n!1"))
                        (("1"
                          (lemma "posreal_div_posreal_is_posreal"
                           ("px" "x!1^(1+n!1)" "py" "1-x!1"))
                          (("1" (replace -5 -4 rl)
                            (("1" (replace -4 1)
                              (("1"
                                (lemma
                                 "minus_div2"
                                 ("x"
                                  "1"
                                  "y"
                                  "x!1^(1+n!1)"
                                  "n0x"
                                  "1-x!1"))
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (expand "^")
                        (("2" (rewrite "expt")
                          (("2" (replace -1 (-2 -3 1) rl)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (geometric_series_approx_set const-decl "setof[real]" series nil)
    (setof type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_div2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt_pos formula-decl nil exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (<= const-decl "bool" reals nil)
    (geometric_series_aux1 formula-decl nil series nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (geometric_series_approx_set_pos_least_upper_bound 0
  (geometric_series_approx_set_pos_least_upper_bound-1 nil 3251281385
   ("" (skosimp*)
    (("" (expand "least_upper_bound?")
      ((""
        (lemma "geometric_series_approx_set_pos_upper_bound"
         ("x" "x!1"))
        (("" (assert)
          (("" (skosimp*)
            (("" (expand "upper_bound?" -4)
              ((""
                (lemma "geometric_series_approx_set_contains1"
                 ("x" "x!1"))
                (("" (inst-cp - "1")
                  (("1"
                    (lemma "posreal_times_posreal_is_posreal"
                     ("px" "y!1" "py" "1-x!1"))
                    (("1"
                      (lemma "trich_lt" ("x" "y!1" "y" "1/(1-x!1)"))
                      (("1" (split -1)
                        (("1"
                          (lemma "div_mult_pos_lt2"
                           ("x" "y!1" "z" "1" "py" "1-x!1"))
                          (("1" (expand "<=" -6)
                            (("1" (split -6)
                              (("1"
                                (lemma
                                 "exp_of_exists2"
                                 ("lt1x" "x!1" "lt1y" "1-y!1*(1-x!1)"))
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (lemma
                                     "both_sides_minus_lt2"
                                     ("z"
                                      "1"
                                      "y"
                                      "y!1*(1-x!1)"
                                      "x"
                                      "1-x!1^n!1"))
                                    (("1"
                                      (lemma
                                       "div_mult_pos_lt2"
                                       ("x"
                                        "y!1"
                                        "py"
                                        "1-x!1"
                                        "z"
                                        "1-x!1^n!1"))
                                      (("1"
                                        (lemma
                                         "trichotomy"
                                         ("x" "n!1"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (lemma
                                             "geometric_series_aux1"
                                             ("x" "x!1" "n" "n!1-1"))
                                            (("1"
                                              (inst
                                               -14
                                               "sum(geometric_series(x!1), n!1 - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name-replace
                                                   "A"
                                                   "sum(geometric_series(x!1), n!1 - 1)")
                                                  (("1"
                                                    (replace -1 -3 rl)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but
                                                   (-1 1 -2))
                                                  (("2"
                                                    (expand
                                                     "geometric_series_approx_set")
                                                    (("2"
                                                      (inst + "n!1-1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (rewrite "expt_x0")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "both_sides_minus_lt2"
                                   ("z" "1" "x" "1" "y" "y!1*(1-x!1)"))
                                  (("2"
                                    (lemma
                                     "both_sides_minus_lt2"
                                     ("z"
                                      "1"
                                      "y"
                                      "0"
                                      "x"
                                      "y!1*(1-x!1)"))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) (("2" (grind) nil nil)) nil)
                         ("3" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (expand "member") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (geometric_series_approx_set const-decl "setof[real]" series nil)
    (x!1 skolem-const-decl "real" series nil)
    (trich_lt formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (n!1 skolem-const-decl "nat" series nil)
    (sum def-decl "real" series nil)
    (geometric_series const-decl "[nat -> real]" series nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (geometric_series_aux1 formula-decl nil series nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (trichotomy formula-decl nil real_axioms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (both_sides_minus_lt2 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (exp_of_exists2 formula-decl nil prelude_aux nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (geometric_series_approx_set_contains1 formula-decl nil series nil)
    (geometric_series_approx_set_pos_upper_bound formula-decl nil
     series nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (geometric_series_pos_limit_TCC1 0
  (geometric_series_pos_limit_TCC1-1 nil 3251277227
   ("" (expand "bounded_above?")
    (("" (skosimp*)
      (("" (lemma "geometric_series_approx_set_nonempty" ("x" "x!1"))
        (("" (replace -1 1)
          ((""
            (lemma "geometric_series_approx_set_pos_upper_bound"
             ("x" "x!1"))
            (("" (assert) (("" (inst + "1/(1-x!1)") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (geometric_series_approx_set_pos_upper_bound formula-decl nil
     series nil)
    (geometric_series_approx_set_nonempty formula-decl nil series nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil))
   shostak))
 (geometric_series_pos_limit 0
  (geometric_series_pos_limit-1 nil 3251273425
   ("" (skosimp*)
    ((""
      (lemma "geometric_series_approx_set_pos_least_upper_bound"
       ("x" "x!1"))
      ((""
        (lemma "lub_lem"
         ("SA" "geometric_series_approx_set(x!1)" "x" "1/(1-x!1)"))
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3"
          (lemma "geometric_series_approx_set_nonempty" ("x" "x!1"))
          (("3"
            (lemma "geometric_series_approx_set_pos_upper_bound"
             ("x" "x!1"))
            (("3" (expand "bounded_above?")
              (("3" (assert) (("3" (inst + "1/(1-x!1)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (geometric_series_approx_set_pos_least_upper_bound formula-decl nil
     series nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (lub_lem formula-decl nil bounded_real_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (setof type-eq-decl nil defined_types nil)
    (geometric_series_approx_set const-decl "setof[real]" series nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak)))

