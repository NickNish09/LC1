(interval_trig
 (cos_error_pi_lbn_bound 0
  (cos_error_pi_lbn_bound-1 nil 3554219250
   ("" (expand "cos_term")
    (("" (case "FORALL (kk:nat): even?(kk) IMPLIES (-1)^kk = 1")
      (("1" (skeep)
        (("1" (inst-cp - "2+2*n")
          (("1" (hide -1)
            (("1" (split -)
              (("1" (replaces -1)
                (("1" (assert)
                  (("1" (expand "abs")
                    (("1" (case "pi_lbn(n)^(4+4*n) < 3.2^(4+4*n)")
                      (("1" (mult-by -1 "1/factorial(4+4*n)")
                        (("1" (assert) nil nil)) nil)
                       ("2" (hide 2)
                        (("2" (lemma "both_sides_expt_pos_lt_aux")
                          (("2" (inst - "3+4*n" "pi_lbn(n)" "3.2")
                            (("2" (assert)
                              (("2"
                                (expand "^")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "pi_bounds")
                                      (("2"
                                        (inst-cp - "n")
                                        (("2"
                                          (inst - "3")
                                          (("2"
                                            (eval-expr "pi_ubn(3)")
                                            (("2"
                                              (assert)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "even?")
                  (("2" (inst + "1+n") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (expand "even?")
            (("2" (skosimp*)
              (("2" (replace -1)
                (("2" (lemma "expt_times")
                  (("2" (inst?)
                    (("2" (case "(-1)^2 = 1")
                      (("1" (replaces -1)
                        (("1" (replaces -1)
                          (("1" (case "FORALL (jjj:nat): 1^jjj = 1")
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (induct "jjj")
                              (("1"
                                (hide-all-but 1)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (expand "expt" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even? const-decl "bool" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (pi_ubn const-decl "real" atan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (expt_times formula-decl nil exponentiation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (j!1 skolem-const-decl "int" interval_trig nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (cos_term const-decl "real" trig_approx "trig_fnd/")
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (Pi_TCC1 0
  (Pi_TCC1-1 nil 3318076124
   ("" (skeep)
    (("" (expand "Pos?")
      (("" (expand "Gt")
        (("" (expand "[||]")
          (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Pos? const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Gt const-decl "bool" interval nil))
   nil))
 (Cos_fundamental 0
  (Cos_fundamental-3 nil 3554808246
   ("" (skeep)
    (("" (expand "<<")
      (("" (flatten)
        (("" (split)
          (("1" (expand "Cos")
            (("1" (lift-if)
              (("1" (lift-if)
                (("1" (lift-if)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (expand "cos_0_pi")
                              (("1"
                                (expand "[||]")
                                (("1"
                                  (lemma "cos_lb_nn_strict_decreasing")
                                  (("1"
                                    (inst - "n")
                                    (("1"
                                      (expand "strict_decreasing?")
                                      (("1"
                                        (inst - "ub(X)" "ub(Y)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "Proper?(Y)")
                                          (("1"
                                            (hide-all-but (-1 -3 1))
                                            (("1"
                                              (expand "Proper?")
                                              (("1"
                                                (lemma "pi_bounds")
                                                (("1"
                                                  (inst - "n")
                                                  (("1"
                                                    (lemma
                                                     "pi_lb_est_le")
                                                    (("1"
                                                      (inst - "n")
                                                      (("1"
                                                        (expand "<<")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "Proper?")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide-all-but (-1 -3 1))
                                          (("3"
                                            (lemma "pi_lb_est_le")
                                            (("3"
                                              (inst - "n")
                                              (("3"
                                                (expand "Proper?")
                                                (("3"
                                                  (expand "<<")
                                                  (("3"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "NOT X = [|0,0|]")
                              (("1"
                                (hide 2)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand "Proper?")
                                    (("1"
                                      (expand "[||]")
                                      (("1"
                                        (expand "<<")
                                        (("1"
                                          (decompose-equality +)
                                          (("1"
                                            (grind
                                             :exclude
                                             "pi_lb_est")
                                            nil
                                            nil)
                                           ("2"
                                            (grind
                                             :exclude
                                             "pi_lb_est")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (hide-all-but 2)
                                  (("2"
                                    (grind :exclude "pi_lb_est")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide (-3 1 2))
                              (("3"
                                (grind :exclude "pi_lb_est")
                                nil
                                nil))
                              nil)
                             ("4" (hide-all-but (- 4))
                              (("4"
                                (grind :exclude "pi_lb_est")
                                nil
                                nil))
                              nil)
                             ("5" (case "NOT X = [|0,0|]")
                              (("1"
                                (hide-all-but (- 1))
                                (("1"
                                  (decompose-equality +)
                                  (("1"
                                    (grind :exclude "pi_lbn")
                                    nil
                                    nil)
                                   ("2"
                                    (grind :exclude "pi_lbn")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (expand "Neg")
                                  (("2"
                                    (expand "[||]" 1)
                                    (("2"
                                      (expand "cos_0_pi" 1 1)
                                      (("2"
                                        (expand "[||]" 1)
                                        (("2"
                                          (expand "cos_0_pi")
                                          (("2"
                                            (expand "[||]" 1)
                                            (("2"
                                              (expand "cos_lb" + 2)
                                              (("2"
                                                (lemma "cos_approx_a0")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "cos_bounds")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (expand "Neg")
                              (("6"
                                (expand "cos_0_pi")
                                (("6"
                                  (expand "[||]")
                                  (("6"
                                    (rewrite "cos_lb_neg")
                                    (("6"
                                      (rewrite "cos_lb_neg")
                                      (("6"
                                        (lemma
                                         "cos_lb_np_strict_increasing")
                                        (("6"
                                          (inst - "n")
                                          (("6"
                                            (expand
                                             "strict_increasing?")
                                            (("6"
                                              (inst - "lb(Y)" "lb(X)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand "<<")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (assert)
                                                (("3"
                                                  (lemma
                                                   "pi_lb_est_le")
                                                  (("3"
                                                    (inst - "n")
                                                    (("3"
                                                      (lemma
                                                       "pi_bounds")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (expand "<<")
                                                          (("3"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (hide-all-but (- 2))
                              (("7" (grind :exclude "pi_lbn") nil nil))
                              nil)
                             ("8" (hide-all-but (- 3))
                              (("8" (grind :exclude "pi_lbn") nil nil))
                              nil)
                             ("9" (expand "cos_0_pi")
                              (("9"
                                (expand "cos_npi2_pi2")
                                (("9"
                                  (expand "[||]" 1)
                                  (("9"
                                    (lemma
                                     "cos_lb_nn_strict_decreasing")
                                    (("9"
                                      (inst - "n")
                                      (("9"
                                        (expand "strict_decreasing?")
                                        (("9"
                                          (inst - "ub(X)" "ub(Y)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "<<")
                                            (("2"
                                              (expand "[||]")
                                              (("2"
                                                (lemma "pi_bounds")
                                                (("2"
                                                  (inst - "n")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "[||]")
                                            (("3"
                                              (expand "<<")
                                              (("3"
                                                (lemma "pi_bounds")
                                                (("3"
                                                  (inst - "n")
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (lemma
                                                       "pi_lb_est_le")
                                                      (("3"
                                                        (inst - "n")
                                                        (("3"
                                                          (ground)
                                                          (("3"
                                                            (expand
                                                             "Proper?")
                                                            (("3"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("10" (expand "Neg")
                              (("10"
                                (expand "cos_0_pi")
                                (("10"
                                  (expand "cos_npi2_pi2")
                                  (("10"
                                    (expand "[||]")
                                    (("10"
                                      (rewrite "cos_lb_neg")
                                      (("10"
                                        (lemma
                                         "cos_lb_np_strict_increasing")
                                        (("10"
                                          (inst - "n")
                                          (("10"
                                            (expand
                                             "strict_increasing?")
                                            (("10"
                                              (inst - "lb(Y)" "lb(X)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "<<")
                                                (("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst - "n")
                                                    (("2"
                                                      (expand
                                                       "Proper?")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "<<")
                                                (("3"
                                                  (expand "Proper?")
                                                  (("3"
                                                    (lemma "pi_bounds")
                                                    (("3"
                                                      (inst - "n")
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("11" (expand "cos_npi2_pi2")
                              (("11"
                                (expand "[||]")
                                (("11"
                                  (expand "<<")
                                  (("11"
                                    (flatten)
                                    (("11"
                                      (expand "Proper?")
                                      (("11"
                                        (case "ub(X) <= 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "cos_lb_np_strict_increasing")
                                            (("2"
                                              (inst - "n")
                                              (("2"
                                                (expand
                                                 "strict_increasing?")
                                                (("2"
                                                  (inst
                                                   -
                                                   "lb(Y)"
                                                   "lb(X)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "cos_lb_nn_strict_decreasing")
                                                      (("2"
                                                        (inst - "n")
                                                        (("2"
                                                          (expand
                                                           "strict_decreasing?")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "ub(X)"
                                                             "ub(Y)")
                                                            (("2"
                                                              (split -)
                                                              (("1"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (expand
                                                                   "min")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "lb(Y) = lb(X)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "min")
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "ub(X) = ub(Y)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("12" (hide-all-but (- 1))
                              (("12"
                                (grind :exclude "pi_lb_est")
                                nil
                                nil))
                              nil)
                             ("13" (expand "cos_0_pi")
                              (("13"
                                (expand "[||]" 1)
                                (("13"
                                  (lemma "cos_lb_nn_strict_decreasing")
                                  (("13"
                                    (inst - "n")
                                    (("13"
                                      (expand "strict_decreasing?")
                                      (("13"
                                        (inst - "ub(X)" "pi_lbn(n)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "NOT cos_lb(pi_lbn(n), n) <=cos_lb(ub(X), n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "pi_lb_est_le")
                                                (("1"
                                                  (inst - "n")
                                                  (("1"
                                                    (expand "<<")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -2)
                                              (("2"
                                                (expand "cos_lb")
                                                (("2"
                                                  (lemma
                                                   "cos_approx_cos")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "pi_lbn(n)"
                                                     "1+2*n")
                                                    (("2"
                                                      (lemma
                                                       "cos_error_pi_lbn_bound")
                                                      (("2"
                                                        (inst - "n")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "pi_bounds")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide-all-but (-1 1 -2))
                                          (("3"
                                            (expand "Proper?")
                                            (("3"
                                              (lemma "pi_bounds")
                                              (("3"
                                                (inst - "n")
                                                (("3"
                                                  (lemma
                                                   "pi_lb_est_le")
                                                  (("3"
                                                    (inst - "n")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (expand "<<")
                                                        (("3"
                                                          (expand
                                                           "[||]")
                                                          (("3"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("14" (expand "Neg")
                              (("14"
                                (expand "cos_0_pi")
                                (("14"
                                  (expand "[||]" 1)
                                  (("14"
                                    (expand "cos_lb")
                                    (("14"
                                      (lemma "cos_error_pi_lbn_bound")
                                      (("14"
                                        (inst - "n")
                                        (("14"
                                          (lemma
                                           "cos_lb_nn_strict_decreasing")
                                          (("14"
                                            (inst - "n")
                                            (("14"
                                              (expand
                                               "strict_decreasing?")
                                              (("14"
                                                (inst
                                                 -
                                                 "-lb(X)"
                                                 "pi_lbn(n)")
                                                (("1"
                                                  (case
                                                   "cos_lb(pi_lbn(n), n) <= cos_lb(-lb(X), n)")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (expand "cos_lb")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "cos_approx_cos")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "pi_lbn(n)"
                                                             "1+2*n")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "<<" -2)
                                                      (("2"
                                                        (expand
                                                         "[||]"
                                                         -)
                                                        (("2"
                                                          (lemma
                                                           "pi_lb_est_le")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "n")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "<<" -)
                                                  (("3"
                                                    (expand "[||]" -)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "Proper?")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("15" (expand "cos_npi2_pi2")
                              (("15"
                                (expand "[||]" 1)
                                (("15"
                                  (case
                                   "FORALL (xr:real): -pi_lbn(n)/2 <= xr AND xr <= pi_lbn(n)/2 IMPLIES -1 - (3.2 ^ (4 + 4 * n) / factorial(4 + 4 * n)) <= cos_lb(xr,n)")
                                  (("1"
                                    (inst-cp - "lb(X)")
                                    (("1"
                                      (inst - "ub(X)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "Proper?")
                                          (("1"
                                            (expand "<<" -3)
                                            (("1"
                                              (lemma "pi_lb_est_le")
                                              (("1"
                                                (inst - "n")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "[||]" -)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "min")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (case "xr <= 0")
                                        (("1"
                                          (lemma
                                           "cos_lb_np_strict_increasing")
                                          (("1"
                                            (inst - "n")
                                            (("1"
                                              (expand
                                               "strict_increasing?")
                                              (("1"
                                                (inst
                                                 -
                                                 "-pi_lbn(n)"
                                                 "xr")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "cos_approx_cos")
                                                    (("1"
                                                      (expand "cos_lb")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "pi_lbn(n)"
                                                         "1+2*n")
                                                        (("1"
                                                          (lemma
                                                           "cos_error_pi_lbn_bound")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "cos_approx_neg")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "pi_bounds")
                                                    (("2"
                                                      (inst - "n")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma "pi_bounds")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "cos_lb_nn_strict_decreasing")
                                          (("2"
                                            (inst - "n")
                                            (("2"
                                              (expand
                                               "strict_decreasing?")
                                              (("2"
                                                (inst
                                                 -
                                                 "xr"
                                                 "pi_lbn(n)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "cos_lb")
                                                    (("1"
                                                      (lemma
                                                       "cos_approx_cos")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "pi_lbn(n)"
                                                         "1+2*n")
                                                        (("1"
                                                          (lemma
                                                           "cos_error_pi_lbn_bound")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (lemma "pi_bounds")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "Cos")
            (("2" (assert)
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (case "n = 0")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "[||]")
                                  (("1"
                                    (expand "<<")
                                    (("1"
                                      (expand "cos_0_pi")
                                      (("1"
                                        (expand "cos_npi2_pi2")
                                        (("1"
                                          (expand "[||]")
                                          (("1"
                                            (expand "Proper?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "cos_ub")
                                                (("1"
                                                  (expand "cos_approx")
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "sigma")
                                                      (("1"
                                                        (expand
                                                         "cos_term")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "NOT n>=1")
                              (("1"
                                (hide 3)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 1)
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "cos_0_pi")
                                    (("1"
                                      (expand "[||]")
                                      (("1"
                                        (lemma
                                         "cos_ub_nn_strict_decreasing")
                                        (("1"
                                          (inst - "n")
                                          (("1"
                                            (expand
                                             "strict_decreasing?")
                                            (("1"
                                              (inst - "lb(Y)" "lb(X)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "Proper?")
                                                (("2"
                                                  (expand "<<")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (case "Proper?(Y)")
                                                (("1"
                                                  (expand "<<")
                                                  (("1"
                                                    (expand "Proper?")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (2 3))
                                                  (("2"
                                                    (grind
                                                     :exclude
                                                     "pi_lb_est")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "NOT X = [|0,0|]")
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (decompose-equality +)
                                          (("1"
                                            (grind
                                             :exclude
                                             "pi_lb_est")
                                            nil
                                            nil)
                                           ("2"
                                            (grind
                                             :exclude
                                             "pi_lb_est")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "[||]")
                                          (("2"
                                            (expand "cos_0_pi")
                                            (("2"
                                              (expand "[||]")
                                              (("2"
                                                (expand "<<" -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "Neg")
                                                      (("2"
                                                        (expand "[||]")
                                                        (("2"
                                                          (lemma
                                                           "cos_ub_nn_strict_decreasing")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "n")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "cos_npi2_pi2")
                                    (("3"
                                      (expand "cos_0_pi")
                                      (("3"
                                        (expand "[||]")
                                        (("3"
                                          (lemma
                                           "cos_ub_nn_strict_decreasing")
                                          (("3"
                                            (inst - "n")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand
                                                 "strict_decreasing?")
                                                (("3"
                                                  (inst - "0" "lb(X)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "cos_ub_a0")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "<<")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "lb(X) = 0")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "cos_ub_a0")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "<<")
                                                    (("2"
                                                      (expand
                                                       "Proper?")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide (1 3 4))
                                    (("4"
                                      (expand "cos_0_pi")
                                      (("4"
                                        (expand "[||]")
                                        (("4"
                                          (expand "<<")
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (lemma
                                               "cos_ub_nn_strict_decreasing")
                                              (("4"
                                                (inst - "n")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (expand
                                                     "strict_decreasing?")
                                                    (("4"
                                                      (inst
                                                       -
                                                       "0"
                                                       "lb(X)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "lb(X) = 0")
                                                          (("1"
                                                            (lemma
                                                             "cos_ub_a0")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "cos_ub_a0")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "Proper?")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (case "NOT X = [|0,0|]")
                                    (("1"
                                      (hide-all-but (- 1))
                                      (("1"
                                        (decompose-equality +)
                                        (("1"
                                          (grind :exclude "pi_lb_est")
                                          nil
                                          nil)
                                         ("2"
                                          (grind :exclude "pi_lb_est")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (expand "[||]")
                                        (("2"
                                          (expand "<<")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (expand "Neg")
                                    (("6"
                                      (expand "cos_0_pi")
                                      (("6"
                                        (expand "[||]")
                                        (("6"
                                          (rewrite "cos_ub_neg")
                                          (("6"
                                            (rewrite "cos_ub_neg")
                                            (("6"
                                              (lemma
                                               "cos_ub_np_strict_increasing")
                                              (("6"
                                                (inst - "n")
                                                (("6"
                                                  (assert)
                                                  (("6"
                                                    (expand
                                                     "strict_increasing?")
                                                    (("6"
                                                      (inst
                                                       -
                                                       "ub(X)"
                                                       "ub(Y)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand "<<")
                                                        (("2"
                                                          (expand
                                                           "Proper?")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "<<")
                                                        (("3"
                                                          (expand
                                                           "Proper?")
                                                          (("3"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("7"
                                    (expand "Neg")
                                    (("7"
                                      (expand "[||]")
                                      (("7"
                                        (expand "<<")
                                        (("7"
                                          (flatten)
                                          (("7"
                                            (expand "cos_npi2_pi2")
                                            (("7"
                                              (expand "cos_0_pi")
                                              (("7"
                                                (expand "[||]")
                                                (("7"
                                                  (lemma
                                                   "cos_ub_nn_strict_decreasing")
                                                  (("7"
                                                    (inst - "n")
                                                    (("7"
                                                      (assert)
                                                      (("7"
                                                        (expand
                                                         "strict_decreasing?")
                                                        (("7"
                                                          (inst
                                                           -
                                                           "0"
                                                           "-ub(X)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "ub(X) = 0")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "cos_ub_a0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "cos_ub_a0")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "Proper?")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("8"
                                    (hide (1 3 4 5))
                                    (("8"
                                      (expand "<<")
                                      (("8"
                                        (expand "[||]")
                                        (("8"
                                          (flatten)
                                          (("8"
                                            (expand "Neg")
                                            (("8"
                                              (expand "[||]")
                                              (("8"
                                                (expand "cos_0_pi")
                                                (("8"
                                                  (expand "[||]")
                                                  (("8"
                                                    (lemma
                                                     "cos_ub_nn_strict_decreasing")
                                                    (("8"
                                                      (expand
                                                       "Proper?")
                                                      (("8"
                                                        (inst - "n")
                                                        (("8"
                                                          (assert)
                                                          (("8"
                                                            (expand
                                                             "strict_decreasing?")
                                                            (("8"
                                                              (inst
                                                               -
                                                               "0"
                                                               "-ub(X)")
                                                              (("8"
                                                                (lemma
                                                                 "cos_ub_a0")
                                                                (("8"
                                                                  (inst?)
                                                                  (("8"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("9"
                                    (hide (-2 1 2))
                                    (("9"
                                      (grind :exclude "pi_lb_est")
                                      nil
                                      nil))
                                    nil)
                                   ("10"
                                    (hide (-2 1 2 4))
                                    (("10"
                                      (grind :exclude "pi_lb_est")
                                      nil
                                      nil))
                                    nil)
                                   ("11"
                                    (hide (2 3 4 5))
                                    (("11"
                                      (expand "cos_npi2_pi2")
                                      (("11"
                                        (expand "[||]")
                                        (("11" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("12"
                                    (hide (1 3 4 5 6))
                                    (("12"
                                      (expand "[||]")
                                      (("12"
                                        (expand "<<")
                                        (("12"
                                          (flatten)
                                          (("12"
                                            (expand "cos_npi2_pi2")
                                            (("12"
                                              (expand "[||]")
                                              (("12" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("13"
                                    (hide 1)
                                    (("13"
                                      (grind :exclude "pi_lb_est")
                                      nil
                                      nil))
                                    nil)
                                   ("14"
                                    (hide 1)
                                    (("14"
                                      (hide (1 2 4))
                                      (("14"
                                        (grind :exclude "pi_lb_est")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("15"
                                    (hide (1 2 3 5 6))
                                    (("15"
                                      (grind :exclude "pi_lb_est")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< const-decl "bool" interval nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_approx_neg formula-decl nil trig_approx "trig_fnd/")
    (xr skolem-const-decl "real" interval_trig nil)
    (cos_approx_cos formula-decl nil trig_approx "trig_fnd/")
    (cos_error_pi_lbn_bound formula-decl nil interval_trig nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "nat" interval_trig nil)
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_npi2_pi2 const-decl "Interval" interval_trig nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (npreal type-eq-decl nil real_types nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (cos_lb_np_strict_increasing formula-decl nil trig_approx
     "trig_fnd/")
    (cos_lb_neg formula-decl nil trig_approx "trig_fnd/")
    (ub_interval formula-decl nil interval nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx
     "trig_fnd/")
    (Neg const-decl "Interval" interval nil)
    (cos_lb const-decl "real" trig_approx "trig_fnd/")
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos_bounds formula-decl nil trig_approx "trig_fnd/")
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos_approx_a0 formula-decl nil trig_approx "trig_fnd/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos_0_pi const-decl "Interval" interval_trig nil)
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (Proper? const-decl "bool" interval nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_lb_est_le formula-decl nil trig_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (Y skolem-const-decl "Interval" interval_trig nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (X skolem-const-decl "Interval" interval_trig nil)
    (Interval type-eq-decl nil interval nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    ([\|\|] const-decl "Interval" interval nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Cos const-decl "Interval" interval_trig nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (cos_ub_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (cos_ub_a0 formula-decl nil trig_approx "trig_fnd/")
    (cos_ub_neg formula-decl nil trig_approx "trig_fnd/")
    (cos_ub_np_strict_increasing formula-decl nil trig_approx
     "trig_fnd/")
    (cos_approx const-decl "real" trig_approx "trig_fnd/")
    (cos_term const-decl "real" trig_approx "trig_fnd/")
    (sigma def-decl "real" sigma "reals/")
    (cos_ub const-decl "real" trig_approx "trig_fnd/"))
   nil)
  (Cos_fundamental-2 nil 3554808171
   ("" (skeep)
    (("" (expand "<<")
      (("" (flatten)
        (("" (split)
          (("1" (expand "Cos2")
            (("1" (lift-if)
              (("1" (lift-if)
                (("1" (lift-if)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (expand "cos_0_pi")
                              (("1"
                                (expand "[||]")
                                (("1"
                                  (lemma "cos_lb_nn_strict_decreasing")
                                  (("1"
                                    (inst - "n")
                                    (("1"
                                      (expand "strict_decreasing?")
                                      (("1"
                                        (inst - "ub(X)" "ub(Y)")
                                        (("1" (assert) nil)
                                         ("2"
                                          (case "Proper?(Y)")
                                          (("1"
                                            (hide-all-but (-1 -3 1))
                                            (("1"
                                              (expand "Proper?")
                                              (("1"
                                                (lemma "pi_bounds")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (expand "<<")
                                                    (("1"
                                                      (ground)
                                                      nil)))))))))))
                                           ("2"
                                            (expand "Proper?")
                                            (("2" (ground) nil)))))
                                         ("3"
                                          (hide-all-but (-1 -3 1))
                                          (("3"
                                            (lemma "pi_bounds")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (expand "Proper?")
                                                (("3"
                                                  (expand "<<")
                                                  (("3"
                                                    (ground)
                                                    nil)))))))))))))))))))))))
                             ("2" (case "NOT X = [|0,0|]")
                              (("1"
                                (hide 2)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand "Proper?")
                                    (("1"
                                      (expand "[||]")
                                      (("1"
                                        (expand "<<")
                                        (("1"
                                          (decompose-equality +)
                                          (("1"
                                            (grind :exclude "pi_lbn")
                                            nil)
                                           ("2"
                                            (grind :exclude "pi_lbn")
                                            nil)))))))))))))
                               ("2"
                                (replace -1)
                                (("2"
                                  (hide-all-but 2)
                                  (("2"
                                    (grind :exclude "pi_lbn")
                                    nil)))))))
                             ("3" (hide (-3 1 2))
                              (("3" (grind :exclude "pi_lbn") nil)))
                             ("4" (hide-all-but (- 4))
                              (("4" (grind :exclude "pi_lbn") nil)))
                             ("5" (case "NOT X = [|0,0|]")
                              (("1"
                                (hide-all-but (- 1))
                                (("1"
                                  (decompose-equality +)
                                  (("1" (grind) nil)
                                   ("2"
                                    (grind :exclude "pi_lbn")
                                    nil)))))
                               ("2"
                                (expand "Neg")
                                (("2"
                                  (expand "[||]" 1)
                                  (("2"
                                    (expand "cos_0_pi" 1 1)
                                    (("2"
                                      (expand "[||]" 1)
                                      (("2"
                                        (expand "cos_0_pi")
                                        (("2"
                                          (expand "[||]" 1)
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (expand "[||]" 1)
                                              (("2"
                                                (expand "cos_lb" + 2)
                                                (("2"
                                                  (lemma
                                                   "cos_approx_a0")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "cos_bounds")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (ground)
                                                                nil)))))))))))))))))))))))))))))))))))
                             ("6" (expand "Neg")
                              (("6"
                                (expand "cos_0_pi")
                                (("6"
                                  (expand "[||]")
                                  (("6"
                                    (rewrite "cos_lb_neg")
                                    (("6"
                                      (rewrite "cos_lb_neg")
                                      (("6"
                                        (lemma
                                         "cos_lb_np_strict_increasing")
                                        (("6"
                                          (inst - "n")
                                          (("6"
                                            (expand
                                             "strict_increasing?")
                                            (("6"
                                              (inst - "lb(Y)" "lb(X)")
                                              (("1" (assert) nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand "<<")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "pi_bounds")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (ground)
                                                              nil)))))))))))))))
                                               ("3"
                                                (lemma "pi_bounds")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (expand "<<")
                                                    (("3"
                                                      (ground)
                                                      nil)))))))))))))))))))))))))
                             ("7" (hide-all-but (- 2))
                              (("7" (grind :exclude "pi_lbn") nil)))
                             ("8" (hide-all-but (- 3))
                              (("8" (grind :exclude "pi_lbn") nil)))
                             ("9" (expand "cos_0_pi")
                              (("9"
                                (expand "cos_npi2_pi2")
                                (("9"
                                  (expand "[||]" 1)
                                  (("9"
                                    (lemma
                                     "cos_lb_nn_strict_decreasing")
                                    (("9"
                                      (inst - "n")
                                      (("9"
                                        (expand "strict_decreasing?")
                                        (("9"
                                          (inst - "ub(X)" "ub(Y)")
                                          (("1" (assert) nil)
                                           ("2"
                                            (expand "<<")
                                            (("2"
                                              (expand "[||]")
                                              (("2"
                                                (lemma "pi_bounds")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (ground)
                                                    nil)))))))))
                                           ("3"
                                            (expand "[||]")
                                            (("3"
                                              (expand "<<")
                                              (("3"
                                                (lemma "pi_bounds")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (expand "Proper?")
                                                    (("3"
                                                      (ground)
                                                      nil)))))))))))))))))))))))))
                             ("10" (expand "Neg")
                              (("10"
                                (expand "cos_0_pi")
                                (("10"
                                  (expand "cos_npi2_pi2")
                                  (("10"
                                    (expand "[||]")
                                    (("10"
                                      (rewrite "cos_lb_neg")
                                      (("10"
                                        (lemma
                                         "cos_lb_np_strict_increasing")
                                        (("10"
                                          (inst - "n")
                                          (("10"
                                            (expand
                                             "strict_increasing?")
                                            (("10"
                                              (inst - "lb(Y)" "lb(X)")
                                              (("1" (assert) nil)
                                               ("2"
                                                (expand "<<")
                                                (("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand
                                                       "Proper?")
                                                      (("2"
                                                        (ground)
                                                        nil)))))))))
                                               ("3"
                                                (expand "<<")
                                                (("3"
                                                  (expand "Proper?")
                                                  (("3"
                                                    (lemma "pi_bounds")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (ground)
                                                        nil)))))))))))))))))))))))))))
                             ("11" (expand "cos_npi2_pi2")
                              (("11"
                                (expand "[||]")
                                (("11"
                                  (expand "<<")
                                  (("11"
                                    (flatten)
                                    (("11"
                                      (expand "Proper?")
                                      (("11"
                                        (case "ub(X) <= 0")
                                        (("1" (assert) nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "cos_lb_np_strict_increasing")
                                            (("2"
                                              (inst - "n")
                                              (("2"
                                                (expand
                                                 "strict_increasing?")
                                                (("2"
                                                  (inst
                                                   -
                                                   "lb(Y)"
                                                   "lb(X)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "cos_lb_nn_strict_decreasing")
                                                      (("1"
                                                        (inst - "n")
                                                        (("1"
                                                          (expand
                                                           "strict_decreasing?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "ub(X)"
                                                             "ub(Y)")
                                                            (("1"
                                                              (split -)
                                                              (("1"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (expand
                                                                   "min")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))))))
                                                                 ("2"
                                                                  (case
                                                                   "lb(Y) = lb(X)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "min")
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                nil)))))))))))))
                                                                   ("2"
                                                                    (assert)
                                                                    nil)))))
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "ub(X) = ub(Y)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (assert)
                                                                    nil)))))))
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "pi_bounds")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (ground)
                                                                    nil)))))))
                                                             ("3"
                                                              (lemma
                                                               "pi_bounds")
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (ground)
                                                                  nil)))))))))))))))
                                                   ("2"
                                                    (lemma "pi_bounds")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil)))))
                                                   ("3"
                                                    (lemma "pi_bounds")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (ground)
                                                        nil)))))))))))))))))))))))))))
                             ("12" (hide-all-but (- 1))
                              (("12" (grind :exclude "pi_lbn") nil)))
                             ("13" (expand "cos_0_pi")
                              (("13"
                                (expand "[||]" 1)
                                (("13"
                                  (lemma "cos_lb_nn_strict_decreasing")
                                  (("13"
                                    (inst - "n")
                                    (("13"
                                      (expand "strict_decreasing?")
                                      (("13"
                                        (inst - "ub(X)" "pi_lbn(n)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "NOT cos_lb(pi_lbn(n), n) <=cos_lb(ub(X), n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "<<" -1)
                                                (("1"
                                                  (expand "[||]" -1)
                                                  (("1"
                                                    (propax)
                                                    nil)))))))
                                             ("2"
                                              (hide -2)
                                              (("2"
                                                (expand "cos_lb")
                                                (("2"
                                                  (lemma
                                                   "cos_approx_cos")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "pi_lbn(n)"
                                                     "1+2*n")
                                                    (("2"
                                                      (lemma
                                                       "cos_error_pi_lbn_bound")
                                                      (("2"
                                                        (inst - "n")
                                                        (("2"
                                                          (assert)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (lemma "pi_bounds")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil)))))
                                         ("3"
                                          (hide-all-but (-1 1 -2))
                                          (("3"
                                            (expand "Proper?")
                                            (("3"
                                              (lemma "pi_bounds")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (expand "<<")
                                                    (("3"
                                                      (expand "[||]")
                                                      (("3"
                                                        (ground)
                                                        nil)))))))))))))))))))))))))))
                             ("14" (expand "Neg")
                              (("14"
                                (expand "cos_0_pi")
                                (("14"
                                  (expand "[||]" 1)
                                  (("14"
                                    (expand "cos_lb")
                                    (("14"
                                      (lemma "cos_error_pi_lbn_bound")
                                      (("14"
                                        (inst - "n")
                                        (("14"
                                          (lemma
                                           "cos_lb_nn_strict_decreasing")
                                          (("14"
                                            (inst?)
                                            (("14"
                                              (expand
                                               "strict_decreasing?")
                                              (("14"
                                                (inst
                                                 -
                                                 "-lb(X)"
                                                 "pi_lbn(n)")
                                                (("1"
                                                  (case
                                                   "cos_lb(pi_lbn(n), n) <= cos_lb(-lb(X), n)")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (expand "cos_lb")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "cos_approx_cos")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "pi_lbn(n)"
                                                             "1+2*n")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))))
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "<<" -2)
                                                      (("2"
                                                        (expand
                                                         "[||]"
                                                         -)
                                                        (("2"
                                                          (propax)
                                                          nil)))))))))
                                                 ("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil)))))
                                                 ("3"
                                                  (expand "<<" -)
                                                  (("3"
                                                    (expand "[||]" -)
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "Proper?")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (lemma
                                                               "pi_bounds")
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (ground)
                                                                  nil)))))))))))))))))))))))))))))))))))))
                             ("15" (expand "cos_npi2_pi2")
                              (("15"
                                (expand "[||]" 1)
                                (("15"
                                  (case
                                   "FORALL (xr:real): -pi_lbn(n)/2 <= xr AND xr <= pi_lbn(n)/2 IMPLIES -1 - (3.2 ^ (4 + 4 * n) / factorial(4 + 4 * n)) <= cos_lb(xr,n)")
                                  (("1"
                                    (inst-cp - "lb(X)")
                                    (("1"
                                      (inst - "ub(X)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "Proper?")
                                          (("1"
                                            (expand "<<" -3)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "[||]" -)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "min")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        nil)))))))))))))))))))))
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (case "xr <= 0")
                                        (("1"
                                          (lemma
                                           "cos_lb_np_strict_increasing")
                                          (("1"
                                            (inst - "n")
                                            (("1"
                                              (expand
                                               "strict_increasing?")
                                              (("1"
                                                (inst
                                                 -
                                                 "-pi_lbn(n)"
                                                 "xr")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "cos_approx_cos")
                                                    (("1"
                                                      (expand "cos_lb")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "pi_lbn(n)"
                                                         "1+2*n")
                                                        (("1"
                                                          (lemma
                                                           "cos_error_pi_lbn_bound")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "cos_approx_neg")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))))))))))
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "pi_bounds")
                                                    (("2"
                                                      (inst - "n")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))
                                                 ("3"
                                                  (lemma "pi_bounds")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil)))))))))))))
                                         ("2"
                                          (lemma
                                           "cos_lb_nn_strict_decreasing")
                                          (("2"
                                            (inst - "n")
                                            (("2"
                                              (expand
                                               "strict_decreasing?")
                                              (("2"
                                                (inst
                                                 -
                                                 "xr"
                                                 "pi_lbn(n)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "cos_lb")
                                                    (("1"
                                                      (lemma
                                                       "cos_approx_cos")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "pi_lbn(n)"
                                                         "1+2*n")
                                                        (("1"
                                                          (lemma
                                                           "cos_error_pi_lbn_bound")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))))))
                                                 ("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil)))))
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (lemma "pi_bounds")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))))
           ("2" (expand "Cos2")
            (("2" (assert)
              (("2" (lift-if)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (ground)
                            (("1" (expand "cos_0_pi")
                              (("1" (postpone) nil)))
                             ("2" (postpone) nil) ("3" (postpone) nil)
                             ("4" (postpone) nil) ("5" (postpone) nil)
                             ("6" (postpone) nil) ("7" (postpone) nil)
                             ("8" (postpone) nil) ("9" (postpone) nil)
                             ("10" (postpone) nil)
                             ("11" (postpone) nil)
                             ("12" (postpone) nil)
                             ("13" (postpone) nil)
                             ("14" (postpone) nil)
                             ("15" (postpone)
                              nil))))))))))))))))))))))))))
    nil)
   nil nil)
  (Cos_fundamental-1 nil 3552043684
   ("" (skeep)
    (("" (expand "<<")
      (("" (flatten)
        (("" (split)
          (("1" (expand "Cos")
            (("1" (lift-if)
              (("1" (lift-if)
                (("1" (lift-if)
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (expand "cos_0_pi")
                              (("1"
                                (expand "[||]")
                                (("1"
                                  (lemma "cos_lb_nn_strict_decreasing")
                                  (("1"
                                    (inst - "n")
                                    (("1"
                                      (expand "strict_decreasing?")
                                      (("1"
                                        (inst - "ub(X)" "ub(Y)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "Proper?(Y)")
                                          (("1"
                                            (hide-all-but (-1 -3 1))
                                            (("1"
                                              (expand "Proper?")
                                              (("1"
                                                (lemma "pi_bounds")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (expand "<<")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "Proper?")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide-all-but (-1 -3 1))
                                          (("3"
                                            (lemma "pi_bounds")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (expand "Proper?")
                                                (("3"
                                                  (expand "<<")
                                                  (("3"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "NOT X = [|0,0|]")
                              (("1"
                                (hide 2)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand "Proper?")
                                    (("1"
                                      (expand "[||]")
                                      (("1"
                                        (expand "<<")
                                        (("1"
                                          (decompose-equality +)
                                          (("1"
                                            (grind :exclude "pi_lbn")
                                            nil
                                            nil)
                                           ("2"
                                            (grind :exclude "pi_lbn")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (hide-all-but 2)
                                  (("2"
                                    (grind :exclude "pi_lbn")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide (-3 1 2))
                              (("3" (grind :exclude "pi_lbn") nil nil))
                              nil)
                             ("4" (hide-all-but (- 4))
                              (("4" (grind :exclude "pi_lbn") nil nil))
                              nil)
                             ("5" (case "NOT X = [|0,0|]")
                              (("1"
                                (hide-all-but (- 1))
                                (("1"
                                  (decompose-equality +)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (grind :exclude "pi_lbn")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "Neg")
                                (("2"
                                  (expand "[||]" 1)
                                  (("2"
                                    (expand "cos_0_pi" 1 1)
                                    (("2"
                                      (expand "[||]" 1)
                                      (("2"
                                        (expand "cos_0_pi")
                                        (("2"
                                          (expand "[||]" 1)
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (expand "[||]" 1)
                                              (("2"
                                                (expand "cos_lb" + 2)
                                                (("2"
                                                  (lemma
                                                   "cos_approx_a0")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "cos_bounds")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (expand "Neg")
                              (("6"
                                (expand "cos_0_pi")
                                (("6"
                                  (expand "[||]")
                                  (("6"
                                    (rewrite "cos_lb_neg")
                                    (("6"
                                      (rewrite "cos_lb_neg")
                                      (("6"
                                        (lemma
                                         "cos_lb_np_strict_increasing")
                                        (("6"
                                          (inst - "n")
                                          (("6"
                                            (expand
                                             "strict_increasing?")
                                            (("6"
                                              (inst - "lb(Y)" "lb(X)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand "<<")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "pi_bounds")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "pi_bounds")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (expand "<<")
                                                    (("3"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (hide-all-but (- 2))
                              (("7" (grind :exclude "pi_lbn") nil nil))
                              nil)
                             ("8" (hide-all-but (- 3))
                              (("8" (grind :exclude "pi_lbn") nil nil))
                              nil)
                             ("9" (expand "cos_0_pi")
                              (("9"
                                (expand "cos_npi2_pi2")
                                (("9"
                                  (expand "[||]" 1)
                                  (("9"
                                    (lemma
                                     "cos_lb_nn_strict_decreasing")
                                    (("9"
                                      (inst - "n")
                                      (("9"
                                        (expand "strict_decreasing?")
                                        (("9"
                                          (inst - "ub(X)" "ub(Y)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "<<")
                                            (("2"
                                              (expand "[||]")
                                              (("2"
                                                (lemma "pi_bounds")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "[||]")
                                            (("3"
                                              (expand "<<")
                                              (("3"
                                                (lemma "pi_bounds")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (expand "Proper?")
                                                    (("3"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("10" (expand "Neg")
                              (("10"
                                (expand "cos_0_pi")
                                (("10"
                                  (expand "cos_npi2_pi2")
                                  (("10"
                                    (expand "[||]")
                                    (("10"
                                      (rewrite "cos_lb_neg")
                                      (("10"
                                        (lemma
                                         "cos_lb_np_strict_increasing")
                                        (("10"
                                          (inst - "n")
                                          (("10"
                                            (expand
                                             "strict_increasing?")
                                            (("10"
                                              (inst - "lb(Y)" "lb(X)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "<<")
                                                (("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand
                                                       "Proper?")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "<<")
                                                (("3"
                                                  (expand "Proper?")
                                                  (("3"
                                                    (lemma "pi_bounds")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("11" (expand "cos_npi2_pi2")
                              (("11"
                                (expand "[||]")
                                (("11"
                                  (expand "<<")
                                  (("11"
                                    (flatten)
                                    (("11"
                                      (expand "Proper?")
                                      (("11"
                                        (case "ub(X) <= 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "cos_lb_np_strict_increasing")
                                            (("2"
                                              (inst - "n")
                                              (("2"
                                                (expand
                                                 "strict_increasing?")
                                                (("2"
                                                  (inst
                                                   -
                                                   "lb(Y)"
                                                   "lb(X)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "cos_lb_nn_strict_decreasing")
                                                      (("1"
                                                        (inst - "n")
                                                        (("1"
                                                          (expand
                                                           "strict_decreasing?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "ub(X)"
                                                             "ub(Y)")
                                                            (("1"
                                                              (split -)
                                                              (("1"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (expand
                                                                   "min")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "lb(Y) = lb(X)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "min")
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "ub(X) = ub(Y)")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "pi_bounds")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "pi_bounds")
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "pi_bounds")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma "pi_bounds")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("12" (hide-all-but (- 1))
                              (("12"
                                (grind :exclude "pi_lbn")
                                nil
                                nil))
                              nil)
                             ("13" (expand "cos_0_pi")
                              (("13"
                                (expand "[||]")
                                (("13"
                                  (expand "<<")
                                  (("13"
                                    (flatten)
                                    (("13"
                                      (eval-expr
                                       "sign(cos_lb(pi_lbn(10),10)+1)")
                                      (("13" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("14" (postpone) nil nil)
                             ("15" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (Sin_fundamental 0
  (Sin_fundamental-1 nil 3555173443
   ("" (skeep)
    (("" (expand "Proper?")
      (("" (expand "<<")
        (("" (flatten)
          (("" (split)
            (("1" (expand "Sin")
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (lift-if)
                    (("1" (lift-if)
                      (("1" (lift-if)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "Union")
                                                                  (("1"
                                                                    (expand
                                                                     "[||]")
                                                                    (("1"
                                                                      (case
                                                                       "FORALL (r1,r2,s1,s2:real): (r1<=s1 AND r2<=s2) IMPLIES min(r1,r2)<=min(s1,s2)")
                                                                      (("1"
                                                                        (rewrite
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "Cos_fundamental")
                                                                            (("1"
                                                                              (expand
                                                                               "<<"
                                                                               -1)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pi_bounds")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n")
                                                                                          (("1"
                                                                                            (grind
                                                                                             :exclude
                                                                                             ("pi_ubn"
                                                                                              "pi_lbn"))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "Neg")
                                                                            (("2"
                                                                              (expand
                                                                               "[||]")
                                                                              (("2"
                                                                                (expand
                                                                                 "Add")
                                                                                (("2"
                                                                                  (expand
                                                                                   "Intersection")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "[||]")
                                                                                    (("2"
                                                                                      (case
                                                                                       "FORALL (r1,r2:real): (-r1 <= -r2) IFF (r2 <= r1)")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "Cos_fundamental")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "<<"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pi_bounds")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "n")
                                                                                                          (("1"
                                                                                                            (grind
                                                                                                             :exclude
                                                                                                             ("pi_ubn"
                                                                                                              "pi_lbn"))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "Neg")
                                                                  (("2"
                                                                    (expand
                                                                     "[||]")
                                                                    (("2"
                                                                      (expand
                                                                       "Union")
                                                                      (("2"
                                                                        (expand
                                                                         "[||]")
                                                                        (("2"
                                                                          (case
                                                                           "FORALL (s1,s2:real,s3:real): s3<=s2 IMPLIES min(s1,-s2)<=-s3")
                                                                          (("1"
                                                                            (rewrite
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (lemma
                                                                                 "Cos_fundamental")
                                                                                (("1"
                                                                                  (expand
                                                                                   "<<"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "pi_bounds")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "n")
                                                                                              (("1"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 ("pi_ubn"
                                                                                                  "pi_lbn"))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   2)
                                                                  (("3"
                                                                    (hide
                                                                     (-1
                                                                      -2))
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (case
                                                                   "FORALL (s1,s2:real,s3:real): s2<=s3 IMPLIES min(s2,s1)<=s3")
                                                                  (("1"
                                                                    (expand
                                                                     "Union")
                                                                    (("1"
                                                                      (expand
                                                                       "[||]")
                                                                      (("1"
                                                                        (rewrite
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "Cos_fundamental")
                                                                            (("1"
                                                                              (expand
                                                                               "<<"
                                                                               -1)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     (2
                                                                                      3))
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pi_bounds")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n")
                                                                                          (("1"
                                                                                            (grind
                                                                                             :exclude
                                                                                             ("pi_ubn"
                                                                                              "pi_lbn"))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (hide
                                                                   2)
                                                                  (("5"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("6"
                                                                  (hide
                                                                   1)
                                                                  (("6"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("7"
                                                                  (expand
                                                                   "Neg")
                                                                  (("7"
                                                                    (expand
                                                                     "[||]")
                                                                    (("7"
                                                                      (expand
                                                                       "Add")
                                                                      (("7"
                                                                        (expand
                                                                         "Intersection")
                                                                        (("7"
                                                                          (expand
                                                                           "[||]")
                                                                          (("7"
                                                                            (case
                                                                             "FORALL (r1,r2:real): (-r1 <= -r2) IFF (r2 <= r1)")
                                                                            (("1"
                                                                              (rewrite
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "Cos_fundamental")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "<<"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "pi_bounds")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "n")
                                                                                              (("1"
                                                                                                (grind
                                                                                                 :exclude
                                                                                                 ("pi_ubn"
                                                                                                  "pi_lbn"))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("8"
                                                                  (hide
                                                                   2)
                                                                  (("8"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("9"
                                                                  (hide
                                                                   2)
                                                                  (("9"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("10"
                                                                  (hide
                                                                   2)
                                                                  (("10"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("11"
                                                                  (hide
                                                                   1)
                                                                  (("11"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("12"
                                                                  (hide
                                                                   1)
                                                                  (("12"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("13"
                                                                  (hide
                                                                   2)
                                                                  (("13"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("14"
                                                                  (hide
                                                                   1)
                                                                  (("14"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("15"
                                                                  (hide
                                                                   1)
                                                                  (("15"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("16"
                                                                  (hide
                                                                   2)
                                                                  (("16"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("17"
                                                                  (lemma
                                                                   "Cos_fundamental")
                                                                  (("17"
                                                                    (expand
                                                                     "<<"
                                                                     -1)
                                                                    (("17"
                                                                      (inst?)
                                                                      (("17"
                                                                        (assert)
                                                                        (("17"
                                                                          (hide
                                                                           3)
                                                                          (("17"
                                                                            (lemma
                                                                             "pi_bounds")
                                                                            (("17"
                                                                              (inst
                                                                               -
                                                                               "n")
                                                                              (("17"
                                                                                (grind
                                                                                 :exclude
                                                                                 ("pi_ubn"
                                                                                  "pi_lbn"))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("18"
                                                                  (hide
                                                                   2)
                                                                  (("18"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("19"
                                                                  (hide
                                                                   1)
                                                                  (("19"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("20"
                                                                  (hide
                                                                   1)
                                                                  (("20"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("21"
                                                                  (hide
                                                                   2)
                                                                  (("21"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "Sin")
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (lift-if)
                    (("2" (lift-if)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "Union")
                                                                  (("1"
                                                                    (expand
                                                                     "[||]")
                                                                    (("1"
                                                                      (case
                                                                       "FORALL (r1,r2,s1,s2:real): (r1<=s1 AND r2<=s2) IMPLIES max(r1,r2)<=max(s1,s2)")
                                                                      (("1"
                                                                        (rewrite
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "Cos_fundamental")
                                                                            (("1"
                                                                              (expand
                                                                               "<<"
                                                                               -1)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pi_bounds")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n")
                                                                                          (("1"
                                                                                            (grind
                                                                                             :exclude
                                                                                             ("pi_ubn"
                                                                                              "pi_lbn"))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "Neg")
                                                                            (("2"
                                                                              (expand
                                                                               "[||]")
                                                                              (("2"
                                                                                (expand
                                                                                 "Add")
                                                                                (("2"
                                                                                  (expand
                                                                                   "Intersection")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "[||]")
                                                                                    (("2"
                                                                                      (case
                                                                                       "FORALL (r1,r2:real): (-r1 <= -r2) IFF (r2 <= r1)")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "Cos_fundamental")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "<<"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pi_bounds")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "n")
                                                                                                          (("1"
                                                                                                            (grind
                                                                                                             :exclude
                                                                                                             ("pi_ubn"
                                                                                                              "pi_lbn"))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   2)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide
                                                                   2)
                                                                  (("4"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (hide
                                                                   2)
                                                                  (("5"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("6"
                                                                  (expand
                                                                   "Neg")
                                                                  (("6"
                                                                    (expand
                                                                     "Union")
                                                                    (("6"
                                                                      (expand
                                                                       "[||]")
                                                                      (("6"
                                                                        (case
                                                                         "FORALL (s1,s2:real,s3:real): s2<=s3 IMPLIES -s3<=max(s1,-s2)")
                                                                        (("1"
                                                                          (rewrite
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (lemma
                                                                               "Cos_fundamental")
                                                                              (("1"
                                                                                (expand
                                                                                 "<<"
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "pi_bounds")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "n")
                                                                                            (("1"
                                                                                              (grind
                                                                                               :exclude
                                                                                               ("pi_ubn"
                                                                                                "pi_lbn"))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("7"
                                                                  (expand
                                                                   "Neg")
                                                                  (("7"
                                                                    (expand
                                                                     "[||]")
                                                                    (("7"
                                                                      (case
                                                                       "FORALL (r1,r2:real): (-r1 <= -r2) IFF (r2 <= r1)")
                                                                      (("1"
                                                                        (rewrite
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "Cos_fundamental")
                                                                            (("1"
                                                                              (expand
                                                                               "<<"
                                                                               -1)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "pi_bounds")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "n")
                                                                                        (("1"
                                                                                          (grind
                                                                                           :exclude
                                                                                           ("pi_ubn"
                                                                                            "pi_lbn"))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("8"
                                                                  (hide
                                                                   2)
                                                                  (("8"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("9"
                                                                  (hide
                                                                   2)
                                                                  (("9"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("10"
                                                                  (hide
                                                                   2)
                                                                  (("10"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("11"
                                                                  (hide
                                                                   1)
                                                                  (("11"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("12"
                                                                  (hide
                                                                   1)
                                                                  (("12"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("13"
                                                                  (hide
                                                                   2)
                                                                  (("13"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("14"
                                                                  (expand
                                                                   "Neg")
                                                                  (("14"
                                                                    (expand
                                                                     "Union")
                                                                    (("14"
                                                                      (expand
                                                                       "[||]")
                                                                      (("14"
                                                                        (expand
                                                                         "Add")
                                                                        (("14"
                                                                          (expand
                                                                           "Intersection")
                                                                          (("14"
                                                                            (expand
                                                                             "[||]")
                                                                            (("14"
                                                                              (case
                                                                               "FORALL (s1,s2:real,s3:real): s3<=s1 IMPLIES s3<=max(s1,s2)")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "Cos_fundamental")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "<<"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "pi_bounds")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "n")
                                                                                                  (("2"
                                                                                                    (grind
                                                                                                     :exclude
                                                                                                     ("pi_ubn"
                                                                                                      "pi_lbn"))
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("15"
                                                                  (hide
                                                                   1)
                                                                  (("15"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("16"
                                                                  (hide
                                                                   2)
                                                                  (("16"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("17"
                                                                  (expand
                                                                   "[||]")
                                                                  (("17"
                                                                    (expand
                                                                     "Add")
                                                                    (("17"
                                                                      (expand
                                                                       "Intersection")
                                                                      (("17"
                                                                        (expand
                                                                         "[||]")
                                                                        (("17"
                                                                          (lemma
                                                                           "Cos_fundamental")
                                                                          (("17"
                                                                            (expand
                                                                             "<<"
                                                                             -1)
                                                                            (("17"
                                                                              (inst?)
                                                                              (("17"
                                                                                (assert)
                                                                                (("17"
                                                                                  (hide
                                                                                   3)
                                                                                  (("17"
                                                                                    (lemma
                                                                                     "pi_bounds")
                                                                                    (("17"
                                                                                      (inst
                                                                                       -
                                                                                       "n")
                                                                                      (("17"
                                                                                        (grind
                                                                                         :exclude
                                                                                         ("pi_ubn"
                                                                                          "pi_lbn"))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("18"
                                                                  (hide
                                                                   2)
                                                                  (("18"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("19"
                                                                  (hide
                                                                   1)
                                                                  (("19"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("20"
                                                                  (hide
                                                                   1)
                                                                  (("20"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("21"
                                                                  (hide
                                                                   2)
                                                                  (("21"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper? const-decl "bool" interval nil)
    (ub_interval formula-decl nil interval nil)
    (Sin const-decl "Interval" interval_trig nil)
    (Union const-decl "Interval" interval nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (atan_value const-decl "real" atan "trig_fnd/")
    (Integral const-decl "real" integral_def "analysis/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (Cos_fundamental formula-decl nil interval_trig nil)
    (Neg const-decl "Interval" interval nil)
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (pi_ubn const-decl "real" atan_approx "trig_fnd/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Intersection const-decl "Interval" interval nil)
    (Add const-decl "Interval" interval nil)
    (Cos const-decl "Interval" interval_trig nil)
    (Interval type-eq-decl nil interval nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    ([\|\|] const-decl "Interval" interval nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (lb_interval formula-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< const-decl "bool" interval nil))
   shostak))
 (tan_0_pi2_TCC1 0
  (tan_0_pi2_TCC1-1 nil 3301931278
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (tan_0_pi2_TCC2 0
  (tan_0_pi2_TCC2-1 nil 3301931279
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (tan_npi2_pi2_TCC1 0
  (tan_npi2_pi2_TCC1-2 nil 3304702393
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (tan_npi2_pi2_TCC2 0
  (tan_npi2_pi2_TCC2-1 nil 3302134474
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (tan_npi2_pi2_union 0
  (tan_npi2_pi2_union-1 nil 3559305084
   ("" (skeep)
    (("" (decompose-equality +)
      (("1" (expand "Union")
        (("1" (expand "[||]")
          (("1" (invoke (case "%1 = %2") (! 1 2) (! 1 2 1))
            (("1" (replaces -1)
              (("1" (expand "Neg")
                (("1" (expand "[||]")
                  (("1" (expand "tan_npi2_pi2")
                    (("1" (expand "<<")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "##")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (invoke (case "%1") (! 1 1 1))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "Intersection(X,
                                                                                                                            (# lb := -pi_lb_est(n) / 2,
                                                                                                                               ub := 0 #)) = (# lb:= lb(X), ub:= 0 #)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "tan_0_pi2")
                                              (("1"
                                                (rewrite "cos_lb_neg")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "cos_ub_a0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "sin_ub_neg")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (grind
                                             :exclude
                                             ("cos_lb" "pi_lb_est"))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma
                                       "cos_lb_nn_strict_decreasing")
                                      (("2"
                                        (inst - "n")
                                        (("2"
                                          (expand "strict_decreasing?")
                                          (("2"
                                            (inst-cp
                                             -
                                             "-lb(X)"
                                             "pi_lbn(n)/2")
                                            (("1"
                                              (inst
                                               -
                                               "ub(X)"
                                               "pi_lbn(n)/2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "cos_lb_pi2_pos")
                                                  (("1"
                                                    (inst - "n")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "pi_lb_est(n) <= pi_lbn(n)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "cos_lb_neg")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (case
                                                                   "-lb(X) = pi_lbn(n)/2")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "cos_lb_neg")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "-lb(X) = pi_lbn(n)/2")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "cos_lb_neg")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "pi_lb_est")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "pi_bounds")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "pi_bounds")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2"
                (case "FORALL (a,b:real): a<=b IMPLIES min(a,b) = a")
                (("1" (rewrite -1)
                  (("1" (hide (-1 2))
                    (("1"
                      (case "FORALL (a,b:real): a<=0 AND b>=0 IMPLIES a<=b")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (split)
                              (("1"
                                (expand "Neg")
                                (("1"
                                  (expand "[||]")
                                  (("1"
                                    (expand "tan_0_pi2")
                                    (("1"
                                      (expand "[||]")
                                      (("1"
                                        (invoke (case "%1") (! 1 1 1))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (neg-formula 1)
                                                (("1"
                                                  (lemma
                                                   "sin_ub_increasing")
                                                  (("1"
                                                    (inst - "n")
                                                    (("1"
                                                      (expand
                                                       "strict_increasing?")
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (invoke
                                                           (inst
                                                            -
                                                            "0"
                                                            "%1")
                                                           (! 1 2 1))
                                                          (("1"
                                                            (rewrite
                                                             "sin_ub_a0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "FORALL (a1:nnreal): (NOT a1=0) IMPLIES 0<a1")
                                                                (("1"
                                                                  (rewrite
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "sin_ub_a0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-4
                                                                      1))
                                                                    (("2"
                                                                      (grind
                                                                       :exclude
                                                                       "pi_lb_est")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-4 -5 1))
                                                            (("2"
                                                              (grind
                                                               :exclude
                                                               "pi_lb_est")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (case
                                             "NOT ub(Intersection(X, (# lb := -pi_lb_est(n) / 2, ub := 0 #))) = 0")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (grind
                                                 :exclude
                                                 "pi_lb_est")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (rewrite "cos_ub_a0")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "cos_lb_nn_strict_decreasing")
                                                    (("2"
                                                      (inst - "n")
                                                      (("2"
                                                        (expand
                                                         "strict_decreasing?")
                                                        (("2"
                                                          (invoke
                                                           (inst
                                                            -
                                                            "%1"
                                                            "pi_lbn(n)/2")
                                                           (! 1 1 1))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (invoke
                                                               (case
                                                                "%1 = %2")
                                                               (!
                                                                -1
                                                                1
                                                                1)
                                                               (!
                                                                -1
                                                                1
                                                                2))
                                                              (("1"
                                                                (lemma
                                                                 "cos_lb_pi2_pos")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "cos_lb_pi2_pos")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "n")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "pi_lb_est(n) <= pi_lbn(n)")
                                                                      (("1"
                                                                        (grind
                                                                         :exclude
                                                                         ("pi_lb_est"
                                                                          "pi_lbn"
                                                                          "cos_lb"))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "pi_lb_est")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "pi_bounds")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "n")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            (("3"
                                                              (hide
                                                               (-1 2))
                                                              (("3"
                                                                (case
                                                                 "pi_lb_est(n) <= pi_lbn(n)")
                                                                (("1"
                                                                  (lemma
                                                                   "pi_bounds")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "n")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (grind
                                                                           :exclude
                                                                           ("pi_lb_est"
                                                                            "pi_lbn"
                                                                            "cos_lb"
                                                                            "pi_ubn"))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "pi_lb_est")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "tan_0_pi2")
                                (("2"
                                  (expand "[||]")
                                  (("2"
                                    (invoke (case "%1") (! 1 1 1))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (cross-mult 1)
                                            (("1"
                                              (lemma
                                               "sin_lb_increasing")
                                              (("1"
                                                (inst - "n")
                                                (("1"
                                                  (expand
                                                   "strict_increasing?")
                                                  (("1"
                                                    (invoke
                                                     (inst - "0" "%1")
                                                     (! 1 1 1))
                                                    (("1"
                                                      (invoke
                                                       (case "%1 = %2")
                                                       (! -1 1 1)
                                                       (! -1 1 2))
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (rewrite
                                                           "sin_lb_a0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "sin_lb_a0")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind
                                                               :exclude
                                                               ("pi_lb_est"
                                                                "pi_lbn"
                                                                "cos_lb"
                                                                "pi_ubn"
                                                                "sin_lb"
                                                                "cos_ub"))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind
                                                       :exclude
                                                       ("pi_lb_est"
                                                        "pi_lbn"
                                                        "cos_lb"
                                                        "pi_ubn"
                                                        "sin_lb"
                                                        "cos_ub"))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (invoke
                                         (case "%1 = 0")
                                         (! 1 1 1 1))
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (rewrite "cos_ub_a0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "cos_lb_nn_strict_decreasing")
                                                (("1"
                                                  (inst - "n")
                                                  (("1"
                                                    (expand
                                                     "strict_decreasing?")
                                                    (("1"
                                                      (invoke
                                                       (inst
                                                        -
                                                        "%1"
                                                        "pi_lbn(n)/2")
                                                       (! 1 1 1))
                                                      (("1"
                                                        (lemma
                                                         "cos_lb_pi2_pos")
                                                        (("1"
                                                          (inst - "n")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (invoke
                                                               (case
                                                                "%1 = %2")
                                                               (! 1 1)
                                                               (! 1 2))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "pi_lb_est(n) <= pi_lbn(n)")
                                                                (("1"
                                                                  (grind
                                                                   :exclude
                                                                   ("pi_lb_est"
                                                                    "pi_lbn"
                                                                    "cos_lb"
                                                                    "pi_ubn"
                                                                    "sin_lb"
                                                                    "cos_ub"))
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "pi_lb_est")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "pi_bounds")
                                                        (("2"
                                                          (inst - "n")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (case
                                                           "pi_lb_est(n) <= pi_lbn(n)")
                                                          (("1"
                                                            (lemma
                                                             "pi_bounds")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "n")
                                                              (("1"
                                                                (grind
                                                                 :exclude
                                                                 ("pi_lb_est"
                                                                  "pi_lbn"
                                                                  "cos_lb"
                                                                  "pi_ubn"
                                                                  "sin_lb"
                                                                  "cos_ub"
                                                                  "pi"))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "pi_lb_est")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (grind
                                             :exclude
                                             ("pi_lb_est"
                                              "pi_lbn"
                                              "cos_lb"
                                              "pi_ubn"
                                              "sin_lb"
                                              "cos_ub"
                                              "pi"))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "tan_npi2_pi2")
        (("2" (expand "<<")
          (("2" (flatten)
            (("2" (assert)
              (("2" (expand "##")
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (invoke (case "%1") (! 1 1 1))
                      (("1" (flatten)
                        (("1" (assert)
                          (("1"
                            (case "Intersection(X,
                                                                                                                          (# lb := -pi_lb_est(n) / 2,
                                                                                                                             ub := 0 #)) = (# lb:= lb(X), ub:= 0 #)")
                            (("1" (expand "[||]")
                              (("1"
                                (expand "Neg")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "[||]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "tan_0_pi2")
                                        (("1"
                                          (rewrite "cos_lb_neg")
                                          (("1"
                                            (rewrite "cos_ub_a0")
                                            (("1"
                                              (rewrite "sin_lb_a0")
                                              (("1"
                                                (expand "[||]")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "sin_ub_neg")
                                                    (("1"
                                                      (expand "Union")
                                                      (("1"
                                                        (expand "[||]")
                                                        (("1"
                                                          (invoke
                                                           (case "%1")
                                                           (! 1 2 2 1))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (case
                                                                     "FORALL (b:real): 0<=b IMPLIES max(0,b) = b")
                                                                    (("1"
                                                                      (rewrite
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (invoke
                                                                           (case
                                                                            "%1 = %2")
                                                                           (!
                                                                            1
                                                                            1
                                                                            1
                                                                            1)
                                                                           (!
                                                                            1
                                                                            2
                                                                            1
                                                                            1))
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind
                                                                             :exclude
                                                                             ("pi_lb_est"
                                                                              "pi_lbn"
                                                                              "cos_lb"
                                                                              "pi_ubn"
                                                                              "sin_lb"
                                                                              "cos_ub"
                                                                              "pi"
                                                                              "sin_ub"))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (cross-mult
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "sin_bounds")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "sin_ge_0")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "pi_bounds")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "n")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "pi_lb_est(n) <= pi_lbn(n)")
                                                                                                (("1"
                                                                                                  (grind
                                                                                                   :exclude
                                                                                                   ("pi_lb_est"
                                                                                                    "pi_lbn"
                                                                                                    "cos_lb"
                                                                                                    "pi_ubn"
                                                                                                    "sin_lb"
                                                                                                    "cos_ub"
                                                                                                    "pi"
                                                                                                    "sin_ub"))
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "pi_lb_est")
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (invoke
                                                               (case
                                                                "%1 = 0")
                                                               (!
                                                                1
                                                                1
                                                                1
                                                                1))
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "cos_ub_a0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "cos_lb_nn_strict_decreasing")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "n")
                                                                        (("1"
                                                                          (expand
                                                                           "strict_decreasing?")
                                                                          (("1"
                                                                            (invoke
                                                                             (inst
                                                                              -
                                                                              "%1"
                                                                              "pi_lbn(n)/2")
                                                                             (!
                                                                              1
                                                                              1
                                                                              1))
                                                                            (("1"
                                                                              (lemma
                                                                               "cos_lb_pi2_pos")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "n")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "pi_lb_est_le")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "n")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (grind
                                                                                           :exclude
                                                                                           ("pi_lb_est"
                                                                                            "pi_lbn"
                                                                                            "cos_lb"
                                                                                            "pi_ubn"
                                                                                            "sin_lb"
                                                                                            "cos_ub"
                                                                                            "pi"
                                                                                            "sin_ub"))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "pi_bounds")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "n")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (lemma
                                                                                 "pi_lb_est_le")
                                                                                (("3"
                                                                                  (inst
                                                                                   -
                                                                                   "n")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (grind
                                                                                       :exclude
                                                                                       ("pi_lb_est"
                                                                                        "pi_lbn"
                                                                                        "cos_lb"
                                                                                        "pi_ubn"
                                                                                        "sin_lb"
                                                                                        "cos_ub"
                                                                                        "pi"
                                                                                        "sin_ub"))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind
                                                                 :exclude
                                                                 ("pi_lb_est"
                                                                  "pi_lbn"
                                                                  "cos_lb"
                                                                  "pi_ubn"
                                                                  "sin_lb"
                                                                  "cos_ub"
                                                                  "pi"
                                                                  "sin_ub"))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (grind :exclude
                               ("pi_lb_est"
                                "pi_lbn"
                                "cos_lb"
                                "pi_ubn"
                                "sin_lb"
                                "cos_ub"
                                "pi"
                                "sin_ub"))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "pi_lb_est_le")
                          (("2" (inst - "n")
                            (("2" (flatten)
                              (("2"
                                (lemma "cos_lb_pi2_pos")
                                (("2"
                                  (inst - "n")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "cos_lb_nn_strict_decreasing")
                                      (("2"
                                        (inst - "n")
                                        (("2"
                                          (expand "strict_decreasing?")
                                          (("2"
                                            (inst - _ "pi_lbn(n)/2")
                                            (("1"
                                              (inst-cp - "-lb(X)")
                                              (("1"
                                                (inst - "ub(X)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "cos_lb_neg")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (case
                                                         "-lb(X) = pi_lbn(n)/2")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "cos_lb_neg")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "-lb(X) = pi_lbn(n)/2")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "cos_lb_neg")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma "pi_bounds")
                                                (("2"
                                                  (inst - "n")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tan_npi2_pi2 const-decl "Interval" interval_trig nil)
    (Union const-decl "Interval" interval nil)
    (Neg const-decl "Interval" interval nil)
    (tan_0_pi2 const-decl "Interval" interval_trig nil)
    (Intersection const-decl "Interval" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx
     "trig_fnd/")
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (Integral const-decl "real" integral_def "analysis/")
    (atan_value const-decl "real" atan "trig_fnd/")
    (sin_ub_increasing formula-decl nil trig_approx "trig_fnd/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (X skolem-const-decl "Interval" interval_trig nil)
    (sin_ub_a0 formula-decl nil trig_approx "trig_fnd/")
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sin_ub const-decl "real" trig_approx "trig_fnd/")
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_div formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cos_ub const-decl "real" trig_approx "trig_fnd/")
    (sin_lb_increasing formula-decl nil trig_approx "trig_fnd/")
    (sin_lb_a0 formula-decl nil trig_approx "trig_fnd/")
    (sin_lb const-decl "real" trig_approx "trig_fnd/")
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<< const-decl "bool" interval nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (cos_lb const-decl "real" trig_approx "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (ub_interval formula-decl nil interval nil)
    (sin_ub_neg formula-decl nil trig_approx "trig_fnd/")
    (cos_ub_a0 formula-decl nil trig_approx "trig_fnd/")
    (cos_lb_neg formula-decl nil trig_approx "trig_fnd/")
    (minus_even_is_even application-judgement "even_int" integers nil)
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (cos_lb_pi2_pos formula-decl nil trig_approx "trig_fnd/")
    (nat_exp application-judgement "nat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (n skolem-const-decl "nat" interval_trig nil)
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (|##| const-decl "bool" interval nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (EmptyInterval const-decl "Interval" interval nil)
    (sin_ge_0 formula-decl nil trig_ineq "trig_fnd/")
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (sin_bounds formula-decl nil trig_approx "trig_fnd/")
    (pi_lb_est_le formula-decl nil trig_approx "trig_fnd/"))
   shostak))
 (Tan_proper 0
  (Tan_proper-1 nil 3559394623
   (""
    (case "NOT FORALL (X: Interval, n: nat):
               Proper?(X) AND
                X << [| 0, pi_lb_est(n + 5) / 2 |]
                IMPLIES Proper?(Tan(n)(X))")
    (("1" (hide 2)
      (("1" (skeep)
        (("1" (expand "Tan")
          (("1" (ground)
            (("1" (expand "tan_0_pi2")
              (("1" (invoke (case "%1") (! 1 1))
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "[||]")
                      (("1" (expand "Proper?")
                        (("1"
                          (case "FORALL (a,c:nnreal,b,d:posreal): a<=c AND b>=d IMPLIES a/b<=c/d")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (lemma "sin_bounds")
                                  (("1"
                                    (split +)
                                    (("1"
                                      (inst-cp - "lb(X)" "5+n")
                                      (("1"
                                        (inst - "ub(X)" "5+n")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "sin_increasing")
                                            (("1"
                                              (inst - "ub(X)" "lb(X)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "<<")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (lemma
                                                       "pi_lb_est_le")
                                                      (("1"
                                                        (inst - "5+n")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1)
                                      (("2"
                                        (lemma "cos_bounds")
                                        (("2"
                                          (inst-cp - "lb(X)" "5+n")
                                          (("2"
                                            (inst - "ub(X)" "5+n")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "cos_decreasing")
                                                (("2"
                                                  (inst
                                                   -
                                                   "ub(X)"
                                                   "lb(X)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "<<")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           "pi_lb_est_le")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "5+n")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "sin_ub_increasing")
                              (("2"
                                (inst - "5+n")
                                (("2"
                                  (expand "strict_increasing?")
                                  (("2"
                                    (inst - "0" "ub(X)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "sin_ub_a0")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "<<")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "<<")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lemma "sin_lb_increasing")
                              (("3"
                                (inst - "5+n")
                                (("3"
                                  (expand "strict_increasing?")
                                  (("3"
                                    (inst - "0" "lb(X)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "sin_lb_a0")
                                        (("1"
                                          (inst - "5+n")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "<<")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "<<")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (skeep)
                              (("2"
                                (mult-ineq -1 -2)
                                (("2" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (split +)
                    (("1" (lemma "cos_bounds")
                      (("1" (inst?)
                        (("1" (flatten)
                          (("1" (lemma "cos_gt_0")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "pi_lb_est_le")
                                  (("1"
                                    (inst - "5+n")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "<<")
                                        (("1"
                                          (expand "[||]")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "Proper?")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "cos_lb_nn_strict_decreasing")
                      (("2" (inst - "5+n")
                        (("2" (expand "strict_decreasing?")
                          (("2" (inst - "ub(X)" "pi_lbn(5+n)/2")
                            (("1" (lemma "pi_lb_est_le")
                              (("1"
                                (inst - "5+n")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "<<")
                                      (("1"
                                        (expand "[||]")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "Proper?")
                                              (("1"
                                                (lemma
                                                 "cos_lb_pi2_pos")
                                                (("1"
                                                  (inst - "5+n")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "pi_bounds")
                              (("2"
                                (inst?)
                                (("2" (ground) nil nil))
                                nil))
                              nil)
                             ("3" (expand "Proper?")
                              (("3"
                                (lemma "pi_lb_est_le")
                                (("3"
                                  (inst - "5+n")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "<<")
                                        (("3"
                                          (expand "[||]")
                                          (("3" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2"
      (case "NOT FORALL (X: Interval, n: nat):
                 Proper?(X) AND
                  (X << [| 0, pi_lb_est(n + 5) / 2 |] OR X << [| -pi_lb_est(n + 5) / 2,0 |])
                  IMPLIES Proper?(Tan(n)(X))")
      (("1" (hide 2)
        (("1" (skeep)
          (("1" (inst-cp - "X" "n")
            (("1" (assert)
              (("1" (assert)
                (("1" (expand "Tan" 1)
                  (("1" (inst - "Neg(X)" "n")
                    (("1" (assert)
                      (("1" (invoke (case "%1") (! -3 1))
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "Tan")
                              (("1"
                                (grind
                                 :exclude
                                 ("tan_0_pi2" "pi_lb_est"))
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -3)
                          (("2"
                            (grind :exclude ("tan_0_pi2" "pi_lb_est"))
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (inst-cp - "X" "n")
          (("2" (hide -3)
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "Tan")
                  (("2" (assert)
                    (("2" (rewrite "tan_npi2_pi2_union")
                      (("1"
                        (case "NOT FORALL (XX,YY:Interval): Proper?(YY) IMPLIES Proper?(Union(XX,YY))")
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (inst?)
                          (("2" (assert)
                            (("2" (hide 4)
                              (("2"
                                (inst
                                 -
                                 "Intersection(X, [| 0, pi_lb_est(5 + n) / 2 |])"
                                 "n")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide-all-but (-2 1))
                                        (("2"
                                          (grind
                                           :exclude
                                           ("tan_0_pi2" "pi_lb_est"))
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (grind
                                         :exclude
                                         ("tan_0_pi2" "pi_lb_est"))
                                        nil
                                        nil))
                                      nil)
                                     ("4"
                                      (flatten)
                                      (("4"
                                        (hide-all-but 1)
                                        (("4"
                                          (grind
                                           :exclude
                                           ("tan_0_pi2" "pi_lb_est"))
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1)
                        (("2"
                          (grind :exclude
                           ("tan_0_pi2" "pi_lb_est" "tan_npi2_pi2"))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (Neg const-decl "Interval" interval nil)
    (tan_npi2_pi2_union formula-decl nil interval_trig nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Intersection const-decl "Interval" interval nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Union const-decl "Interval" interval nil)
    (|##| const-decl "bool" interval nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (tan_0_pi2 const-decl "Interval" interval_trig nil)
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (cos_lb_pi2_pos formula-decl nil trig_approx "trig_fnd/")
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (cos_gt_0 formula-decl nil trig_ineq "trig_fnd/")
    (<= const-decl "bool" reals nil)
    (sin_lb_increasing formula-decl nil trig_approx "trig_fnd/")
    (sin_lb_a0 formula-decl nil trig_approx "trig_fnd/")
    (sin_ub_increasing formula-decl nil trig_approx "trig_fnd/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_ub_a0 formula-decl nil trig_approx "trig_fnd/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_bounds formula-decl nil trig_approx "trig_fnd/")
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (cos_decreasing formula-decl nil trig_ineq "trig_fnd/")
    (cos_bounds formula-decl nil trig_approx "trig_fnd/")
    (pi_lb_est_le formula-decl nil trig_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_increasing formula-decl nil trig_ineq "trig_fnd/")
    (sin_ub const-decl "real" trig_approx "trig_fnd/")
    (n skolem-const-decl "nat" interval_trig nil)
    (X skolem-const-decl "Interval" interval_trig nil)
    (sin_lb const-decl "real" trig_approx "trig_fnd/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_ub const-decl "real" trig_approx "trig_fnd/")
    (cos_lb const-decl "real" trig_approx "trig_fnd/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Proper? const-decl "bool" interval nil)
    (<< const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx
     "trig_fnd/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Tan const-decl "Interval" interval_trig nil))
   shostak))
 (Atan_fundamental 0
  (Atan_fundamental-1 nil 3559665648
   ("" (skeep)
    (("" (expand "Atan")
      (("" (lemma "atan_lb_increasing")
        (("" (lemma "atan_ub_increasing")
          (("" (inst - "n")
            (("" (inst - "n")
              (("" (expand "increasing?")
                (("" (inst - "ub(X)" "ub(Y)")
                  (("" (inst - "lb(Y)" "lb(X)")
                    (("" (assert)
                      (("" (expand "<<")
                        (("" (expand "[||]") (("" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Atan const-decl "Interval" interval_trig nil)
    (atan_ub_increasing formula-decl nil atan_approx "trig_fnd/")
    (Interval type-eq-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "Interval" interval nil)
    (<< const-decl "bool" interval nil)
    (increasing? const-decl "bool" real_fun_preds "reals/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (atan_lb_increasing formula-decl nil atan_approx "trig_fnd/"))
   shostak))
 (Pi_inclusion 0
  (Pi_inclusion-1 nil 3306165185
   ("" (skeep)
    (("" (expand "Pi")
      (("" (expand "##")
        (("" (expand "[||]")
          (("" (lemma "pi_bounds")
            (("" (inst?) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Pi const-decl "(Pos?)" interval_trig nil)
    ([\|\|] const-decl "Interval" interval nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (|##| const-decl "bool" interval nil))
   shostak))
 (Pi_proper 0
  (Pi_proper-1 nil 3567426319
   ("" (skeep)
    (("" (lemma "Pi_inclusion")
      (("" (inst? -1)
        (("" (lemma "Member_Proper")
          (("" (inst? -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Pi_inclusion formula-decl nil interval_trig nil)
    (Member_Proper formula-decl nil interval nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (pi const-decl "posreal" atan "trig_fnd/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Pi const-decl "(Pos?)" interval_trig nil)
    (Pos? const-decl "bool" interval nil)
    (Interval type-eq-decl nil interval nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (sin_npi2_pi2 0
  (sin_npi2_pi2-1 nil 3321631707
   ("" (skeep)
    (("" (expand "<<")
      (("" (flatten)
        (("" (expand "sin_npi2_pi2")
          (("" (assert)
            (("" (expand "##")
              (("" (assert)
                (("" (lemma "sin_bounds")
                  (("" (inst-cp -1 "ub(X)" "n")
                    (("" (inst -1 "lb(X)" "n")
                      (("" (grind-reals)
                        (("1" (lemma "sin_incr")
                          (("1" (inst -1 "ub(X)" "x")
                            (("1" (assert)
                              (("1"
                                (lemma "pi_bounds")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "sin_incr")
                          (("2" (inst -1 "x" "lb(X)")
                            (("2" (assert)
                              (("2"
                                (lemma "pi_bounds")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (<< const-decl "bool" interval nil)
    (sin_npi2_pi2 const-decl "Interval" interval_trig nil)
    (|##| const-decl "bool" interval nil)
    (sin_bounds formula-decl nil trig_approx "trig_fnd/")
    (sin_incr formula-decl nil trig_ineq "trig_fnd/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/"))
   nil))
 (sin_pi2_pi 0
  (sin_pi2_pi-1 nil 3321631733
   ("" (skeep)
    (("" (expand* "<<" "##" "sin_pi2_pi")
      (("" (assert)
        (("" (flatten)
          (("" (split)
            (("1" (case "sin(ub(X)) <= sin(x)")
              (("1" (lemma "sin_bounds")
                (("1" (inst -1 "ub(X)" "n") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (grind-reals)
                  (("2" (lemma "sin_decr")
                    (("2" (inst -1 "ub(X)" "x")
                      (("2" (assert)
                        (("2" (lemma "pi_bounds")
                          (("2" (inst?)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "sin(x)<= sin(lb(X))")
              (("1" (lemma "sin_bounds")
                (("1" (inst -1 "lb(X)" "n") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sin_decr")
                  (("2" (inst -1 "x" "lb(X)")
                    (("2" (assert)
                      (("2" (lemma "pi_bounds")
                        (("2" (inst?)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((|##| const-decl "bool" interval nil)
    (sin_pi2_pi const-decl "Interval" interval_trig nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (<< const-decl "bool" interval nil)
    (Interval type-eq-decl nil interval nil)
    (sin const-decl "real" sincos_def "trig_fnd/")
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin_bounds formula-decl nil trig_approx "trig_fnd/")
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_decr formula-decl nil trig_ineq "trig_fnd/")
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/"))
   nil))
 (sin_0_pi 0
  (sin_0_pi-1 nil 3312224255
   ("" (skeep)
    (("" (expand* "<<" "##" "sin_0_pi")
      (("" (flatten)
        (("" (assert)
          (("" (split)
            (("1" (case "x <= pi/2")
              (("1" (case "sin_lb(lb(X),n) <= sin(x)")
                (("1" (expand "min")
                  (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (hide 2)
                  (("2" (lemma "sin_bounds")
                    (("2" (inst -1 "lb(X)" "n")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (hide -2)
                            (("2" (case "sin(lb(X)) <= sin(x)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 -2 2)
                                (("2"
                                  (lemma "sin_incr")
                                  (("2"
                                    (inst -1 "x" "lb(X)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "sin_lb(ub(X), n) <= sin(x)")
                (("1" (expand "min")
                  (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (hide 3)
                  (("2" (lemma "sin_bounds")
                    (("2" (inst -1 "ub(X)" "n")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (case "sin(ub(X)) <= sin(x)")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 -2 2)
                              (("2"
                                (lemma "sin_decr")
                                (("2"
                                  (inst -1 "ub(X)" "x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "pi_bounds")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((|##| const-decl "bool" interval nil)
    (sin_0_pi const-decl "Interval" interval_trig nil)
    (<< const-decl "bool" interval nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_incr formula-decl nil trig_ineq "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_bounds formula-decl nil trig_approx "trig_fnd/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (sin const-decl "real" sincos_def "trig_fnd/")
    (Interval type-eq-decl nil interval nil)
    (sin_lb const-decl "real" trig_approx "trig_fnd/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_decr formula-decl nil trig_ineq "trig_fnd/"))
   nil))
 (sin_npi_0 0
  (sin_npi_0-1 nil 3312226151
   ("" (skeep)
    (("" (case-replace "sin(x)=--sin(x)")
      (("1" (hide -1)
        (("1" (rewrite "Neg_inclusion")
          (("1" (hide 2)
            (("1" (lemma "sin_neg")
              (("1" (inst -1 "x")
                (("1" (replaces -1 :dir rl)
                  (("1" (rewrite "sin_0_pi")
                    (("1" (hide -2 2)
                      (("1" (lemma "Neg_Incl")
                        (("1" (inst? -1 :where -2)
                          (("1" (assert)
                            (("1" (rewrite "Neg_interval")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "Neg_inclusion") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (sin const-decl "real" sincos_def "trig_fnd/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (Neg_inclusion formula-decl nil interval nil)
    (Interval type-eq-decl nil interval nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sin_0_pi const-decl "Interval" interval_trig nil)
    (Neg const-decl "Interval" interval nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_neg formula-decl nil trig_basic "trig_fnd/")
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    ([\|\|] const-decl "Interval" interval nil)
    (Neg_interval formula-decl nil interval nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (Neg_Incl formula-decl nil interval nil)
    (sin_0_pi formula-decl nil interval_trig nil))
   nil))
 (sin_npi_npi2 0
  (sin_npi_npi2-2 nil 3320434600
   ("" (skeep)
    (("" (case-replace "sin(x)=--sin(x)")
      (("1" (hide -1)
        (("1" (rewrite "Neg_inclusion")
          (("1" (hide 2)
            (("1" (lemma "sin_neg")
              (("1" (inst -1 "x")
                (("1" (replaces -1 :dir rl)
                  (("1" (rewrite "sin_pi2_pi")
                    (("1" (hide -2 2)
                      (("1" (lemma "Neg_Incl")
                        (("1" (inst? -1 :where -2)
                          (("1" (assert)
                            (("1" (rewrite "Neg_interval")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "Neg_inclusion") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (sin const-decl "real" sincos_def "trig_fnd/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (Neg_inclusion formula-decl nil interval nil)
    (Interval type-eq-decl nil interval nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sin_pi2_pi const-decl "Interval" interval_trig nil)
    (Neg const-decl "Interval" interval nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sin_neg formula-decl nil trig_basic "trig_fnd/")
    (pi_ubn const-decl "real" atan_approx "trig_fnd/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    ([\|\|] const-decl "Interval" interval nil)
    (Neg_interval formula-decl nil interval nil)
    (Neg_Incl formula-decl nil interval nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_pi2_pi formula-decl nil interval_trig nil))
   nil))
 (cos_0_pi 0
  (cos_0_pi-2 nil 3312234582
   ("" (skeep)
    (("" (expand* "<<" "##" "cos_0_pi" "cos_0_pi2")
      (("" (flatten)
        (("" (split 1)
          (("1" (case "cos(ub(X)) <= cos(x)")
            (("1" (lemma "cos_bounds")
              (("1" (inst -1 "ub(X)" "n") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "cos_decr")
                (("2" (inst -1 "ub(X)" "x")
                  (("2" (assert)
                    (("2" (lemma "pi_bounds")
                      (("2" (inst?)
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "cos(x) <= cos(lb(X))")
            (("1" (lemma "cos_bounds")
              (("1" (inst -1 "lb(X)" "n") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "cos_decr")
                (("2" (inst -1 "x" "lb(X)")
                  (("2" (assert)
                    (("2" (lemma "pi_bounds")
                      (("2" (inst?)
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((|##| const-decl "bool" interval nil)
    (cos_0_pi const-decl "Interval" interval_trig nil)
    (<< const-decl "bool" interval nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_decr formula-decl nil trig_ineq "trig_fnd/")
    (cos_bounds formula-decl nil trig_approx "trig_fnd/")
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def "trig_fnd/")
    (Interval type-eq-decl nil interval nil))
   nil))
 (cos_npi_0 0
  (cos_npi_0-1 nil 3579704427
   ("" (skeep)
    (("" (lemma "cos_0_pi")
      (("" (inst -1 "Neg(X)" "n" "-x")
        (("" (assert)
          (("" (rewrite "cos_neg")
            (("" (expand "cos_0_pi")
              (("" (assert)
                (("" (hide 2)
                  (("" (expand "<<")
                    (("" (flatten)
                      (("" (expand "Neg")
                        (("" (assert)
                          (("" (expand "##")
                            (("" (flatten) (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_0_pi formula-decl nil interval_trig nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_0_pi const-decl "Interval" interval_trig nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (|##| const-decl "bool" interval nil)
    (<< const-decl "bool" interval nil)
    (cos_neg formula-decl nil trig_basic "trig_fnd/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Neg const-decl "Interval" interval nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil))
 (cos_npi2_pi2 0
  (cos_npi2_pi2-1 nil 3305037654
   ("" (skeep)
    (("" (expand "<<")
      (("" (flatten)
        (("" (expand "cos_npi2_pi2")
          (("" (expand "##")
            (("" (flatten)
              (("" (split)
                (("1" (case "x >= 0")
                  (("1" (case "cos_lb(ub(X),n) <= cos(x)")
                    (("1" (expand "min")
                      (("1" (lift-if) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "cos_bounds")
                        (("2" (inst -1 "ub(X)" "n")
                          (("2" (flatten)
                            (("2" (case "cos(ub(X)) <= cos(x)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 -2 2)
                                (("2"
                                  (lemma "cos_decr")
                                  (("2"
                                    (inst -1 "ub(X)" "x")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "pi_bounds")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "cos_lb(lb(X),n) <= cos(x)")
                    (("1" (expand "min")
                      (("1" (lift-if) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (lemma "cos_bounds")
                        (("2" (inst -1 "lb(X)" "n")
                          (("2" (flatten)
                            (("2" (case "cos(lb(X))<=cos(x)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 -2 2)
                                (("2"
                                  (lemma "cos_decr")
                                  (("2"
                                    (inst -1 "-x" "-lb(X)")
                                    (("2"
                                      (rewrite "cos_neg")
                                      (("2"
                                        (rewrite "cos_neg")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "pi_bounds")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (<< const-decl "bool" interval nil)
    (cos_npi2_pi2 const-decl "Interval" interval_trig nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_decr formula-decl nil trig_ineq "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (cos_bounds formula-decl nil trig_approx "trig_fnd/")
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cos_lb const-decl "real" trig_approx "trig_fnd/")
    (Interval type-eq-decl nil interval nil)
    (cos const-decl "real" sincos_def "trig_fnd/")
    (cos_neg formula-decl nil trig_basic "trig_fnd/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (|##| const-decl "bool" interval nil))
   nil))
 (Cos_inclusion 0
  (Cos_inclusion-2 nil 3304702817
   ("" (skeep)
    (("" (expand "Cos")
      (("" (lift-if)
        (("" (bddsimp)
          (("1" (rewrite "cos_0_pi")
            (("1" (hide 2)
              (("1" (grind :exclude ("pi_lbn" "^")) nil nil)) nil))
            nil)
           ("2" (rewrite "cos_npi_0")
            (("2" (hide (2 3))
              (("2" (grind :exclude ("pi_lbn" "^")) nil nil)) nil))
            nil)
           ("3" (rewrite "cos_npi2_pi2")
            (("3" (hide (2 3 4))
              (("3" (grind :exclude ("pi_lbn" "^")) nil nil)) nil))
            nil)
           ("4" (hide-all-but 4)
            (("4" (assert)
              (("4" (typepred "cos(x)")
                (("4" (expand "##") (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (Cos const-decl "Interval" interval_trig nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    ([\|\|] const-decl "Interval" interval nil)
    (<< const-decl "bool" interval nil)
    (|##| const-decl "bool" interval nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx
     "trig_fnd/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (cos_0_pi formula-decl nil interval_trig nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_npi_0 formula-decl nil interval_trig nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cos_npi2_pi2 formula-decl nil interval_trig nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (cos const-decl "real" sincos_def "trig_fnd/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (Sin_inclusion 0
  (Sin_inclusion-2 nil 3304702653
   ("" (expand "Sin")
    (("" (skeep)
      (("" (name "Xpos" "Intersection(X, [| 0, ub(X) |])")
        (("" (replace -1)
          (("" (name "Xneg" "Intersection(X, [| lb(X), 0 |])")
            (("" (replace -1)
              ((""
                (name "piint" "[| -pi_ubn(n) / 2, -pi_lbn(n) / 2 |]")
                (("" (replace -1)
                  (("" (case "x>=0")
                    (("1" (case "x ## Xpos")
                      (("1" (assert)
                        (("1" (case "Proper?(Xpos)")
                          (("1" (assert)
                            (("1"
                              (case "sin(x) ## Cos(n)(Add(Xpos, piint))")
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind
                                   :exclude
                                   ("cos"
                                    "Cos"
                                    "sin"
                                    "Sin"
                                    "pi_lbn"
                                    "pi_ubn"
                                    "pi"))
                                  nil
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (rewrite "sin_cos")
                                  (("2"
                                    (lemma "cos_neg")
                                    (("2"
                                      (inst - "pi/2+x")
                                      (("2"
                                        (replaces -1 :dir rl)
                                        (("2"
                                          (rewrite "neg_cos")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite
                                               "cos_neg"
                                               :dir
                                               rl)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "NOT -(-(pi / 2 + x) + pi) = x-pi/2")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (lemma
                                                       "Cos_inclusion")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "pi_bounds")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "n")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (grind
                                                                   :exclude
                                                                   ("cos"
                                                                    "Cos"
                                                                    "sin"
                                                                    "Sin"
                                                                    "pi_lbn"
                                                                    "pi_ubn"
                                                                    "pi"))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (hide-all-but (-1 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-1 -5 1))
                        (("2" (expand "Xpos") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "Proper?(Xneg)")
                      (("1" (assert)
                        (("1"
                          (case "sin(x) ## Neg(Cos(n)(Add(Neg(Xneg), piint)))")
                          (("1" (hide-all-but (-1 +))
                            (("1"
                              (grind :exclude
                               ("cos"
                                "Cos"
                                "sin"
                                "Sin"
                                "pi_lbn"
                                "pi_ubn"
                                "pi"))
                              nil nil))
                            nil)
                           ("2" (hide 3)
                            (("2" (rewrite "sin_cos")
                              (("2"
                                (rewrite "Neg_inclusion")
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (rewrite "cos_neg" :dir rl)
                                    (("2"
                                      (lemma "Cos_inclusion")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (lemma "pi_bounds")
                                              (("2"
                                                (inst - "n")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (grind
                                                     :exclude
                                                     ("cos"
                                                      "Cos"
                                                      "sin"
                                                      "Sin"
                                                      "pi_lbn"
                                                      "pi_ubn"
                                                      "pi"))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "x ## Xneg")
                        (("1" (hide-all-but (-1 1))
                          (("1" (grind) nil nil)) nil)
                         ("2" (hide 4)
                          (("2" (hide -1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (Neg_inclusion formula-decl nil interval nil)
    (cos const-decl "real" sincos_def "trig_fnd/")
    (|##| const-decl "bool" interval nil)
    (Proper? const-decl "bool" interval nil)
    (sin const-decl "real" sincos_def "trig_fnd/")
    (Cos const-decl "Interval" interval_trig nil)
    (Add const-decl "Interval" interval nil)
    (Union const-decl "Interval" interval nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Neg const-decl "Interval" interval nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_cos formula-decl nil trig_basic "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (pi const-decl "posreal" atan "trig_fnd/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (neg_cos formula-decl nil trig_basic "trig_fnd/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Cos_inclusion formula-decl nil interval_trig nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (cos_neg formula-decl nil trig_basic "trig_fnd/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (Xpos skolem-const-decl "Interval" interval_trig nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_ubn const-decl "real" atan_approx "trig_fnd/")
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Intersection const-decl "Interval" interval nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval nil)
    (Sin const-decl "Interval" interval_trig nil))
   nil))
 (Tan_pi2_def 0
  (Tan_pi2_def-1 nil 3321636958
   ("" (skeep)
    (("" (expand* "##" "<<")
      (("" (flatten)
        (("" (lemma "pi_bounds")
          (("" (inst?)
            (("" (flatten)
              (("" (assert) (("" (rewrite "tan_pi2_def") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< const-decl "bool" interval nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (|##| const-decl "bool" interval nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (tan_pi2_def formula-decl nil trig_ineq "trig_fnd/")
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (cos_lb_gt_0_pos 0
  (cos_lb_gt_0_pos-1 nil 3321632423
   ("" (skeep)
    (("" (case "x=0")
      (("1" (replaces -1)
        (("1" (hide -1)
          (("1" (rewrite "cos_lb_a0") (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma "cos_lb_pi2_pos")
        (("2" (inst?)
          (("2" (assert)
            (("2" (lemma "cos_lb_nn_strict_decreasing")
              (("2" (inst -1 "n")
                (("2" (expand "strict_decreasing?")
                  (("2" (inst -1 "x" "pi_lbn(n)/2")
                    (("1" (assert)
                      (("1" (expand "##") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (lemma "pi_bounds")
                      (("2" (inst?)
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (expand "##")
                      (("3" (flatten)
                        (("3" (assert)
                          (("3" (lemma "pi_bounds")
                            (("3" (inst?)
                              (("3"
                                (flatten)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cos_lb_a0 formula-decl nil trig_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (|##| const-decl "bool" interval nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (n skolem-const-decl "nat" interval_trig nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (x skolem-const-decl "real" interval_trig nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_lb_pi2_pos formula-decl nil trig_approx "trig_fnd/"))
   shostak))
 (cos_lb_gt_0 0
  (cos_lb_gt_0-1 nil 3321635963
   ("" (skeep)
    (("" (case "x > 0")
      (("1" (lemma "cos_lb_gt_0_pos")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide-all-but (-2 1))
              (("1" (expand "##") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (lemma "cos_lb_gt_0_pos")
        (("2" (inst -1 "n" "-x")
          (("2" (rewrite "cos_lb_neg")
            (("2" (assert)
              (("2" (hide-all-but (-1 1))
                (("2" (expand "##") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (|##| const-decl "bool" interval nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_lb_gt_0_pos formula-decl nil interval_trig nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos_lb_neg formula-decl nil trig_approx "trig_fnd/"))
   shostak))
 (cos_ub_gt_0 0
  (cos_ub_gt_0-2 nil 3304702463
   ("" (skeep)
    (("" (lemma "cos_bounds")
      (("" (inst? -1)
        (("" (expand "##") (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_bounds formula-decl nil trig_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (|##| const-decl "bool" interval nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (cos_lb_ub_gt_0 0
  (cos_lb_ub_gt_0-1 nil 3321637451
   ("" (skeep)
    (("" (expand* "Proper?" "<<")
      (("" (flatten)
        (("" (assert)
          (("" (splash 1)
            (("1" (rewrite "cos_ub_gt_0")
              (("1" (expand "##") (("1" (assert) nil nil)) nil)) nil)
             ("2" (rewrite "cos_ub_gt_0")
              (("2" (expand "##") (("2" (assert) nil nil)) nil)) nil)
             ("3" (rewrite "cos_lb_gt_0")
              (("3" (expand "##") (("3" (assert) nil nil)) nil)) nil)
             ("4" (rewrite "cos_lb_gt_0")
              (("4" (expand "##") (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< const-decl "bool" interval nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (Proper? const-decl "bool" interval nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (cos_lb_gt_0 formula-decl nil interval_trig nil)
    (cos_ub_gt_0 formula-decl nil interval_trig nil)
    (|##| const-decl "bool" interval nil)
    (cos_ub const-decl "real" trig_approx "trig_fnd/")
    (Interval type-eq-decl nil interval nil)
    (cos_lb const-decl "real" trig_approx "trig_fnd/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (tan_0_pi2_TCC3 0
  (tan_0_pi2_TCC3-1 nil 3318076124
   ("" (skeep)
    (("" (lemma "Tan_pi2_def")
      (("" (inst?)
        (("" (inst?)
          (("" (expand "<<")
            (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan_pi2_def formula-decl nil interval_trig nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (<< const-decl "bool" interval nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (tan_0_pi2 0
  (tan_0_pi2-1 nil 3304702837
   ("" (skeep)
    (("" (lemma "cos_lb_ub_gt_0")
      (("" (inst -1 "X" "n")
        (("" (case "Proper?(X)")
          (("1" (expand* "<<" "##" "tan_0_pi2")
            (("1" (assert)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (lemma "tan_bounds_0_pi2")
                              (("1"
                                (inst -1 "lb(X)" "n")
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "tan_lb_ub")
                                      (("1"
                                        (lemma "tan_incr")
                                        (("1"
                                          (inst -1 "x" "lb(X)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "pi_bounds")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3"
                                    (lemma "pi_bounds")
                                    (("3"
                                      (inst?)
                                      (("3"
                                        (flatten)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (split 1)
                          (("1" (flatten)
                            (("1" (lemma "tan_bounds_0_pi2")
                              (("1"
                                (inst -1 "ub(X)" "n")
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "tan_ub_lb")
                                      (("1"
                                        (lemma "tan_incr")
                                        (("1"
                                          (inst -1 "ub(X)" "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "pi_bounds")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (lemma "pi_bounds")
                                    (("3"
                                      (inst?)
                                      (("3"
                                        (flatten)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (lemma "Member_Proper")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_lb_ub_gt_0 formula-decl nil interval_trig nil)
    (Proper? const-decl "bool" interval nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (tan_bounds_0_pi2 formula-decl nil tan_approx "trig_fnd/")
    (tan_lb_ub const-decl "real" tan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (tan_incr formula-decl nil trig_ineq "trig_fnd/")
    (tan_ub_lb const-decl "real" tan_approx "trig_fnd/")
    (<< const-decl "bool" interval nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (tan_0_pi2 const-decl "Interval" interval_trig nil)
    (|##| const-decl "bool" interval nil)
    (Member_Proper formula-decl nil interval nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (tan_npi2_0_TCC1 0
  (tan_npi2_0_TCC1-2 nil 3318077125
   ("" (skeep)
    (("" (lemma "Tan_pi2_def")
      (("" (inst?)
        (("" (inst?)
          (("" (expand "<<")
            (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan_pi2_def formula-decl nil interval_trig nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (<< const-decl "bool" interval nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (tan_npi2_0 0
  (tan_npi2_0-2 nil 3579704469
   ("" (skeep)
    (("" (lemma "tan_0_pi2")
      (("" (inst -1 "Neg(X)" "n" "-x")
        (("" (rewrite "tan_neg")
          (("" (split)
            (("1" (lemma "Neg_inclusion")
              (("1" (inst -1 "tan_0_pi2(n)(Neg(X))" "-tan(x)")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (expand "<<")
                (("2" (expand "Neg")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (propax) nil nil)
             ("4" (rewrite "Neg_inclusion") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tan_0_pi2 formula-decl nil interval_trig nil)
    (Tan? const-decl "bool" sincos_def "trig_fnd/")
    (tan_neg formula-decl nil trig_basic "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< const-decl "bool" interval nil)
    (Neg_inclusion formula-decl nil interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (tan_0_pi2 const-decl "Interval" interval_trig nil)
    (tan const-decl "real" sincos_def "trig_fnd/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Neg const-decl "Interval" interval nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil))
 (tan_npi2_pi2_TCC3 0
  (tan_npi2_pi2_TCC3-2 nil 3318077435
   ("" (skeep)
    (("" (lemma "Tan_pi2_def")
      (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Tan_pi2_def formula-decl nil interval_trig nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (tan_npi2_pi2 0
  (tan_npi2_pi2-2 "" 3545778271
   ("" (skeep)
    (("" (expand "Zeroin?")
      (("" (lemma "cos_lb_ub_gt_0")
        (("" (inst -1 "X" "n")
          (("" (case "Proper?(X)")
            (("1" (expand* "<<" "##")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (expand "tan_npi2_pi2")
                        (("1" (assert)
                          (("1" (split)
                            (("1" (lemma "tan_bounds_npi2_0")
                              (("1"
                                (inst -1 "lb(X)" "n")
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "tan_lb_lb")
                                      (("1"
                                        (case "tan(lb(X)) <= tan(x)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide -1 -2 2)
                                          (("2"
                                            (lemma "tan_incr")
                                            (("2"
                                              (inst -1 "x" "lb(X)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "pi_bounds")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "pi_bounds")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil)
                                   ("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "tan_bounds_0_pi2")
                              (("2"
                                (inst -1 "ub(X)" "n")
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "tan_ub_lb")
                                      (("1"
                                        (case "tan(x) <= tan(ub(X))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide -1 -2 2)
                                          (("2"
                                            (lemma "tan_incr")
                                            (("2"
                                              (inst -1 "ub(X)" "x")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "pi_bounds")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (lemma "pi_bounds")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (lemma "Member_Proper")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Zeroin? const-decl "bool" interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Member_Proper formula-decl nil interval nil)
    (|##| const-decl "bool" interval nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (<< const-decl "bool" interval nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tan_bounds_0_pi2 formula-decl nil tan_approx "trig_fnd/")
    (tan_ub_lb const-decl "real" tan_approx "trig_fnd/")
    (tan_bounds_npi2_0 formula-decl nil tan_approx "trig_fnd/")
    (tan_lb_lb const-decl "real" tan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (tan_incr formula-decl nil trig_ineq "trig_fnd/")
    (tan const-decl "real" sincos_def "trig_fnd/")
    (Tan? const-decl "bool" sincos_def "trig_fnd/")
    (<= const-decl "bool" reals nil)
    (tan_npi2_pi2 const-decl "Interval" interval_trig nil)
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Proper? const-decl "bool" interval nil)
    (cos_lb_ub_gt_0 formula-decl nil interval_trig nil))
   nil)
  (tan_npi2_pi2-1 "" 3320522103
   ("" (skeep)
    (("" (lemma "cos_lb_ub_gt_0")
      (("" (inst -1 "X" "n")
        (("" (case "Proper?(X)")
          (("1" (expand* "<<" "##")
            (("1" (assert)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (expand "tan_npi2_pi2")
                      (("1" (assert)
                        (("1" (split)
                          (("1" (lemma "tan_bounds_npi2_0")
                            (("1" (inst -1 "lb(X)" "n")
                              (("1"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "tan_lb_lb")
                                    (("1"
                                      (case "tan(lb(X)) <= tan(x)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1 -2 2)
                                        (("2"
                                          (lemma "tan_incr")
                                          (("2"
                                            (inst -1 "x" "lb(X)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (lemma "pi_bounds")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil)
                                 ("4" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "tan_bounds_0_pi2")
                            (("2" (inst -1 "ub(X)" "n")
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "tan_ub_lb")
                                    (("1"
                                      (case "tan(x) <= tan(ub(X))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1 -2 2)
                                        (("2"
                                          (lemma "tan_incr")
                                          (("2"
                                            (inst -1 "ub(X)" "x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "pi_bounds")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (lemma "pi_bounds")
                                    (("3"
                                      (inst?)
                                      (("3"
                                        (flatten)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (lemma "Member_Proper")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper? const-decl "bool" interval nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (Tan? const-decl "bool" sincos_def "trig_fnd/")
    (tan const-decl "real" sincos_def "trig_fnd/")
    (tan_incr formula-decl nil trig_ineq "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (tan_lb_lb const-decl "real" tan_approx "trig_fnd/")
    (tan_bounds_npi2_0 formula-decl nil tan_approx "trig_fnd/")
    (tan_ub_lb const-decl "real" tan_approx "trig_fnd/")
    (tan_bounds_0_pi2 formula-decl nil tan_approx "trig_fnd/")
    (<< const-decl "bool" interval nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (Member_Proper formula-decl nil interval nil)
    (Interval type-eq-decl nil interval nil))
   nil))
 (TAN?_TCC1 0
  (TAN?_TCC1-1 nil 3567426319 ("" (subtype-tcc) nil nil) nil nil))
 (TAN_Tan 0
  (TAN_Tan-2 nil 3567449799
   ("" (skeep)
    (("" (expand "TAN?")
      (("" (lemma "pi_lb_est_le")
        (("" (inst?)
          (("" (flatten)
            (("" (lemma "Tan_pi2_def")
              (("" (inst? -1)
                (("" (inst? -1)
                  (("" (assert)
                    (("" (hide-all-but (-3 1))
                      (("" (grind :exclude ("pi_lb_est" "pi_lbn")) nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TAN? const-decl "bool" interval_trig nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Tan_pi2_def formula-decl nil interval_trig nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    ([\|\|] const-decl "Interval" interval nil)
    (<< const-decl "bool" interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Interval type-eq-decl nil interval nil)
    (pi_lb_est_le formula-decl nil trig_approx "trig_fnd/"))
   nil)
  (TAN_Tan-1 nil 3567449719 ("" (postpone) nil nil) nil shostak))
 (Tan_inclusion_TCC1 0
  (Tan_inclusion_TCC1-3 nil 3302520141
   ("" (skeep)
    (("" (lemma "TAN_Tan")
      (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((TAN_Tan formula-decl nil interval_trig nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (Tan_inclusion 0
  (Tan_inclusion-3 nil 3567451111
   ("" (skeep)
    (("" (expand "Tan")
      (("" (case "X << [|0, pi_lb_est(5 + n) / 2|]")
        (("1" (assert)
          (("1" (rewrite "tan_0_pi2")
            (("1" (lemma "pi_lb_est_le")
              (("1" (inst?)
                (("1" (flatten)
                  (("1" (expand "<<")
                    (("1" (expand "[||]") (("1" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replace 1)
          (("2" (case "X << [|-pi_lb_est(5 + n) / 2, 0|]")
            (("1" (assert)
              (("1" (rewrite "tan_npi2_0")
                (("1" (lemma "pi_lb_est_le")
                  (("1" (inst?)
                    (("1" (expand "<<")
                      (("1" (expand "[||]")
                        (("1" (flatten) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "TAN?")
              (("2" (assert)
                (("2" (rewrite "tan_npi2_pi2")
                  (("1" (lemma "pi_lb_est_le")
                    (("1" (inst?)
                      (("1" (expand "<<")
                        (("1" (expand "[||]")
                          (("1" (flatten) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-2 4))
                    (("2" (grind :exclude "pi_lb_est") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (Tan const-decl "Interval" interval_trig nil)
    (TAN? const-decl "bool" interval_trig nil)
    (tan_npi2_pi2 formula-decl nil interval_trig nil)
    (Zeroin? const-decl "bool" interval nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (tan_npi2_0 formula-decl nil interval_trig nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (pi_lb_est_le formula-decl nil trig_approx "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (tan_0_pi2 formula-decl nil interval_trig nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<< const-decl "bool" interval nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    ([\|\|] const-decl "Interval" interval nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx
     "trig_fnd/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil)
  (Tan_inclusion-2 nil 3545778321
   ("" (skeep)
    (("" (expand "Tan")
      (("" (case "X << [|0, pi_lb_est(5 + n) / 2|]")
        (("1" (assert)
          (("1" (rewrite "tan_0_pi2")
            (("1" (lemma "pi_lb_est_le")
              (("1" (inst?)
                (("1" (flatten)
                  (("1" (expand "<<")
                    (("1" (expand "[||]") (("1" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replace 1)
          (("2" (case "X << [|-pi_lb_est(5 + n) / 2, 0|]")
            (("1" (assert)
              (("1" (rewrite "tan_npi2_0")
                (("1" (lemma "pi_lb_est_le")
                  (("1" (inst?)
                    (("1" (expand "<<")
                      (("1" (expand "[||]")
                        (("1" (flatten) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (rewrite "tan_npi2_pi2")
                (("1" (lemma "pi_lb_est_le")
                  (("1" (inst?)
                    (("1" (expand "<<")
                      (("1" (expand "[||]")
                        (("1" (flatten) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 4)
                  (("2" (grind :exclude "pi_lb_est") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Zeroin? const-decl "bool" interval nil)
    (|##| const-decl "bool" interval nil)
    (pi_lb_est_le formula-decl nil trig_approx "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (Interval type-eq-decl nil interval nil)
    (<< const-decl "bool" interval nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx
     "trig_fnd/"))
   nil)
  (Tan_inclusion-1 nil 3302519966
   ("" (skeep)
    (("" (expand "Tan")
      (("" (lift-if)
        (("" (bddsimp)
          (("1" (rewrite "tan_0_pi2") nil nil)
           ("2" (rewrite "tan_npi2_0") nil nil)
           ("3" (rewrite "tan_npi2_pi2")
            (("1" (expand "<<") (("1" (assert) nil nil)) nil)
             ("2" (expand "<<") (("2" (assert) nil nil)) nil))
            nil)
           ("4" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (Interval type-eq-decl nil interval nil)
    (<< const-decl "bool" interval nil)
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil))
   nil))
 (Tan_fundamental 0
  (Tan_fundamental-2 nil 3579704688
   (""
    (case "NOT FORALL (X, Y: Interval, n: nat):
                                                                                     Proper?(X) AND Proper?(Tan(n)(Y)) AND X << Y AND Y << [|0,pi_lb_est(5+n)/2|]  IMPLIES
                                                                                      Tan(n)(X) << Tan(n)(Y)")
    (("1" (hide 2)
      (("1" (skeep)
        (("1" (case "X << [|0,pi_lb_est(5+n)/2|]")
          (("1" (expand "Proper?")
            (("1" (expand "Tan")
              (("1" (assert)
                (("1" (expand "<<")
                  (("1" (expand "[||]")
                    (("1" (flatten)
                      (("1" (expand "tan_0_pi2")
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split)
                                            (("1"
                                              (case
                                               "FORALL (aa,bb:nnreal,cc,dd:posreal): (aa<=bb AND cc >= dd) IMPLIES aa/cc <= bb/dd")
                                              (("1"
                                                (rewrite -1)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "sin_lb_increasing")
                                                      (("1"
                                                        (inst - "5+n")
                                                        (("1"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "lb(Y)"
                                                             "lb(X)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "cos_ub_nn_strict_decreasing")
                                                    (("2"
                                                      (inst - "5+n")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "strict_decreasing?")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "lb(Y)"
                                                             "lb(X)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (case
                                                   "cos_ub(lb(X),5+n)>0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "sin_lb_increasing")
                                                      (("1"
                                                        (inst - "5+n")
                                                        (("1"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "0"
                                                             "lb(X)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "sin_lb_a0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "sin_lb_increasing")
                                                    (("4"
                                                      (inst - "5+n")
                                                      (("4"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("4"
                                                          (inst
                                                           -
                                                           "0"
                                                           "lb(Y)")
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (case
                                                               "lb(Y) = 0")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "sin_lb_a0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "sin_lb_a0")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (mult-ineq -1 -2)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "FORALL (aa,bb:nnreal,cc,dd:posreal): (aa<=bb AND cc >= dd) IMPLIES aa/cc <= bb/dd")
                                              (("1"
                                                (rewrite -1)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (lemma
                                                     "sin_ub_increasing")
                                                    (("1"
                                                      (inst - "5+n")
                                                      (("1"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "ub(X)"
                                                           "ub(Y)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "cos_lb_nn_strict_decreasing")
                                                    (("2"
                                                      (inst - "5+n")
                                                      (("2"
                                                        (expand
                                                         "strict_decreasing?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "ub(X)"
                                                           "ub(Y)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (lemma
                                                       "sin_ub_increasing")
                                                      (("3"
                                                        (inst - "5+n")
                                                        (("3"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("3"
                                                            (inst
                                                             -
                                                             "0"
                                                             "ub(Y)")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (case
                                                                 "sin_ub(0, 5 + n)=0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "sin_ub")
                                                                    (("2"
                                                                      (rewrite
                                                                       "sin_approx_a0")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "sin_ub_increasing")
                                                    (("4"
                                                      (inst - "5+n")
                                                      (("4"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("4"
                                                          (inst
                                                           -
                                                           "0"
                                                           "ub(X)")
                                                          (("4"
                                                            (case
                                                             "sin_ub(0, 5 + n)=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "sin_ub")
                                                                (("2"
                                                                  (rewrite
                                                                   "sin_approx_a0")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (mult-ineq -1 -2)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (lemma
                                               "cos_ub_nn_strict_decreasing")
                                              (("1"
                                                (inst - "5+n")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "strict_decreasing?")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "lb(X)"
                                                       "pi_lbn(5+n)/2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "cos_lb_pi2_pos")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "5+n")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "cos_bounds")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "pi_lbn(5+n)/2"
                                                                   "5+n")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT pi_lb_est(5+n) <= pi_lbn(5+n)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "pi_lb_est"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "pi_lb_est")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (case
                                                               "FORALL (nn:below(10)): pi_lbn(5 + nn) / 2 <= pi_lbn(5 + nn) - 2 / (1 + (5 + nn) ^ 3)")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (eval-formula)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "cos_lb_nn_strict_decreasing")
                                              (("2"
                                                (inst - "5+n")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "strict_decreasing?")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "ub(X)"
                                                       "pi_lbn(5+n)/2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "cos_lb_pi2_pos")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "5+n")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT pi_lb_est(5+n) <= pi_lbn(5+n)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "pi_lb_est"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "pi_bounds")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "5+n")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide-all-but -1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (hide -2)
              (("2" (grind :exclude "pi_lb_est") nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2"
      (case "NOT FORALL (X, Y: Interval, n: nat):
                                   Proper?(X) AND
                                    Proper?(Tan(n)(Y)) AND
                                     X << Y AND (Y << [| 0, pi_lb_est(5 + n) / 2 |] OR Y << [| -pi_lb_est(5 + n) / 2,0 |])
                                    IMPLIES Tan(n)(X) << Tan(n)(Y)")
      (("1" (hide 2)
        (("1" (skeep)
          (("1" (inst-cp - "X" "Y" "n")
            (("1" (assert)
              (("1" (expand "Tan" -2)
                (("1" (ground)
                  (("1" (case "Y = [|0,0|]")
                    (("1" (assert)
                      (("1" (case "X = [|0,0|]")
                        (("1" (replace -1)
                          (("1" (replace -2)
                            (("1" (hide-all-but 1)
                              (("1"
                                (expand "<<")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "<<")
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "Proper?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "[||]")
                                    (("2"
                                      (decompose-equality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst - "Neg(X)" "Neg(Y)" "n")
                      (("2" (assert)
                        (("2"
                          (case "Neg(Y) << [| 0, pi_lb_est(5 + n) / 2 |]")
                          (("1" (assert)
                            (("1"
                              (case "Neg(X) << [| 0, pi_lb_est(5 + n) / 2 |]")
                              (("1"
                                (assert)
                                (("1"
                                  (split -)
                                  (("1"
                                    (expand "Tan")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "X = [| 0, 0 |]")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand
                                                   "tan_0_pi2"
                                                   1
                                                   1)
                                                  (("1"
                                                    (expand "[||]" +)
                                                    (("1"
                                                      (rewrite
                                                       "cos_ub_a0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "cos_lb_a0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "sin_ub_a0")
                                                              (("1"
                                                                (rewrite
                                                                 "sin_lb_a0")
                                                                (("1"
                                                                  (expand
                                                                   "tan_0_pi2"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "Neg"
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           "[||]"
                                                                           +)
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (expand
                                                                               "<<"
                                                                               1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (mult-by
                                                                                   1
                                                                                   "cos_lb(-lb(Y),5+n)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "sin_ub(-lb(Y),5+n)>=0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "sin_ub_increasing")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "5+n")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "strict_increasing?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0"
                                                                                                 "-lb(Y)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "sin_ub_a0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "Neg")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "[||]")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "lb(Y) = 0")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "sin_ub_a0")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "<<")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "[||]")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (invoke
                                                                                     (case
                                                                                      "%1 > 0")
                                                                                     (!
                                                                                      1
                                                                                      2
                                                                                      1))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       (2
                                                                                        3))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "Neg"
                                                                                         (-1
                                                                                          -2))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "[||]"
                                                                                           (-1
                                                                                            -2))
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "ub(Y) = 0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "cos_ub_a0")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sin_lb_a0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "<<")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "[||]")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "Neg"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "[||]"
                                                                           1)
                                                                          (("2"
                                                                            (case
                                                                             "ub(Y) = 0")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "cos_ub_a0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "<<")
                                                                              (("2"
                                                                                (expand
                                                                                 "[||]")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "Neg"
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "[||]"
                                                                           1)
                                                                          (("3"
                                                                            (lemma
                                                                             "cos_lb_nn_strict_decreasing")
                                                                            (("3"
                                                                              (inst
                                                                               -
                                                                               "5+n")
                                                                              (("3"
                                                                                (expand
                                                                                 "strict_decreasing?")
                                                                                (("3"
                                                                                  (inst
                                                                                   -
                                                                                   "-lb(Y)"
                                                                                   "pi_lbn(5 + n) / 2")
                                                                                  (("1"
                                                                                    (invoke
                                                                                     (case
                                                                                      "%1 > 0")
                                                                                     (!
                                                                                      -1
                                                                                      2
                                                                                      1))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "<<"
                                                                                         -7)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "[||]")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (case
                                                                                               "pi_lb_est(5+n)<=pi_lbn(5+n)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "pi_lb_est")
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "cos_lb_pi2_pos")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "5+n")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "pi_bounds")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "5+n")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (case
                                                                                     "pi_lb_est(5+n) <= pi")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "[||]")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "<<")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "pi_bounds")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "5+n")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "pi_lb_est")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "<<")
                                                (("2"
                                                  (expand "[||]")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "Proper?")
                                                      (("2"
                                                        (decompose-equality
                                                         +)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma "Neg_Incl")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "Proper?")
                                                    (("2"
                                                      (expand "<<")
                                                      (("2"
                                                        (expand "[||]")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 1))
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (expand "Tan" 1)
                                    (("3"
                                      (hide-all-but (-5 1))
                                      (("3"
                                        (grind :exclude "tan_0_pi2")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand "<<")
                                    (("4"
                                      (expand "Neg")
                                      (("4"
                                        (expand "[||]")
                                        (("4" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (grind
                                 :exclude
                                 ("Tan" "pi_lb_est" "tan_0_pi2"))
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2"
                              (grind :exclude
                               ("Tan" "pi_lb_est" "tan_0_pi2"))
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -2)
        (("2" (skeep)
          (("2" (case "NOT Proper?(Tan(n)(Y))")
            (("1" (lemma "Tan_inclusion")
              (("1" (inst - "Y" "n" "lb(X)")
                (("1" (assert)
                  (("1" (split -)
                    (("1" (hide-all-but (-1 1))
                      (("1" (expand "Proper?")
                        (("1" (expand "##") (("1" (ground) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "Proper?")
                      (("2" (expand "<<")
                        (("2" (expand "##") (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -4)
              (("2" (copy -3)
                (("2" (hide -4)
                  (("2" (copy -3)
                    (("2" (hide -4)
                      (("2" (inst-cp - "X" "Y" "n")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (expand "Tan" -3)
                              (("2"
                                (ground)
                                (("1"
                                  (lemma "tan_npi2_pi2_union")
                                  (("1"
                                    (inst - "Y" "n+5")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (expand "Tan" + 2)
                                          (("1"
                                            (label "TanY" -1)
                                            (("1"
                                              (replace "TanY" +)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "Tan" +)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "Intersection(X,[|0,pi_lb_est(5+n)/2|])"
                                                         "Intersection(Y,[|0,pi_lb_est(5+n)/2|])"
                                                         "n")
                                                        (("1"
                                                          (case
                                                           "Intersection(X, [| 0, pi_lb_est(5+n) / 2 |]) = X")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (expand
                                                                   "Tan"
                                                                   -1)
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1")
                                                                     (!
                                                                      -1
                                                                      2
                                                                      1))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "Incl_trans")
                                                                        (("1"
                                                                          (invoke
                                                                           (inst
                                                                            -
                                                                            "%1"
                                                                            "%2"
                                                                            "%3")
                                                                           (!
                                                                            -3
                                                                            1)
                                                                           (!
                                                                            -3
                                                                            2)
                                                                           (!
                                                                            1
                                                                            2))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "Union_Incl_right")
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           "pi_lb_est")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "Tan_proper")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         (-3
                                                                          3))
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           ("tan_0_pi2"
                                                                            "pi_lb_est"
                                                                            "tan_npi2_pi2"
                                                                            "Tan"))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   (-3
                                                                    2))
                                                                  (("3"
                                                                    (grind
                                                                     :exclude
                                                                     ("tan_0_pi2"
                                                                      "pi_lb_est"
                                                                      "tan_npi2_pi2"
                                                                      "Tan"))
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (flatten)
                                                                  (("4"
                                                                    (hide
                                                                     (-3
                                                                      3))
                                                                    (("4"
                                                                      (grind
                                                                       :exclude
                                                                       ("tan_0_pi2"
                                                                        "pi_lb_est"
                                                                        "tan_npi2_pi2"
                                                                        "Tan"))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -6 1))
                                                            (("2"
                                                              (grind
                                                               :exclude
                                                               ("tan_0_pi2"
                                                                "pi_lb_est"
                                                                "tan_npi2_pi2"
                                                                "Tan"))
                                                              (("2"
                                                                (decompose-equality)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (invoke
                                                         (case
                                                          "%1 << %2")
                                                         (! 1 1)
                                                         (! 1 2 1))
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (grind
                                                             :exclude
                                                             ("tan_0_pi2"
                                                              "Intersection"
                                                              "pi_lb_est"
                                                              "Neg"))
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "Neg_Incl")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (invoke
                                                                     (inst
                                                                      -
                                                                      "%1"
                                                                      "%2"
                                                                      "n")
                                                                     (!
                                                                      1
                                                                      1
                                                                      1)
                                                                     (!
                                                                      1
                                                                      2
                                                                      1))
                                                                    (("2"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (expand
                                                                         "Tan"
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (invoke
                                                                           (case
                                                                            "%1")
                                                                           (!
                                                                            -1
                                                                            1
                                                                            1))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "Tan"
                                                                               -2)
                                                                              (("1"
                                                                                (invoke
                                                                                 (case
                                                                                  "%1")
                                                                                 (!
                                                                                  -2
                                                                                  2
                                                                                  1))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind
                                                                                     :exclude
                                                                                     ("tan_0_pi2"
                                                                                      "pi_lb_est"))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "Neg")
                                                                        (("2"
                                                                          (expand
                                                                           "Proper?")
                                                                          (("2"
                                                                            (expand
                                                                             "[||]")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "Tan_proper")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (hide
                                                                               (-2
                                                                                2
                                                                                3))
                                                                              (("3"
                                                                                (grind
                                                                                 :exclude
                                                                                 ("tan_0_pi2"
                                                                                  "pi_lb_est"
                                                                                  "tan_npi2_pi2"))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide
                                                                         (-2
                                                                          2))
                                                                        (("4"
                                                                          (grind
                                                                           :exclude
                                                                           ("tan_0_pi2"
                                                                            "pi_lb_est"
                                                                            "tan_npi2_pi2"))
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (hide
                                                                         (-2
                                                                          2))
                                                                        (("5"
                                                                          (grind
                                                                           :exclude
                                                                           ("tan_0_pi2"
                                                                            "pi_lb_est"
                                                                            "tan_npi2_pi2"))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (rewrite
                                                         "tan_npi2_pi2_union")
                                                        (("1"
                                                          (case
                                                           "FORALL (XX,YY,WW,ZZ:Interval): XX<<WW AND YY<<ZZ IMPLIES Union(XX,YY) << Union(WW,ZZ)")
                                                          (("1"
                                                            (rewrite
                                                             -1)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -3)
                                                                (("1"
                                                                  (lemma
                                                                   "Neg_Incl")
                                                                  (("1"
                                                                    (rewrite
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (invoke
                                                                         (inst-cp
                                                                          -
                                                                          "%1"
                                                                          "%2"
                                                                          "n")
                                                                         (!
                                                                          1
                                                                          1
                                                                          1)
                                                                         (!
                                                                          1
                                                                          2
                                                                          1))
                                                                        (("1"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (expand
                                                                             "Tan"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (invoke
                                                                               (case
                                                                                "%1")
                                                                               (!
                                                                                -1
                                                                                1
                                                                                1))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "Tan"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (invoke
                                                                                     (case
                                                                                      "%1")
                                                                                     (!
                                                                                      -2
                                                                                      2
                                                                                      1))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind
                                                                                         :exclude
                                                                                         ("tan_0_pi2"
                                                                                          "pi_lb_est"
                                                                                          "tan_npi2_pi2"))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind
                                                                                   :exclude
                                                                                   ("tan_0_pi2"
                                                                                    "pi_lb_est"
                                                                                    "tan_npi2_pi2"))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-1
                                                                              -2
                                                                              -6
                                                                              2))
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"
                                                                                "tan_npi2_pi2"))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (lemma
                                                                               "Tan_proper")
                                                                              (("3"
                                                                                (rewrite
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   (-1
                                                                                    -2
                                                                                    -3
                                                                                    -7
                                                                                    2))
                                                                                  (("1"
                                                                                    (grind
                                                                                     :exclude
                                                                                     ("tan_0_pi2"
                                                                                      "pi_lb_est"
                                                                                      "tan_npi2_pi2"))
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind
                                                                                     :exclude
                                                                                     ("tan_0_pi2"
                                                                                      "pi_lb_est"
                                                                                      "tan_npi2_pi2"))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide-all-but
                                                                             (-7
                                                                              -8
                                                                              1))
                                                                            (("4"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"
                                                                                "tan_npi2_pi2"))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("5"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"
                                                                                "tan_npi2_pi2"))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (invoke
                                                               (inst
                                                                -
                                                                "%1"
                                                                "%2"
                                                                "n")
                                                               (!
                                                                1
                                                                1
                                                                1)
                                                               (!
                                                                1
                                                                2
                                                                1))
                                                              (("2"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (expand
                                                                   "Tan"
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1")
                                                                     (!
                                                                      -1
                                                                      1
                                                                      1))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "Tan"
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (invoke
                                                                           (case
                                                                            "%1")
                                                                           (!
                                                                            -2
                                                                            2
                                                                            1))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"
                                                                                "tan_npi2_pi2"))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind
                                                                         :exclude
                                                                         ("tan_0_pi2"
                                                                          "pi_lb_est"
                                                                          "tan_npi2_pi2"))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -3
                                                                    2
                                                                    3))
                                                                  (("2"
                                                                    (grind
                                                                     :exclude
                                                                     ("tan_0_pi2"
                                                                      "pi_lb_est"
                                                                      "tan_npi2_pi2"))
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (rewrite
                                                                   "Tan_proper")
                                                                  (("1"
                                                                    (hide
                                                                     (-1
                                                                      -3
                                                                      2
                                                                      3
                                                                      4))
                                                                    (("1"
                                                                      (grind
                                                                       :exclude
                                                                       ("tan_0_pi2"
                                                                        "pi_lb_est"
                                                                        "tan_npi2_pi2"))
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind
                                                                       :exclude
                                                                       ("tan_0_pi2"
                                                                        "pi_lb_est"
                                                                        "tan_npi2_pi2"))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    -3
                                                                    2
                                                                    3))
                                                                  (("4"
                                                                    (grind
                                                                     :exclude
                                                                     ("tan_0_pi2"
                                                                      "pi_lb_est"
                                                                      "tan_npi2_pi2"))
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("5"
                                                                    (grind
                                                                     :exclude
                                                                     ("tan_0_pi2"
                                                                      "pi_lb_est"
                                                                      "tan_npi2_pi2"))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           (-2 -5 2))
                                                          (("2"
                                                            (grind
                                                             :exclude
                                                             ("tan_0_pi2"
                                                              "pi_lb_est"
                                                              "tan_npi2_pi2"))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (hide
                                                         (-1 -4 2))
                                                        (("4"
                                                          (grind
                                                           :exclude
                                                           ("tan_0_pi2"
                                                            "pi_lb_est"
                                                            "tan_npi2_pi2"))
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -3)
                                          (("2"
                                            (grind
                                             :exclude
                                             ("tan_0_pi2"
                                              "pi_lb_est"
                                              "tan_npi2_pi2"))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Proper?")
                                  (("2"
                                    (expand "EmptyInterval")
                                    (("2"
                                      (expand "[||]")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Neg const-decl "Interval" interval nil)
    (cos_ub_a0 formula-decl nil trig_approx "trig_fnd/")
    (cos_lb_a0 formula-decl nil trig_approx "trig_fnd/")
    (sin_ub_a0 formula-decl nil trig_approx "trig_fnd/")
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (n skolem-const-decl "nat" interval_trig nil)
    (Y skolem-const-decl "Interval" interval_trig nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Neg_Incl formula-decl nil interval nil)
    (tan_npi2_pi2_union formula-decl nil interval_trig nil)
    (Tan_proper formula-decl nil interval_trig nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Union const-decl "Interval" interval nil)
    (Union_Incl_right formula-decl nil interval nil)
    (Incl_trans formula-decl nil interval nil)
    (Intersection const-decl "Interval" interval nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Tan_inclusion formula-decl nil interval_trig nil)
    (|##| const-decl "bool" interval nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (sin_approx_a0 formula-decl nil trig_approx "trig_fnd/")
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (sin_ub_increasing formula-decl nil trig_approx "trig_fnd/")
    (cos_lb const-decl "real" trig_approx "trig_fnd/")
    (sin_ub const-decl "real" trig_approx "trig_fnd/")
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sin_lb_a0 formula-decl nil trig_approx "trig_fnd/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (cos_ub_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (sin_lb_increasing formula-decl nil trig_approx "trig_fnd/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos_ub const-decl "real" trig_approx "trig_fnd/")
    (X skolem-const-decl "Interval" interval_trig nil)
    (n skolem-const-decl "nat" interval_trig nil)
    (Y skolem-const-decl "Interval" interval_trig nil)
    (sin_lb const-decl "real" trig_approx "trig_fnd/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (cos_lb_pi2_pos formula-decl nil trig_approx "trig_fnd/")
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (cos_bounds formula-decl nil trig_approx "trig_fnd/")
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (EmptyInterval const-decl "Interval" interval nil)
    (tan_0_pi2 const-decl "Interval" interval_trig nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Interval type-eq-decl nil interval nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Proper? const-decl "bool" interval nil)
    (Tan const-decl "Interval" interval_trig nil)
    (<< const-decl "bool" interval nil)
    ([\|\|] const-decl "Interval" interval nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx
     "trig_fnd/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil)
  (Tan_fundamental-1 nil 3558358660
   (""
    (case "NOT FORALL (X, Y: Interval, n: nat):
                                                                              Proper?(X) AND Proper?(Tan(n)(Y)) AND X << Y AND Y << [|0,pi_lb_est(5+n)/2|]  IMPLIES
                                                                               Tan(n)(X) << Tan(n)(Y)")
    (("1" (hide 2)
      (("1" (skeep)
        (("1" (case "X << [|0,pi_lb_est(5+n)/2|]")
          (("1" (expand "Proper?")
            (("1" (expand "Tan")
              (("1" (assert)
                (("1" (expand "<<")
                  (("1" (expand "[||]")
                    (("1" (flatten)
                      (("1" (expand "tan_0_pi2")
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split)
                                            (("1"
                                              (case
                                               "FORALL (aa,bb:nnreal,cc,dd:posreal): (aa<=bb AND cc >= dd) IMPLIES aa/cc <= bb/dd")
                                              (("1"
                                                (rewrite -1)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "sin_lb_increasing")
                                                      (("1"
                                                        (inst - "5+n")
                                                        (("1"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "lb(Y)"
                                                             "lb(X)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "cos_ub_nn_strict_decreasing")
                                                    (("2"
                                                      (inst - "5+n")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "strict_decreasing?")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "lb(Y)"
                                                             "lb(X)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (case
                                                   "cos_ub(lb(X),5+n)>0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "sin_lb_increasing")
                                                      (("1"
                                                        (inst - "5+n")
                                                        (("1"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "0"
                                                             "lb(X)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "sin_lb_a0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "sin_lb_increasing")
                                                    (("4"
                                                      (inst - "5+n")
                                                      (("4"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("4"
                                                          (inst
                                                           -
                                                           "0"
                                                           "lb(Y)")
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (case
                                                               "lb(Y) = 0")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "sin_lb_a0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "sin_lb_a0")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (mult-ineq -1 -2)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "FORALL (aa,bb:nnreal,cc,dd:posreal): (aa<=bb AND cc >= dd) IMPLIES aa/cc <= bb/dd")
                                              (("1"
                                                (rewrite -1)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (lemma
                                                     "sin_ub_increasing")
                                                    (("1"
                                                      (inst - "5+n")
                                                      (("1"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "ub(X)"
                                                           "ub(Y)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "cos_lb_nn_strict_decreasing")
                                                    (("2"
                                                      (inst - "5+n")
                                                      (("2"
                                                        (expand
                                                         "strict_decreasing?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "ub(X)"
                                                           "ub(Y)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (lemma
                                                       "sin_ub_increasing")
                                                      (("3"
                                                        (inst - "5+n")
                                                        (("3"
                                                          (expand
                                                           "strict_increasing?")
                                                          (("3"
                                                            (inst
                                                             -
                                                             "0"
                                                             "ub(Y)")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (case
                                                                 "sin_ub(0, 5 + n)=0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "sin_ub")
                                                                    (("2"
                                                                      (rewrite
                                                                       "sin_approx_a0")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "sin_ub_increasing")
                                                    (("4"
                                                      (inst - "5+n")
                                                      (("4"
                                                        (expand
                                                         "strict_increasing?")
                                                        (("4"
                                                          (inst
                                                           -
                                                           "0"
                                                           "ub(X)")
                                                          (("4"
                                                            (case
                                                             "sin_ub(0, 5 + n)=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "sin_ub")
                                                                (("2"
                                                                  (rewrite
                                                                   "sin_approx_a0")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (mult-ineq -1 -2)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (lemma
                                               "cos_ub_nn_strict_decreasing")
                                              (("1"
                                                (inst - "5+n")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "strict_decreasing?")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "lb(X)"
                                                       "pi_lbn(5+n)/2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "cos_lb_pi2_pos")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "5+n")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "cos_bounds")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "pi_lbn(5+n)/2"
                                                                   "5+n")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT pi_lb_est(5+n) <= pi_lbn(5+n)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "pi_lb_est"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "pi_lb_est")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (case
                                                               "FORALL (nn:below(10)): pi_lbn(5 + nn) / 2 <= pi_lbn(5 + nn) - 2 / (1 + (5 + nn) ^ 3)")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (eval-formula)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "cos_lb_nn_strict_decreasing")
                                              (("2"
                                                (inst - "5+n")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "strict_decreasing?")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "ub(X)"
                                                       "pi_lbn(5+n)/2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "cos_lb_pi2_pos")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "5+n")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT pi_lb_est(5+n) <= pi_lbn(5+n)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "pi_lb_est"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "pi_bounds")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "5+n")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide-all-but -1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (hide -2)
              (("2" (grind :exclude "pi_lb_est") nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2"
      (case "NOT FORALL (X, Y: Interval, n: nat):
                          Proper?(X) AND
                           Proper?(Tan(n)(Y)) AND
                            X << Y AND (Y << [| 0, pi_lb_est(5 + n) / 2 |] OR Y << [| -pi_lb_est(5 + n) / 2,0 |])
                           IMPLIES Tan(n)(X) << Tan(n)(Y)")
      (("1" (hide 2)
        (("1" (skeep)
          (("1" (inst-cp - "X" "Y" "n")
            (("1" (assert)
              (("1" (expand "Tan" -2)
                (("1" (ground)
                  (("1" (case "Y = [|0,0|]")
                    (("1" (assert)
                      (("1" (case "X = [|0,0|]")
                        (("1" (replace -1)
                          (("1" (replace -2)
                            (("1" (hide-all-but 1)
                              (("1"
                                (expand "<<")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "<<")
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "Proper?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "[||]")
                                    (("2"
                                      (decompose-equality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst - "-X" "-Y" "n")
                      (("2" (assert)
                        (("2"
                          (case "Neg(Y) << [| 0, pi_lb_est(5 + n) / 2 |]")
                          (("1" (assert)
                            (("1"
                              (case "Neg(X) << [| 0, pi_lb_est(5 + n) / 2 |]")
                              (("1"
                                (assert)
                                (("1"
                                  (split -)
                                  (("1"
                                    (expand "Tan")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split +)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "X = [| 0, 0 |]")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand
                                                   "tan_0_pi2"
                                                   1
                                                   1)
                                                  (("1"
                                                    (expand "[||]" +)
                                                    (("1"
                                                      (rewrite
                                                       "cos_ub_a0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "cos_lb_a0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "sin_ub_a0")
                                                              (("1"
                                                                (rewrite
                                                                 "sin_lb_a0")
                                                                (("1"
                                                                  (expand
                                                                   "tan_0_pi2"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "Neg"
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           "[||]"
                                                                           +)
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (expand
                                                                               "<<"
                                                                               1)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (mult-by
                                                                                   1
                                                                                   "cos_lb(-lb(Y),5+n)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "sin_ub(-lb(Y),5+n)>=0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "sin_ub_increasing")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "5+n")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "strict_increasing?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "0"
                                                                                                 "-lb(Y)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "sin_ub_a0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "Neg")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "[||]")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "lb(Y) = 0")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "sin_ub_a0")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "<<")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "[||]")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (invoke
                                                                                     (case
                                                                                      "%1 > 0")
                                                                                     (!
                                                                                      1
                                                                                      2
                                                                                      1))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       (2
                                                                                        3))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "Neg"
                                                                                         (-1
                                                                                          -2))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "[||]"
                                                                                           (-1
                                                                                            -2))
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "ub(Y) = 0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "cos_ub_a0")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sin_lb_a0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "<<")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "[||]")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "Neg"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "[||]"
                                                                           1)
                                                                          (("2"
                                                                            (case
                                                                             "ub(Y) = 0")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "cos_ub_a0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "<<")
                                                                              (("2"
                                                                                (expand
                                                                                 "[||]")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "Neg"
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "[||]"
                                                                           1)
                                                                          (("3"
                                                                            (lemma
                                                                             "cos_lb_nn_strict_decreasing")
                                                                            (("3"
                                                                              (inst
                                                                               -
                                                                               "5+n")
                                                                              (("3"
                                                                                (expand
                                                                                 "strict_decreasing?")
                                                                                (("3"
                                                                                  (inst
                                                                                   -
                                                                                   "-lb(Y)"
                                                                                   "pi_lbn(5 + n) / 2")
                                                                                  (("1"
                                                                                    (invoke
                                                                                     (case
                                                                                      "%1 > 0")
                                                                                     (!
                                                                                      -1
                                                                                      2
                                                                                      1))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "<<"
                                                                                         -7)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "[||]")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (case
                                                                                               "pi_lb_est(5+n)<=pi_lbn(5+n)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "pi_lb_est")
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "cos_lb_pi2_pos")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "5+n")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "pi_bounds")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "5+n")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (case
                                                                                     "pi_lb_est(5+n) <= pi")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "[||]")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "<<")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "pi_bounds")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "5+n")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "pi_lb_est")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "<<")
                                                (("2"
                                                  (expand "[||]")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "Proper?")
                                                      (("2"
                                                        (decompose-equality
                                                         +)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split +)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma "Neg_Incl")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "Proper?")
                                                    (("2"
                                                      (expand "<<")
                                                      (("2"
                                                        (expand "[||]")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 1))
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (expand "Tan" 1)
                                    (("3"
                                      (hide-all-but (-5 1))
                                      (("3"
                                        (grind :exclude "tan_0_pi2")
                                        nil
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand "<<")
                                    (("4"
                                      (expand "Neg")
                                      (("4"
                                        (expand "[||]")
                                        (("4" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (grind
                                 :exclude
                                 ("Tan" "pi_lb_est" "tan_0_pi2"))
                                nil
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2"
                              (grind :exclude
                               ("Tan" "pi_lb_est" "tan_0_pi2"))
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -2)
        (("2" (skeep)
          (("2" (case "NOT Proper?(Tan(n)(Y))")
            (("1" (lemma "Tan_inclusion")
              (("1" (inst - "Y" "n" "lb(X)")
                (("1" (assert)
                  (("1" (split -)
                    (("1" (hide-all-but (-1 1))
                      (("1" (expand "Proper?")
                        (("1" (expand "##") (("1" (ground) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "Proper?")
                      (("2" (expand "<<")
                        (("2" (expand "##") (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -4)
              (("2" (copy -3)
                (("2" (hide -4)
                  (("2" (copy -3)
                    (("2" (hide -4)
                      (("2" (inst-cp - "X" "Y" "n")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (expand "Tan" -3)
                              (("2"
                                (ground)
                                (("1"
                                  (lemma "tan_npi2_pi2_union")
                                  (("1"
                                    (inst - "Y" "n+5")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (expand "Tan" + 2)
                                          (("1"
                                            (label "TanY" -1)
                                            (("1"
                                              (replace "TanY" +)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "Tan" +)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "Intersection(X,[|0,pi_lb_est(5+n)/2|])"
                                                         "Intersection(Y,[|0,pi_lb_est(5+n)/2|])"
                                                         "n")
                                                        (("1"
                                                          (case
                                                           "Intersection(X, [| 0, pi_lb_est(5+n) / 2 |]) = X")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (expand
                                                                   "Tan"
                                                                   -1)
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1")
                                                                     (!
                                                                      -1
                                                                      2
                                                                      1))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "Incl_trans")
                                                                        (("1"
                                                                          (invoke
                                                                           (inst
                                                                            -
                                                                            "%1"
                                                                            "%2"
                                                                            "%3")
                                                                           (!
                                                                            -3
                                                                            1)
                                                                           (!
                                                                            -3
                                                                            2)
                                                                           (!
                                                                            1
                                                                            2))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "Union_Incl_right")
                                                                              (("1"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           "pi_lb_est")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "Tan_proper")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         (-3
                                                                          3))
                                                                        (("2"
                                                                          (grind
                                                                           :exclude
                                                                           ("tan_0_pi2"
                                                                            "pi_lb_est"
                                                                            "tan_npi2_pi2"
                                                                            "Tan"))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   (-3
                                                                    2))
                                                                  (("3"
                                                                    (grind
                                                                     :exclude
                                                                     ("tan_0_pi2"
                                                                      "pi_lb_est"
                                                                      "tan_npi2_pi2"
                                                                      "Tan"))
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (flatten)
                                                                  (("4"
                                                                    (hide
                                                                     (-3
                                                                      3))
                                                                    (("4"
                                                                      (grind
                                                                       :exclude
                                                                       ("tan_0_pi2"
                                                                        "pi_lb_est"
                                                                        "tan_npi2_pi2"
                                                                        "Tan"))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 -6 1))
                                                            (("2"
                                                              (grind
                                                               :exclude
                                                               ("tan_0_pi2"
                                                                "pi_lb_est"
                                                                "tan_npi2_pi2"
                                                                "Tan"))
                                                              (("2"
                                                                (decompose-equality)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (invoke
                                                         (case
                                                          "%1 << %2")
                                                         (! 1 1)
                                                         (! 1 2 1))
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (grind
                                                             :exclude
                                                             ("tan_0_pi2"
                                                              "Intersection"
                                                              "pi_lb_est"
                                                              "Neg"))
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "Neg_Incl")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (invoke
                                                                     (inst
                                                                      -
                                                                      "%1"
                                                                      "%2"
                                                                      "n")
                                                                     (!
                                                                      1
                                                                      1
                                                                      1)
                                                                     (!
                                                                      1
                                                                      2
                                                                      1))
                                                                    (("2"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (expand
                                                                         "Tan"
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (invoke
                                                                           (case
                                                                            "%1")
                                                                           (!
                                                                            -1
                                                                            1
                                                                            1))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "Tan"
                                                                               -2)
                                                                              (("1"
                                                                                (invoke
                                                                                 (case
                                                                                  "%1")
                                                                                 (!
                                                                                  -2
                                                                                  2
                                                                                  1))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind
                                                                                     :exclude
                                                                                     ("tan_0_pi2"
                                                                                      "pi_lb_est"))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-2
                                                                              1))
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "Neg")
                                                                        (("2"
                                                                          (expand
                                                                           "Proper?")
                                                                          (("2"
                                                                            (expand
                                                                             "[||]")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "Tan_proper")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (hide
                                                                               (-2
                                                                                2
                                                                                3))
                                                                              (("3"
                                                                                (grind
                                                                                 :exclude
                                                                                 ("tan_0_pi2"
                                                                                  "pi_lb_est"
                                                                                  "tan_npi2_pi2"))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide
                                                                         (-2
                                                                          2))
                                                                        (("4"
                                                                          (grind
                                                                           :exclude
                                                                           ("tan_0_pi2"
                                                                            "pi_lb_est"
                                                                            "tan_npi2_pi2"))
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (hide
                                                                         (-2
                                                                          2))
                                                                        (("5"
                                                                          (grind
                                                                           :exclude
                                                                           ("tan_0_pi2"
                                                                            "pi_lb_est"
                                                                            "tan_npi2_pi2"))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (rewrite
                                                         "tan_npi2_pi2_union")
                                                        (("1"
                                                          (case
                                                           "FORALL (XX,YY,WW,ZZ:Interval): XX<<WW AND YY<<ZZ IMPLIES Union(XX,YY) << Union(WW,ZZ)")
                                                          (("1"
                                                            (rewrite
                                                             -1)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (hide
                                                                 -3)
                                                                (("1"
                                                                  (lemma
                                                                   "Neg_Incl")
                                                                  (("1"
                                                                    (rewrite
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (invoke
                                                                         (inst-cp
                                                                          -
                                                                          "%1"
                                                                          "%2"
                                                                          "n")
                                                                         (!
                                                                          1
                                                                          1
                                                                          1)
                                                                         (!
                                                                          1
                                                                          2
                                                                          1))
                                                                        (("1"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (expand
                                                                             "Tan"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (invoke
                                                                               (case
                                                                                "%1")
                                                                               (!
                                                                                -1
                                                                                1
                                                                                1))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "Tan"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (invoke
                                                                                     (case
                                                                                      "%1")
                                                                                     (!
                                                                                      -2
                                                                                      2
                                                                                      1))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind
                                                                                         :exclude
                                                                                         ("tan_0_pi2"
                                                                                          "pi_lb_est"
                                                                                          "tan_npi2_pi2"))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind
                                                                                   :exclude
                                                                                   ("tan_0_pi2"
                                                                                    "pi_lb_est"
                                                                                    "tan_npi2_pi2"))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-1
                                                                              -2
                                                                              -6
                                                                              2))
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"
                                                                                "tan_npi2_pi2"))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (lemma
                                                                               "Tan_proper")
                                                                              (("3"
                                                                                (rewrite
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   (-1
                                                                                    -2
                                                                                    -3
                                                                                    -7
                                                                                    2))
                                                                                  (("1"
                                                                                    (grind
                                                                                     :exclude
                                                                                     ("tan_0_pi2"
                                                                                      "pi_lb_est"
                                                                                      "tan_npi2_pi2"))
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind
                                                                                     :exclude
                                                                                     ("tan_0_pi2"
                                                                                      "pi_lb_est"
                                                                                      "tan_npi2_pi2"))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide-all-but
                                                                             (-7
                                                                              -8
                                                                              1))
                                                                            (("4"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"
                                                                                "tan_npi2_pi2"))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("5"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"
                                                                                "tan_npi2_pi2"))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (invoke
                                                               (inst
                                                                -
                                                                "%1"
                                                                "%2"
                                                                "n")
                                                               (!
                                                                1
                                                                1
                                                                1)
                                                               (!
                                                                1
                                                                2
                                                                1))
                                                              (("2"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (expand
                                                                   "Tan"
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1")
                                                                     (!
                                                                      -1
                                                                      1
                                                                      1))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "Tan"
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (invoke
                                                                           (case
                                                                            "%1")
                                                                           (!
                                                                            -2
                                                                            2
                                                                            1))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind
                                                                               :exclude
                                                                               ("tan_0_pi2"
                                                                                "pi_lb_est"
                                                                                "tan_npi2_pi2"))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind
                                                                         :exclude
                                                                         ("tan_0_pi2"
                                                                          "pi_lb_est"
                                                                          "tan_npi2_pi2"))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -3
                                                                    2
                                                                    3))
                                                                  (("2"
                                                                    (grind
                                                                     :exclude
                                                                     ("tan_0_pi2"
                                                                      "pi_lb_est"
                                                                      "tan_npi2_pi2"))
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (rewrite
                                                                   "Tan_proper")
                                                                  (("1"
                                                                    (hide
                                                                     (-1
                                                                      -3
                                                                      2
                                                                      3
                                                                      4))
                                                                    (("1"
                                                                      (grind
                                                                       :exclude
                                                                       ("tan_0_pi2"
                                                                        "pi_lb_est"
                                                                        "tan_npi2_pi2"))
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind
                                                                       :exclude
                                                                       ("tan_0_pi2"
                                                                        "pi_lb_est"
                                                                        "tan_npi2_pi2"))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    -3
                                                                    2
                                                                    3))
                                                                  (("4"
                                                                    (grind
                                                                     :exclude
                                                                     ("tan_0_pi2"
                                                                      "pi_lb_est"
                                                                      "tan_npi2_pi2"))
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("5"
                                                                    (grind
                                                                     :exclude
                                                                     ("tan_0_pi2"
                                                                      "pi_lb_est"
                                                                      "tan_npi2_pi2"))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           (-2 -5 2))
                                                          (("2"
                                                            (grind
                                                             :exclude
                                                             ("tan_0_pi2"
                                                              "pi_lb_est"
                                                              "tan_npi2_pi2"))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (hide
                                                         (-1 -4 2))
                                                        (("4"
                                                          (grind
                                                           :exclude
                                                           ("tan_0_pi2"
                                                            "pi_lb_est"
                                                            "tan_npi2_pi2"))
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -3)
                                          (("2"
                                            (grind
                                             :exclude
                                             ("tan_0_pi2"
                                              "pi_lb_est"
                                              "tan_npi2_pi2"))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Proper?")
                                  (("2"
                                    (expand "EmptyInterval")
                                    (("2"
                                      (expand "[||]")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Neg const-decl "Interval" interval nil)
    (cos_ub_a0 formula-decl nil trig_approx "trig_fnd/")
    (cos_lb_a0 formula-decl nil trig_approx "trig_fnd/")
    (sin_ub_a0 formula-decl nil trig_approx "trig_fnd/")
    (Neg_Incl formula-decl nil interval nil)
    (Union const-decl "Interval" interval nil)
    (Union_Incl_right formula-decl nil interval nil)
    (Incl_trans formula-decl nil interval nil)
    (Intersection const-decl "Interval" interval nil)
    (|##| const-decl "bool" interval nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (sin_approx_a0 formula-decl nil trig_approx "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (sin_ub_increasing formula-decl nil trig_approx "trig_fnd/")
    (cos_lb const-decl "real" trig_approx "trig_fnd/")
    (sin_ub const-decl "real" trig_approx "trig_fnd/")
    (sin_lb_a0 formula-decl nil trig_approx "trig_fnd/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (cos_ub_nn_strict_decreasing formula-decl nil trig_approx
     "trig_fnd/")
    (sin_lb_increasing formula-decl nil trig_approx "trig_fnd/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (cos_ub const-decl "real" trig_approx "trig_fnd/")
    (sin_lb const-decl "real" trig_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_lbn const-decl "real" atan_approx "trig_fnd/")
    (cos_lb_pi2_pos formula-decl nil trig_approx "trig_fnd/")
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (cos_bounds formula-decl nil trig_approx "trig_fnd/")
    (EmptyInterval const-decl "Interval" interval nil)
    (Interval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (<< const-decl "bool" interval nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx
     "trig_fnd/"))
   shostak))
 (Atan_inclusion 0
  (Atan_inclusion-2 nil 3318100316
   ("" (skeep)
    (("" (expand "##")
      (("" (expand* "atan" "Atan")
        (("" (flatten)
          (("" (assert)
            (("" (lemma "atan_bounds")
              (("" (split)
                (("1" (inst -1 "n" "lb(X)")
                  (("1" (flatten)
                    (("1" (lemma "atan_strict_increasing")
                      (("1" (expand "strict_increasing?")
                        (("1" (inst -1 "lb(X)" "x")
                          (("1" (assert)
                            (("1" (expand "atan")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "n" "ub(X)")
                  (("2" (flatten)
                    (("2" (lemma "atan_strict_increasing")
                      (("2" (expand "strict_increasing?")
                        (("2" (inst -1 "x" "ub(X)")
                          (("2" (expand "atan")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((|##| const-decl "bool" interval nil)
    (atan_bounds formula-decl nil atan_approx "trig_fnd/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Interval type-eq-decl nil interval nil)
    (atan_strict_increasing formula-decl nil atan "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (atan const-decl "real_abs_lt_pi2" atan "trig_fnd/")
    (Atan const-decl "Interval" interval_trig nil))
   nil))
 (Strict_Tan 0
  (Strict_Tan-3 nil 3567450715
   ("" (skeep)
    (("" (case "Proper?(X)")
      (("1" (case "ub(X) ## X")
        (("1" (case "lb(X) ## X")
          (("1" (case "tan(lb(X)) < tan(ub(X))")
            (("1" (case "tan(lb(X)) ## Tan(n)(X)")
              (("1" (case "tan(ub(X)) ## Tan(n)(X)")
                (("1" (lemma "Strict_Lt")
                  (("1" (inst -1 "Tan(n)(X)" _ _)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (rewrite "Tan_inclusion") nil nil))
                nil)
               ("2" (rewrite "Tan_inclusion") nil nil))
              nil)
             ("2" (expand "TAN?")
              (("2" (expand "StrictInterval?" -5)
                (("2" (lemma "tan_increasing")
                  (("2" (inst -1 "ub(X)" "lb(X)")
                    (("2" (assert)
                      (("2" (expand "<<")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (lemma "pi_bounds")
                              (("2"
                                (inst?)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lemma "Tan_pi2_def")
                                  (("2"
                                    (inst -1 "X" "n+Cos_pos_n" "ub(X)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "Tan_pi2_def")
              (("3" (inst -1 "X" "n+Cos_pos_n" "ub(X)")
                (("3" (assert)
                  (("3" (lemma "pi_lb_est_le")
                    (("3" (hide (2 3))
                      (("3" (inst?)
                        (("3" (grind :exclude ("pi_lb_est" "pi_lbn"))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (lemma "Tan_pi2_def")
              (("4" (inst -1 "X" "n+Cos_pos_n" "lb(X)")
                (("4" (assert)
                  (("4" (hide (2 3))
                    (("4" (lemma "pi_lb_est_le")
                      (("4" (inst?)
                        (("4" (grind :exclude ("pi_lb_est" "pi_lbn"))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "lb_inclusion") nil nil))
          nil)
         ("2" (rewrite "ub_inclusion") nil nil))
        nil)
       ("2" (rewrite "Strict_Proper") nil nil))
      nil))
    nil)
   ((Proper? const-decl "bool" interval nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil)
    (ub_inclusion formula-decl nil interval nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Integral const-decl "real" integral_def "analysis/")
    (atan_value const-decl "real" atan "trig_fnd/")
    ([\|\|] const-decl "Interval" interval nil)
    (pi_lb_est_le formula-decl nil trig_approx "trig_fnd/")
    (TAN? const-decl "bool" interval_trig nil)
    (tan_increasing formula-decl nil trig_ineq "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lb_interval formula-decl nil interval nil)
    (ub_interval formula-decl nil interval nil)
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (Tan_pi2_def formula-decl nil interval_trig nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi const-decl "posreal" atan "trig_fnd/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< const-decl "bool" interval nil)
    (StrictInterval? const-decl "bool" interval nil)
    (Tan const-decl "Interval" interval_trig nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Tan_inclusion formula-decl nil interval_trig nil)
    (Strict_Lt formula-decl nil interval nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (Tan? const-decl "bool" sincos_def "trig_fnd/")
    (tan const-decl "real" sincos_def "trig_fnd/")
    (lb_inclusion formula-decl nil interval nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (|##| const-decl "bool" interval nil)
    (StrictInterval type-eq-decl nil interval nil)
    (Strict_Proper judgement-tcc nil interval nil))
   nil)
  (Strict_Tan-1 nil 3567450681
   ("" (skeep)
    (("" (expand "TAN?")
      (("" (case "Proper?(X)")
        (("1" (case "ub(X) ## X")
          (("1" (case "lb(X) ## X")
            (("1" (case "tan(lb(X)) < tan(ub(X))")
              (("1" (case "tan(lb(X)) ## Tan(n)(X)")
                (("1" (case "tan(ub(X)) ## Tan(n)(X)")
                  (("1" (lemma "Strict_Lt")
                    (("1" (inst -1 "Tan(n)(X)" _ _)
                      (("1" (inst?) (("1" (assert) nil)))))))
                   ("2" (rewrite "Tan_inclusion") nil)))
                 ("2" (rewrite "Tan_inclusion") nil)))
               ("2" (expand "StrictInterval?" -5)
                (("2" (lemma "tan_increasing")
                  (("2" (inst -1 "ub(X)" "lb(X)")
                    (("2" (assert)
                      (("2" (expand "<<")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (lemma "pi_bounds")
                              (("2"
                                (inst?)
                                (("1" (flatten) (("1" (assert) nil)))
                                 ("2"
                                  (lemma "Tan_pi2_def")
                                  (("2"
                                    (inst -1 "X" "n+Cos_pos_n" "ub(X)")
                                    (("2"
                                      (assert)
                                      nil)))))))))))))))))))))))
               ("3" (lemma "Tan_pi2_def")
                (("3" (inst -1 "X" "n+Cos_pos_n" "ub(X)")
                  (("3" (assert)
                    (("3" (lemma "pi_lb_est_le")
                      (("3" (hide (2 3))
                        (("3" (inst?)
                          (("3" (grind :exclude ("pi_lb_est" "pi_lbn"))
                            nil)))))))))))))
               ("4" (lemma "Tan_pi2_def")
                (("4" (inst -1 "X" "n+Cos_pos_n" "lb(X)")
                  (("4" (assert)
                    (("4" (hide (2 3))
                      (("4" (lemma "pi_lb_est_le")
                        (("4" (inst?)
                          (("4" (grind :exclude ("pi_lb_est" "pi_lbn"))
                            nil)))))))))))))))
             ("2" (rewrite "lb_inclusion") nil)))
           ("2" (rewrite "ub_inclusion") nil)))
         ("2" (rewrite "Strict_Proper") nil))))))
    nil)
   nil nil)
  (Strict_Tan-2 nil 3320583246
   ("" (skeep)
    (("" (case "Proper?(X)")
      (("1" (case "ub(X) ## X")
        (("1" (case "lb(X) ## X")
          (("1" (case "tan(lb(X)) < tan(ub(X))")
            (("1" (case "tan(lb(X)) ## Tan(n)(X)")
              (("1" (case "tan(ub(X)) ## Tan(n)(X)")
                (("1" (lemma "Strict_Lt")
                  (("1" (inst -1 "Tan(n)(X)" _ _)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (rewrite "Tan_inclusion") nil nil))
                nil)
               ("2" (rewrite "Tan_inclusion") nil nil))
              nil)
             ("2" (expand "StrictInterval?" -5)
              (("2" (lemma "tan_increasing")
                (("2" (inst -1 "ub(X)" "lb(X)")
                  (("2" (assert)
                    (("2" (expand "<<")
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (lemma "pi_bounds")
                            (("2" (inst?)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (lemma "Tan_pi2_def")
                                (("2"
                                  (inst -1 "X" "n+Cos_pos_n" "ub(X)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "Tan_pi2_def")
              (("3" (inst -1 "X" "n+Cos_pos_n" "ub(X)")
                (("3" (assert)
                  (("3" (lemma "pi_lb_est_le")
                    (("3" (hide (2 3))
                      (("3" (inst?)
                        (("3" (grind :exclude ("pi_lb_est" "pi_lbn"))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (lemma "Tan_pi2_def")
              (("4" (inst -1 "X" "n+Cos_pos_n" "lb(X)")
                (("4" (assert)
                  (("4" (hide (2 3))
                    (("4" (lemma "pi_lb_est_le")
                      (("4" (inst?)
                        (("4" (grind :exclude ("pi_lb_est" "pi_lbn"))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "lb_inclusion") nil nil))
          nil)
         ("2" (rewrite "ub_inclusion") nil nil))
        nil)
       ("2" (rewrite "Strict_Proper") nil nil))
      nil))
    nil)
   ((Proper? const-decl "bool" interval nil)
    (Interval type-eq-decl nil interval nil)
    (ub_inclusion formula-decl nil interval nil)
    (Integral const-decl "real" integral_def "analysis/")
    (atan_value const-decl "real" atan "trig_fnd/")
    (pi_lb_est_le formula-decl nil trig_approx "trig_fnd/")
    (StrictInterval? const-decl "bool" interval nil)
    (<< const-decl "bool" interval nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (pi_ub_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_lb_pos application-judgement "posreal" atan_approx "trig_fnd/")
    (pi_bounds formula-decl nil atan_approx "trig_fnd/")
    (ub_interval formula-decl nil interval nil)
    (lb_interval formula-decl nil interval nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (tan_increasing formula-decl nil trig_ineq "trig_fnd/")
    (Strict_Lt formula-decl nil interval nil)
    (Tan? const-decl "bool" sincos_def "trig_fnd/")
    (tan const-decl "real" sincos_def "trig_fnd/")
    (lb_inclusion formula-decl nil interval nil)
    (|##| const-decl "bool" interval nil)
    (StrictInterval type-eq-decl nil interval nil)
    (Strict_Proper judgement-tcc nil interval nil))
   nil))
 (Proper_Sin 0
  (Proper_Sin-1 nil 3579730810
   ("" (skeep :preds? t)
    (("" (lemma "Proper_Member")
      (("" (inst?)
        (("" (assert)
          (("" (skeep)
            (("" (lemma "Member_Proper")
              (("" (inst? -1 :where 1)
                (("" (inst -1 "sin(x)")
                  (("" (assert)
                    (("" (rewrite "Sin_inclusion") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper_Member formula-decl nil interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Member_Proper formula-decl nil interval nil)
    (sin const-decl "real" sincos_def "trig_fnd/")
    (Sin_inclusion formula-decl nil interval_trig nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (Sin const-decl "Interval" interval_trig nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ProperInterval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (Proper_Cos 0
  (Proper_Cos-2 nil 3579731104
   ("" (skeep :preds? t)
    (("" (lemma "Proper_Member")
      (("" (inst?)
        (("" (assert)
          (("" (skeep)
            (("" (lemma "Member_Proper")
              (("" (inst? -1 :where 1)
                (("" (inst -1 "cos(x)")
                  (("" (assert)
                    (("" (rewrite "Cos_inclusion") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper_Member formula-decl nil interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Member_Proper formula-decl nil interval nil)
    (cos const-decl "real" sincos_def "trig_fnd/")
    (Cos_inclusion formula-decl nil interval_trig nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (Cos const-decl "Interval" interval_trig nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ProperInterval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (Proper_Tan 0
  (Proper_Tan-1 nil 3579731179
   ("" (skeep :preds? t)
    (("" (lemma "Proper_Member")
      (("" (inst?)
        (("" (assert)
          (("" (skeep)
            (("" (lemma "Member_Proper")
              (("" (inst? -1 :where 1)
                (("" (inst -1 "tan(x)")
                  (("1" (assert)
                    (("1" (rewrite "Tan_inclusion") nil nil)) nil)
                   ("2" (lemma "TAN_Tan")
                    (("2" (inst?)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper_Member formula-decl nil interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Member_Proper formula-decl nil interval nil)
    (Tan? const-decl "bool" sincos_def "trig_fnd/")
    (x skolem-const-decl "real" interval_trig nil)
    (tan const-decl "real" sincos_def "trig_fnd/")
    (Tan_inclusion formula-decl nil interval_trig nil)
    (TAN_Tan formula-decl nil interval_trig nil)
    (Tan const-decl "Interval" interval_trig nil)
    (TAN? const-decl "bool" interval_trig nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ProperInterval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil)
  (Proper_Tan-2 nil 3579730810
   ("" (skeep :preds? t)
    (("" (lemma "Proper_Member")
      (("" (inst?)
        (("" (assert)
          (("" (skeep -1)
            (("" (lemma "Member_Proper")
              (("" (inst? -1 :where 1)
                (("" (inst -1 "tan(x)")
                  (("1" (assert)
                    (("1" (rewrite "Tan_inclusion") nil nil)) nil)
                   ("2" (lemma "TAN_Tan")
                    (("2" (inst?)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper_Member formula-decl nil interval nil)
    (Member_Proper formula-decl nil interval nil)
    (Tan? const-decl "bool" sincos_def "trig_fnd/")
    (tan const-decl "real" sincos_def "trig_fnd/")
    (ProperInterval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (Interval type-eq-decl nil interval nil))
   nil))
 (Proper_Atan 0
  (Proper_Atan-1 nil 3579730810
   ("" (skeep :preds? t)
    (("" (lemma "Proper_Member")
      (("" (inst?)
        (("" (assert)
          (("" (skeep)
            (("" (lemma "Member_Proper")
              (("" (inst? -1 :where 1)
                (("" (inst -1 "atan(x)")
                  (("" (assert)
                    (("" (rewrite "Atan_inclusion") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Proper_Member formula-decl nil interval nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Member_Proper formula-decl nil interval nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (real_abs_lt_pi2 nonempty-type-eq-decl nil atan "trig_fnd/")
    (atan const-decl "real_abs_lt_pi2" atan "trig_fnd/")
    (Atan_inclusion formula-decl nil interval_trig nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (Atan const-decl "Interval" interval_trig nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (ProperInterval type-eq-decl nil interval nil)
    (Proper? const-decl "bool" interval nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Interval type-eq-decl nil interval nil)
    (real nonempty-type-from-decl nil reals nil))
   nil)))

