(scott_product
 (product_order_TCC1 0
  (product_order_TCC1-1 nil 3353124202
   ("" (skosimp)
    (("" (typepred "le1!1")
      (("" (typepred "le2!1")
        (("" (expand "partial_order?")
          (("" (expand "preorder?")
            (("" (flatten)
              (("" (split)
                (("1" (expand "reflexive?")
                  (("1" (skosimp)
                    (("1" (inst - "x!1`2")
                      (("1" (inst - "x!1`1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "transitive?")
                  (("2" (skosimp)
                    (("2" (inst - "x!1`2" "y!1`2" "z!1`2")
                      (("2" (inst - "x!1`1" "y!1`1" "z!1`1")
                        (("2" (assert) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "antisymmetric?")
                  (("3" (skosimp)
                    (("3" (inst - "x!1`2" "y!1`2")
                      (("3" (inst - "x!1`1" "y!1`1")
                        (("3" (assert)
                          (("3" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (T1 formal-type-decl nil scott_product nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (antisymmetric? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (T2 formal-type-decl nil scott_product nil))
   nil))
 (IMP_scott_TCC1 0
  (IMP_scott_TCC1-1 nil 3508838560
   ("" (typepred "le1")
    (("" (expand "directed_complete_partial_order?")
      (("" (flatten) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T1 formal-type-decl nil scott_product nil)
    (pred type-eq-decl nil defined_types nil)
    (directed_complete_partial_order? const-decl "bool" directed_orders
     "orders/")
    (le1 formal-const-decl "(directed_complete_partial_order?[T1])"
     scott_product nil))
   nil))
 (IMP_scott_TCC2 0
  (IMP_scott_TCC2-1 nil 3515324483
   ("" (typepred "le2")
    (("" (expand "directed_complete_partial_order?")
      (("" (flatten) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T2 formal-type-decl nil scott_product nil)
    (pred type-eq-decl nil defined_types nil)
    (directed_complete_partial_order? const-decl "bool" directed_orders
     "orders/")
    (le2 formal-const-decl "(directed_complete_partial_order?[T2])"
     scott_product nil))
   nil))
 (IMP_scott_TCC3 0
  (IMP_scott_TCC3-1 nil 3515324483
   ("" (typepred "product_order(le1, le2)")
    (("" (expand "directed_complete_partial_order?")
      (("" (hide -1)
        (("" (expand "product_order")
          (("" (lemma "product_preserves_directed_complete[T1,T2]")
            (("" (inst -1 "le1" "le2")
              (("1" (expand "*") (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (assert)
                  (("2" (typepred "le2")
                    (("2" (expand "directed_complete_partial_order?")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred "le1")
                  (("3" (expand "directed_complete_partial_order?")
                    (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (directed_complete? const-decl "bool" directed_orders "orders/")
    (* const-decl "bool" product_orders "orders/")
    (product_preserves_directed_complete judgement-tcc nil
     product_orders "orders/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T1 formal-type-decl nil scott_product nil)
    (T2 formal-type-decl nil scott_product nil)
    (pred type-eq-decl nil defined_types nil)
    (partial_order? const-decl "bool" orders nil)
    (product_order const-decl "(partial_order?[[T1, T2]])"
     scott_product nil)
    (directed_complete_partial_order? const-decl "bool" directed_orders
     "orders/")
    (le1 formal-const-decl "(directed_complete_partial_order?[T1])"
     scott_product nil)
    (le2 formal-const-decl "(directed_complete_partial_order?[T2])"
     scott_product nil))
   nil)))

