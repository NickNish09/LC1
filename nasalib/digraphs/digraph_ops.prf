(digraph_ops
 (union_TCC1 0
  (union_TCC1-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "union")
      (("" (expand "member")
        (("" (split -1)
          (("1" (typepred "G1!1")
            (("1" (inst?)
              (("1" (assert)
                (("1" (flatten) (("1" (assert) nil)))))))))
           ("2" (typepred "G2!1")
            (("2" (inst?)
              (("2" (assert)
                (("2" (flatten) (("2" (assert) nil))))))))))))))))
    nil)
   ((union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraph_ops nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (member const-decl "bool" sets nil))
   nil))
 (del_vert_TCC1 0
  (del_vert_TCC1-1 nil 3253634004
   ("" (skosimp*)
    (("" (lemma "finite_subset[edgetype[T]]")
      (("" (inst?)
        (("" (inst - "edges(G!1)")
          (("" (assert) (("" (hide 2) (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil digraph_ops nil)
    (finite_subset formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (in? const-decl "bool" pairs nil) (pair type-eq-decl nil pairs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (del_vert_TCC2 0
  (del_vert_TCC2-1 nil 3307703836 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (T formal-type-decl nil digraph_ops nil)
    (in? const-decl "bool" pairs nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil))
 (del_edge_TCC1 0
  (del_edge_TCC1-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "remove")
      (("" (flatten)
        (("" (expand "member")
          (("" (typepred "G!1")
            (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   ((remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraph_ops nil)
    (edgetype type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil))
   nil))
 (del_vert_still_in 0
  (del_vert_still_in-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "del_vert")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil))))))))
    nil)
   ((del_vert const-decl "digraph[T]" digraph_ops nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil))
 (size_del_vert 0
  (size_del_vert-1 nil 3253634004
   ("" (skosimp*)
    (("" (typepred "v!1")
      (("" (expand "del_vert")
        (("" (expand "size") (("" (rewrite "card_remove") nil))))))))
    nil)
   ((digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil digraph_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (size const-decl "nat" digraphs nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil))
   nil))
 (del_vert_le 0
  (del_vert_le-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "size")
      (("" (expand "del_vert")
        (("" (rewrite "card_remove")
          (("" (lift-if) (("" (ground) nil))))))))))
    nil)
   ((size const-decl "nat" digraphs nil)
    (card_remove formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (predigraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (T formal-type-decl nil digraph_ops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil))
   nil))
 (del_vert_ge 0
  (del_vert_ge-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "size")
      (("" (expand "del_vert")
        (("" (rewrite "card_remove")
          (("" (lift-if) (("" (ground) nil))))))))))
    nil)
   ((size const-decl "nat" digraphs nil)
    (card_remove formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (predigraph type-eq-decl nil digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (T formal-type-decl nil digraph_ops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil))
   nil))
 (edge_in_del_vert 0
  (edge_in_del_vert-1 nil 3253634004
   ("" (skosimp*) (("" (expand "del_vert") (("" (assert) nil)))) nil)
   ((del_vert const-decl "digraph[T]" digraph_ops nil)) nil))
 (edges_del_vert 0
  (edges_del_vert-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "del_vert") (("" (flatten) (("" (propax) nil))))))
    nil)
   ((del_vert const-decl "digraph[T]" digraph_ops nil)) nil))
 (del_vert_comm 0
  (del_vert_comm-1 nil 3253634004
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (expand "del_vert")
        (("1" (apply-extensionality 1 :hide? t)
          (("1" (iff 1) (("1" (ground) nil)))))))
       ("2" (expand "del_vert")
        (("2" (apply-extensionality 1 :hide? t)
          (("2" (grind) nil))))))))
    nil)
   ((T formal-type-decl nil digraph_ops nil)
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (in? const-decl "bool" pairs nil) (pair type-eq-decl nil pairs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil))
   nil))
 (del_vert_empty? 0
  (del_vert_empty?-1 nil 3253634004
   ("" (skosimp*)
    (("" (lemma "card_empty?[T]")
      (("" (inst?)
        (("" (replace -1 * rl)
          (("" (hide -1)
            (("" (expand "singleton?")
              (("" (expand "size")
                (("" (lemma "size_del_vert")
                  (("" (inst?)
                    (("" (expand "size")
                      (("" (assert) nil))))))))))))))))))))
    nil)
   ((T formal-type-decl nil digraph_ops nil)
    (card_empty? formula-decl nil finite_sets nil)
    (singleton? const-decl "bool" digraphs nil)
    (size_del_vert formula-decl nil digraph_ops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (size const-decl "nat" digraphs nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (del_edge_lem 0
  (del_edge_lem-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "member")
      (("" (expand "del_edge")
        (("" (expand "remove") (("" (propax) nil))))))))
    nil)
   ((member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil))
   nil))
 (del_edge_lem2 0
  (del_edge_lem2-1 nil 3253634004
   ("" (skosimp*) (("" (grind) nil)) nil)
   ((finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil))
   nil))
 (del_edge_lem3 0
  (del_edge_lem3-1 nil 3253634004
   ("" (skosimp*) (("" (grind) nil)) nil)
   ((finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil))
   nil))
 (del_edge_lem5 0
  (del_edge_lem5-1 nil 3253634004
   ("" (skosimp*)
    (("" (apply-extensionality 2 :hide? t)
      (("1" (apply-extensionality 1 :hide? t)
        (("1" (expand "del_edge") (("1" (grind) nil)))))
       ("2" (expand "del_edge") (("2" (propax) nil))))))
    nil)
   ((T formal-type-decl nil digraph_ops nil)
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil))
   nil))
 (vert_del_edge 0
  (vert_del_edge-1 nil 3253634004 ("" (grind) nil nil)
   ((del_edge const-decl "digraph[T]" digraph_ops nil)) nil))
 (del_edge_num 0
  (del_edge_num-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "num_edges")
      ((""
        (case-replace
         "edges(del_edge(G!1,e!1)) = remove(e!1,edges(G!1))")
        (("1" (rewrite "card_remove[edgetype[T]]") nil)
         ("2" (hide 2)
          (("2" (apply-extensionality :hide? t)
            (("2" (iff 1)
              (("2" (prop)
                (("1" (lemma "del_edge_lem2")
                  (("1" (inst?)
                    (("1" (lemma "del_edge_lem")
                      (("1" (inst?)
                        (("1" (expand "member")
                          (("1" (assert)
                            (("1" (grind :exclude ("edges" "del_edge"))
                              nil)))))))))))))
                 ("2" (rewrite "del_edge_lem3")
                  (("1" (hide 2) (("1" (grind :exclude "edges") nil)))
                   ("2" (hide 2)
                    (("2" (grind :exclude "edges")
                      nil))))))))))))))))))
    nil)
   ((num_edges const-decl "nat" digraph_ops nil)
    (del_edge_lem3 formula-decl nil digraph_ops nil)
    (/= const-decl "boolean" notequal nil)
    (del_edge_lem2 formula-decl nil digraph_ops nil)
    (del_edge_lem formula-decl nil digraph_ops nil)
    (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (remove const-decl "set" sets nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil digraph_ops nil)
    (finite_remove application-judgement "finite_set" finite_sets nil))
   nil))
 (del_edge_singleton 0
  (del_edge_singleton-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "singleton?")
      (("" (expand "size")
        (("" (expand "del_edge") (("" (propax) nil))))))))
    nil)
   ((singleton? const-decl "bool" digraphs nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (size const-decl "nat" digraphs nil))
   nil))
 (del_vert_edge_comm 0
  (del_vert_edge_comm-1 nil 3253634004
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (apply-extensionality :hide? t) (("1" (grind) nil)))
       ("2" (expand "del_edge")
        (("2" (expand "del_vert") (("2" (propax) nil))))))))
    nil)
   ((T formal-type-decl nil digraph_ops nil)
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (in? const-decl "bool" pairs nil) (set type-eq-decl nil sets nil))
   nil))
 (del_vert_edge 0
  (del_vert_edge-1 nil 3253634004
   ("" (skosimp*)
    (("" (rewrite "del_vert_edge_comm")
      (("" (apply-extensionality 1 :hide? t)
        (("1" (apply-extensionality 1 :hide? t) (("1" (grind) nil)))
         ("2" (expand "del_edge") (("2" (propax) nil))))))))
    nil)
   ((del_vert_edge_comm formula-decl nil digraph_ops nil)
    (T formal-type-decl nil digraph_ops nil)
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (set type-eq-decl nil sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (in? const-decl "bool" pairs nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil))
   nil)))

