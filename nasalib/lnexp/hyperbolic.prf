(hyperbolic
 (cosh_TCC1 0
  (cosh_TCC1-1 nil 3253390561
   ("" (skosimp*)
    (("" (lemma "trichotomy" ("x" "x!1"))
      (("" (lemma "exp_diff" ("x" "0" "y" "x!1"))
        (("" (rewrite "exp_0")
          (("" (replace -1 1)
            (("" (lemma "div_mult_pos_ge1")
              (("" (inst - "2" "1" "exp(x!1) + 1 / exp(x!1)")
                (("" (replace -1 1)
                  (("" (split -3)
                    (("1" (lemma "exp_strict_increasing")
                      (("1" (expand "strict_increasing?")
                        (("1" (inst - "0" "x!1")
                          (("1" (rewrite "exp_0")
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "sq_lt"
                                 ("nnb" "exp(x!1)-1" "nna" "0"))
                                (("1"
                                  (expand "sq")
                                  (("1"
                                    (lemma
                                     "div_mult_pos_lt1"
                                     ("z"
                                      "-1"
                                      "py"
                                      "exp(x!1)"
                                      "x"
                                      "exp(x!1)-2"))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1)
                      (("2" (rewrite "exp_0") (("2" (assert) nil nil))
                        nil))
                      nil)
                     ("3" (lemma "exp_strict_increasing")
                      (("3" (expand "strict_increasing?")
                        (("3" (inst - "x!1" "0")
                          (("3" (rewrite "exp_0")
                            (("3" (assert)
                              (("3"
                                (lemma
                                 "sq_lt"
                                 ("nna" "0" "nnb" "1-exp(x!1)"))
                                (("3"
                                  (expand "sq")
                                  (("3"
                                    (lemma
                                     "div_mult_pos_lt1"
                                     ("py"
                                      "exp(x!1)"
                                      "z"
                                      "-1"
                                      "x"
                                      "exp(x!1)-2"))
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (exp_0 formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_lt formula-decl nil sq "reals/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (exp_diff formula-decl nil ln_exp nil))
   shostak))
 (tanh_TCC1 0
  (tanh_TCC1-1 nil 3253429443
   ("" (skosimp*)
    (("" (typepred "cosh(x!1)") (("" (assert) nil nil)) nil)) nil)
   ((cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (tanh_TCC2 0
  (tanh_TCC2-1 nil 3253429443
   ("" (skosimp*)
    (("" (lemma "div_mult_pos_lt1")
      (("" (inst - "cosh(x!1)" "1" "sinh(x!1)")
        (("1" (lemma "div_mult_pos_lt2")
          (("1" (inst - "cosh(x!1)" "-1" "sinh(x!1)")
            (("1" (replace -1)
              (("1" (replace -2)
                (("1" (hide (-1 -2))
                  (("1" (expand "cosh")
                    (("1" (expand "sinh")
                      (("1" (typepred "exp(x!1)")
                        (("1" (typepred "exp(-x!1)")
                          (("1" (name-replace "EPX" "exp(x!1)")
                            (("1" (name-replace "EMX" "exp(-x!1)")
                              (("1"
                                (hide -3 -6)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "cosh(x!1)") (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "cosh(x!1)") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sinh const-decl "real" hyperbolic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (x!1 skolem-const-decl "real" hyperbolic nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (csch_TCC1 0
  (csch_TCC1-1 nil 3253429443
   ("" (skosimp*)
    (("" (expand "sinh")
      (("" (lemma "exp_diff" ("x" "0" "y" "n0x!1"))
        (("" (lemma "exp_0")
          (("" (replace -1 -2)
            (("" (replace -2 -3)
              (("" (rewrite "div_cancel3" -3)
                ((""
                  (lemma "minus_div1"
                   ("x" "exp(n0x!1)" "y" "1" "n0x" "1" "n0y"
                    "exp(n0x!1)"))
                  (("" (replace -1 -4)
                    (("" (rewrite "div_cancel3" -4)
                      (("" (lemma "exp_strict_increasing")
                        (("" (expand "strict_increasing?")
                          (("" (lemma "trichotomy" ("x" "2*n0x!1"))
                            ((""
                              (lemma "exp_sum"
                               ("x" "n0x!1" "y" "n0x!1"))
                              ((""
                                (replace -1 -7 rl)
                                ((""
                                  (split -2)
                                  (("1"
                                    (inst - "0" "2*n0x!1")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (inst - "n0x!1" "0")
                                    (("3"
                                      (replace -2)
                                      (("3"
                                        (hide -2)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (replace -6)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide -5)
                                                (("3"
                                                  (move-terms -3 l 2)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (replace -3 * rl)
                                                      (("3"
                                                        (hide -1 -2 -3)
                                                        (("3"
                                                          (lemma
                                                           "exp_neg")
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (grind-reals)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sinh const-decl "real" hyperbolic nil)
    (exp_0 formula-decl nil ln_exp nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_div1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (exp_sum formula-decl nil ln_exp nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_neg formula-decl nil ln_exp nil)
    (div_cancel4 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (trichotomy formula-decl nil real_axioms nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_diff formula-decl nil ln_exp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (sech_TCC1 0
  (sech_TCC1-1 nil 3253429443
   ("" (skosimp*)
    (("" (typepred "cosh(x!1)")
      ((""
        (lemma "both_sides_div_pos_ge2"
         ("py" "cosh(x!1)" "px" "1" "pz" "1"))
        (("1"
          (lemma "posreal_div_posreal_is_posreal"
           ("px" "1" "py" "cosh(x!1)"))
          (("1" (assert) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div_pos_ge2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   shostak))
 (coth_TCC1 0
  (coth_TCC1-1 nil 3253429443
   ("" (skosimp*)
    (("" (expand "tanh")
      (("" (expand "sinh")
        (("" (lemma "exp_diff" ("x" "0" "y" "n0x!1"))
          (("" (lemma "exp_0")
            (("" (replace -1 -2)
              (("" (replace -2 -3)
                (("" (rewrite "div_div2" -3)
                  ((""
                    (lemma "minus_div1"
                     ("x" "exp(n0x!1)" "n0x" "1" "y" "1" "n0y"
                      "exp(n0x!1)"))
                    (("" (replace -1 -4)
                      (("" (rewrite "div_div2" -4)
                        ((""
                          (lemma "exp_sum" ("x" "n0x!1" "y" "n0x!1"))
                          (("" (replace -1 -5 rl)
                            (("" (hide -1 -2 -4)
                              ((""
                                (lemma "exp_strict_increasing")
                                ((""
                                  (expand "strict_increasing?")
                                  ((""
                                    (lemma
                                     "trichotomy"
                                     ("x" "2*n0x!1"))
                                    ((""
                                      (split -1)
                                      (("1"
                                        (inst - "0" "2*n0x!1")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (inst - "2*n0x!1" "0")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tanh const-decl "real_abs_lt1" hyperbolic nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_diff formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_sum formula-decl nil ln_exp nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trichotomy formula-decl nil real_axioms nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (exp_0 formula-decl nil ln_exp nil)
    (sinh const-decl "real" hyperbolic nil))
   shostak))
 (coth_TCC2 0
  (coth_TCC2-1 nil 3253429443
   ("" (skosimp*)
    (("" (typepred "tanh(n0x!1)")
      (("" (lemma "coth_TCC1" ("nzx" "n0x!1"))
        (("" (lemma "trichotomy" ("x" "n0x!1"))
          (("" (case "strict_increasing?(sinh)")
            (("1" (expand "strict_increasing?")
              (("1" (case "sinh(0)=0")
                (("1" (expand "tanh")
                  (("1" (typepred "cosh(n0x!1)")
                    (("1" (split -4)
                      (("1" (inst - "0" "n0x!1")
                        (("1" (rewrite "div_div1")
                          (("1" (assert)
                            (("1" (replace -3 -4)
                              (("1"
                                (lemma "div_mult_pos_lt1")
                                (("1"
                                  (inst
                                   -
                                   "sinh(n0x!1)"
                                   "-1"
                                   "cosh(n0x!1)")
                                  (("1"
                                    (lemma "div_mult_pos_lt2")
                                    (("1"
                                      (inst
                                       -
                                       "sinh(n0x!1)"
                                       "1"
                                       "cosh(n0x!1)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (expand "cosh")
                                              (("1"
                                                (expand "sinh")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil)
                       ("3" (inst - "n0x!1" "0")
                        (("3" (replace -3 -4)
                          (("3" (assert)
                            (("3" (lemma "div_mult_neg_lt1")
                              (("3"
                                (rewrite "div_div1")
                                (("3"
                                  (inst
                                   -
                                   "sinh(n0x!1)"
                                   "-1"
                                   "cosh(n0x!1)")
                                  (("3"
                                    (lemma "div_mult_neg_lt2")
                                    (("3"
                                      (inst
                                       -
                                       "sinh(n0x!1)"
                                       "1"
                                       "cosh(n0x!1)")
                                      (("3"
                                        (replace -1)
                                        (("3"
                                          (replace -2)
                                          (("3"
                                            (hide (-1 -2))
                                            (("3"
                                              (expand "sinh")
                                              (("3"
                                                (expand "cosh")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "sinh" 1)
                  (("2" (rewrite "exp_0") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (lemma "exp_strict_increasing")
                (("2" (expand "strict_increasing?")
                  (("2" (expand "sinh")
                    (("2" (skosimp*)
                      (("2" (inst-cp - "x!1" "y!1")
                        (("2" (inst - "-y!1" "-x!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (sinh const-decl "real" hyperbolic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (div_mult_neg_lt2 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_neg_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (exp_0 formula-decl nil ln_exp nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (trichotomy formula-decl nil real_axioms nil))
   shostak))
 (posreal_csch_TCC1 0
  (posreal_csch_TCC1-1 nil 3253435075
   ("" (skosimp*)
    (("" (expand "csch")
      ((""
        (lemma "div_mult_pos_lt2" ("z" "1" "x" "0" "py" "sinh(px!1)"))
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (expand "sinh")
            (("2" (lemma "exp_diff" ("x" "0" "y" "px!1"))
              (("2" (rewrite "exp_0")
                (("2" (rewrite -1)
                  (("2" (lemma "div_mult_pos_lt2")
                    (("2" (inst - "2" "0" "exp(px!1)-1/exp(px!1)")
                      (("2"
                        (lemma "minus_div1"
                         ("x" "exp(px!1)" "n0x" "1" "y" "1" "n0y"
                          "exp(px!1)"))
                        (("2" (lemma "exp_strict_increasing")
                          (("2" (expand "strict_increasing?")
                            (("2" (inst - "0" "2*px!1")
                              (("2"
                                (rewrite "exp_0")
                                (("2"
                                  (lemma
                                   "exp_sum"
                                   ("x" "px!1" "y" "px!1"))
                                  (("2"
                                    (replace -1 -3 rl)
                                    (("2"
                                      (expand ">=" 1)
                                      (("2"
                                        (expand ">" 1)
                                        (("2"
                                          (expand "<=" 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -4 1)
                                              (("2"
                                                (replace -3 1)
                                                (("2"
                                                  (lemma
                                                   "posreal_div_posreal_is_posreal"
                                                   ("px"
                                                    "exp(2*px!1)-1"
                                                    "py"
                                                    "exp(px!1)"))
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((csch const-decl "real" hyperbolic nil)
    (exp_diff formula-decl nil ln_exp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp_sum formula-decl nil ln_exp nil)
    (<= const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_div1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_0 formula-decl nil ln_exp nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sinh const-decl "real" hyperbolic nil))
   shostak))
 (posreal_coth_TCC1 0
  (posreal_coth_TCC1-1 nil 3253435075
   ("" (expand "coth")
    (("" (skosimp*)
      (("" (typepred "tanh(px!1)")
        (("" (case "strict_increasing?(tanh)")
          (("1" (expand "strict_increasing?")
            (("1" (inst - "0" "px!1")
              (("1" (assert)
                (("1" (expand "tanh" -1 1)
                  (("1" (expand "sinh" -1 1)
                    (("1" (expand "cosh" -1 1)
                      (("1" (rewrite "exp_0")
                        (("1" (rewrite "div_div2")
                          (("1" (grind-reals)
                            (("1" (cross-mult 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "strict_increasing?")
              (("2" (skosimp*)
                (("2" (expand "tanh")
                  (("2" (rewrite "div_mult_pos_lt1" 1)
                    (("2"
                      (lemma "div_mult_pos_lt2"
                       ("z" "sinh(y!1)*cosh(x!1)" "py" "cosh(y!1)" "x"
                        "sinh(x!1)"))
                      (("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (expand "sinh")
                            (("2" (expand "cosh")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "both_sides_times_pos_lt1"
                                   ("pz"
                                    "4"
                                    "x"
                                    "(exp(x!1) - exp(-x!1)) / 2 * ((exp(-y!1) + exp(y!1)) / 2)"
                                    "y"
                                    "(exp(y!1) - exp(-y!1)) / 2 * ((exp(-x!1) + exp(x!1)) / 2)"))
                                  (("2"
                                    (replace -1 1 rl)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (case-replace
                                         "(exp(x!1) - exp(-x!1)) / 2 * ((exp(-y!1) + exp(y!1)) / 2) * 4 = (exp(x!1) - exp(-x!1))*(exp(-y!1) + exp(y!1))")
                                        (("1"
                                          (case-replace
                                           "(exp(y!1) - exp(-y!1)) / 2 * ((exp(-x!1) + exp(x!1)) / 2) * 4 = (exp(y!1) - exp(-y!1))*(exp(-x!1) + exp(x!1))")
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (name-replace
                                                 "K1"
                                                 "-1 * (exp(-x!1) * exp(-y!1))")
                                                (("1"
                                                  (name-replace
                                                   "K2"
                                                   "exp(x!1) * exp(y!1)")
                                                  (("1"
                                                    (lemma
                                                     "exp_sum"
                                                     ("x"
                                                      "-x!1"
                                                      "y"
                                                      "y!1"))
                                                    (("1"
                                                      (replace -1 1 rl)
                                                      (("1"
                                                        (lemma
                                                         "exp_sum"
                                                         ("x"
                                                          "-y!1"
                                                          "y"
                                                          "x!1"))
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1
                                                           rl)
                                                          (("1"
                                                            (case-replace
                                                             "K1 - exp(-x!1 + y!1) + (exp(-y!1 + x!1) + K2) <
                       K1 - exp(-y!1 + x!1) + (exp(-x!1 + y!1) + K2) IFF exp(-y!1 + x!1) < exp(-x!1+y!1)")
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3)
                                                              (("1"
                                                                (lemma
                                                                 "exp_strict_increasing")
                                                                (("1"
                                                                  (expand
                                                                   "strict_increasing?")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x!1-y!1"
                                                                     "y!1-x!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               2)
                                                              (("2"
                                                                (lemma
                                                                 "both_sides_times_pos_lt1"
                                                                 ("x"
                                                                  "exp(-y!1 + x!1)"
                                                                  "y"
                                                                  "exp(-x!1 + y!1)"
                                                                  "pz"
                                                                  "2"))
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   rl)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (name-replace
                                                                       "K3"
                                                                       "exp(-y!1 + x!1)")
                                                                      (("2"
                                                                        (name-replace
                                                                         "K4"
                                                                         "exp(-x!1 + y!1)")
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 -2 2)
                                            (("2"
                                              (name-replace
                                               "EXPX"
                                               "(exp(-x!1) + exp(x!1))")
                                              (("2"
                                                (name-replace
                                                 "EXPY"
                                                 "(exp(y!1)-exp(-y!1))")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (name-replace
                                             "EXPY"
                                             "(exp(-y!1)+exp(y!1))")
                                            (("2"
                                              (name-replace
                                               "EXPX"
                                               "(exp(x!1)-exp(-x!1))")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_div2 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (exp_0 formula-decl nil ln_exp nil)
    (sinh const-decl "real" hyperbolic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (exp_sum formula-decl nil ln_exp nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (coth const-decl "real_abs_gt1" hyperbolic nil))
   shostak))
 (sinh_strict_increasing 0
  (sinh_strict_increasing-1 nil 3253386551
   ("" (expand "strict_increasing?")
    (("" (expand "sinh")
      (("" (skosimp*)
        ((""
          (lemma "both_sides_div_pos_lt1"
           ("x" "exp(x!1)-exp(-x!1)" "y" "exp(y!1)-exp(-y!1)" "pz"
            "2"))
          (("" (lemma "exp_strict_increasing")
            (("" (expand "strict_increasing?")
              (("" (inst-cp - "x!1" "y!1")
                (("" (inst - "-y!1" "-x!1")
                  (("" (name-replace "EPX" "exp(x!1)")
                    (("" (name-replace "EMX" "exp(-x!1)")
                      (("" (name-replace "EMY" "exp(-y!1)")
                        (("" (name-replace "EPY" "exp(y!1)")
                          ((""
                            (lemma "both_sides_times_neg_lt1"
                             ("x" "y!1" "y" "x!1" "nz" "-1"))
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (cosh_strict_increasing 0
  (cosh_strict_increasing-1 nil 3253395203
   ("" (expand "strict_increasing?")
    (("" (skosimp*)
      (("" (typepred "x!1")
        (("" (typepred "y!1")
          (("" (expand "nnreal_cosh")
            (("" (expand "cosh")
              ((""
                (lemma "both_sides_div_pos_lt1"
                 ("x" "exp(-x!1) + exp(x!1)" "y" "exp(-y!1) + exp(y!1)"
                  "pz" "2"))
                (("" (replace -1 1)
                  (("" (lemma "exp_diff" ("x" "0" "y" "x!1"))
                    (("" (rewrite "exp_0")
                      (("" (replace -1 1)
                        (("" (lemma "exp_diff" ("x" "0" "y" "y!1"))
                          (("" (rewrite "exp_0")
                            (("" (replace -1 1)
                              ((""
                                (lemma
                                 "both_sides_times_pos_lt1"
                                 ("x"
                                  "1/exp(x!1)+exp(x!1)"
                                  "y"
                                  "1/exp(y!1)+exp(y!1)"
                                  "pz"
                                  "exp(x!1)*exp(y!1)"))
                                ((""
                                  (replace -1 1 rl)
                                  ((""
                                    (simplify 1)
                                    ((""
                                      (lemma "div_cancel1")
                                      ((""
                                        (inst-cp - "exp(x!1)" "1")
                                        ((""
                                          (inst - "exp(y!1)" "1")
                                          ((""
                                            (lemma
                                             "exp_strict_increasing")
                                            ((""
                                              (expand
                                               "strict_increasing?")
                                              ((""
                                                (inst - "x!1" "y!1")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (lemma
                                                     "exp_increasing")
                                                    ((""
                                                      (expand
                                                       "increasing?")
                                                      ((""
                                                        (inst
                                                         -
                                                         "0"
                                                         "x!1")
                                                        ((""
                                                          (assert)
                                                          ((""
                                                            (rewrite
                                                             "exp_0")
                                                            ((""
                                                              (name-replace
                                                               "EPX"
                                                               "exp(x!1)")
                                                              ((""
                                                                (name-replace
                                                                 "EPY"
                                                                 "exp(y!1)")
                                                                ((""
                                                                  (hide
                                                                   (-5
                                                                    -6
                                                                    -7
                                                                    1))
                                                                  ((""
                                                                    (lemma
                                                                     "posreal_times_posreal_is_posreal"
                                                                     ("px"
                                                                      "EPX*EPY-1"
                                                                      "py"
                                                                      "EPY-EPX"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "lt_times_lt_pos1")
                                                                      (("3"
                                                                        (inst
                                                                         -
                                                                         "1"
                                                                         "1"
                                                                         "EPY"
                                                                         "EPX")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cosh const-decl "posreal_ge1" hyperbolic nil)
    (exp_0 formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_cancel1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (increasing? const-decl "bool" real_fun_preds "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (exp_increasing formula-decl nil ln_exp nil)
    (exp_strict_increasing formula-decl nil ln_exp nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_diff formula-decl nil ln_exp nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal_cosh const-decl "posreal_ge1" hyperbolic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (tanh_strict_increasing 0
  (tanh_strict_increasing-1 nil 3253525103
   ("" (lemma "exp_strict_increasing")
    (("" (expand "strict_increasing?")
      (("" (expand "tanh")
        (("" (expand "sinh")
          (("" (expand "cosh")
            (("" (skosimp*)
              (("" (rewrite "div_div1" 1)
                (("" (rewrite "div_div1" 1)
                  (("" (rewrite "div_cancel1" 1)
                    (("" (rewrite "div_cancel1" 1)
                      (("" (case "exp(-x!1)+exp(x!1) > 0")
                        (("1" (case "exp(-y!1)+exp(y!1) > 0")
                          (("1" (lemma "div_mult_pos_lt1")
                            (("1"
                              (inst - "exp(-x!1) + exp(x!1)"
                               "(exp(y!1) - exp(-y!1)) / (exp(-y!1) + exp(y!1))"
                               "exp(x!1) - exp(-x!1)")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (lemma "div_mult_pos_lt2")
                                  (("1"
                                    (inst
                                     -
                                     "exp(-y!1) + exp(y!1)"
                                     "exp(x!1) - exp(-x!1)"
                                     "(exp(y!1) - exp(-y!1))*(exp(-x!1) + exp(x!1))")
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (inst-cp - "x!1" "y!1")
                                          (("1"
                                            (inst-cp - "-y!1" "-x!1")
                                            (("1"
                                              (inst
                                               -
                                               "x!1-y!1"
                                               "y!1-x!1")
                                              (("1"
                                                (lemma "exp_sum")
                                                (("1"
                                                  (inst-cp
                                                   -
                                                   "x!1"
                                                   "-y!1")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "y!1"
                                                     "-x!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (exp_sum formula-decl nil ln_exp nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_div1 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (exp_strict_increasing formula-decl nil ln_exp nil))
   shostak))
 (csch_strict_decreasing 0
  (csch_strict_decreasing-1 nil 3253526140
   ("" (lemma "sinh_strict_increasing")
    (("" (expand "strict_decreasing?")
      (("" (skosimp*)
        (("" (typepred "x!1")
          (("" (expand "strict_increasing?")
            (("" (expand "posreal_csch")
              (("" (expand "csch")
                (("" (inst-cp - "x!1" "y!1")
                  (("" (inst - "0" "x!1")
                    (("" (name-replace "SX" "sinh(x!1)")
                      (("" (name-replace "SY" "sinh(y!1)")
                        (("" (expand "sinh")
                          (("" (rewrite "exp_0")
                            (("" (assert)
                              ((""
                                (lemma
                                 "both_sides_div_pos_lt2"
                                 ("pz" "1" "py" "SX" "px" "SY"))
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_csch const-decl "posreal" hyperbolic nil)
    (sinh const-decl "real" hyperbolic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_0 formula-decl nil ln_exp nil)
    (csch const-decl "real" hyperbolic nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (sinh_strict_increasing formula-decl nil hyperbolic nil))
   shostak))
 (sech_strict_decreasing 0
  (sech_strict_decreasing-1 nil 3253526566
   ("" (expand "strict_decreasing?")
    (("" (skosimp*)
      (("" (typepred "x!1")
        (("" (expand "nnreal_sech")
          (("" (expand "sech")
            (("" (lemma "cosh_strict_increasing")
              (("" (expand "strict_increasing?")
                (("" (inst - "x!1" "y!1")
                  (("" (expand "nnreal_cosh")
                    ((""
                      (lemma "both_sides_div_pos_lt2"
                       ("pz" "1" "py" "cosh(x!1)" "px" "cosh(y!1)"))
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_sech const-decl "posreal_le1" hyperbolic nil)
    (cosh_strict_increasing formula-decl nil hyperbolic nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_cosh const-decl "posreal_ge1" hyperbolic nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (sech const-decl "posreal_le1" hyperbolic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (coth_strict_decreasing 0
  (coth_strict_decreasing-1 nil 3253526884
   ("" (expand "strict_decreasing?")
    (("" (skosimp*)
      (("" (expand "posreal_coth")
        (("" (expand "coth")
          (("" (lemma "tanh_strict_increasing")
            (("" (expand "strict_increasing?")
              (("" (inst-cp - "0" "x!1")
                (("" (inst - "x!1" "y!1")
                  (("" (assert)
                    (("" (name-replace "TX" "tanh(x!1)")
                      (("" (name-replace "TY" "tanh(y!1)")
                        (("" (expand "tanh")
                          (("" (expand "cosh")
                            (("" (expand "sinh")
                              ((""
                                (rewrite "exp_0")
                                ((""
                                  (lemma
                                   "both_sides_div_pos_lt2"
                                   ("pz" "1" "py" "TX" "px" "TY"))
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coth const-decl "real_abs_gt1" hyperbolic nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (sinh const-decl "real" hyperbolic nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (exp_0 formula-decl nil ln_exp nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tanh_strict_increasing formula-decl nil hyperbolic nil)
    (posreal_coth const-decl "posreal_gt1" hyperbolic nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (sinh_0 0
  (sinh_0-1 nil 3253386258
   ("" (expand "sinh")
    (("" (rewrite "exp_0") (("" (assert) nil nil)) nil)) nil)
   ((exp_0 formula-decl nil ln_exp nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (sinh const-decl "real" hyperbolic nil))
   shostak))
 (cosh_0 0
  (cosh_0-1 nil 3253386284
   ("" (expand "cosh") (("" (rewrite "exp_0") nil nil)) nil)
   ((posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_0 formula-decl nil ln_exp nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil))
   shostak))
 (tanh_0 0
  (tanh_0-1 nil 3253452832
   ("" (expand "tanh")
    (("" (rewrite "sinh_0") (("" (assert) nil nil)) nil)) nil)
   ((sinh_0 formula-decl nil hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil))
   shostak))
 (sech_0 0
  (sech_0-1 nil 3253452862
   ("" (expand "sech")
    (("" (rewrite "cosh_0") (("" (assert) nil nil)) nil)) nil)
   ((cosh_0 formula-decl nil hyperbolic nil)
    (sech const-decl "posreal_le1" hyperbolic nil))
   shostak))
 (cosh_sinh_one 0
  (cosh_sinh_one-1 nil 3253453151
   ("" (skosimp*)
    (("" (expand "cosh")
      (("" (expand "sinh")
        (("" (lemma "exp_sum" ("x" "x!1" "y" "-x!1"))
          (("" (rewrite "exp_0" -1)
            (("" (name-replace "EPX" "exp(x!1)")
              (("" (name-replace "EMX" "exp(-x!1)")
                (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_sum formula-decl nil ln_exp nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (exp_0 formula-decl nil ln_exp nil)
    (sinh const-decl "real" hyperbolic nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (tanh_sech_one 0
  (tanh_sech_one-1 nil 3253453367
   ("" (skosimp*)
    (("" (expand "tanh")
      (("" (expand "sech")
        (("" (typepred "cosh(x!1)")
          (("" (lemma "cosh_sinh_one" ("x" "x!1"))
            (("" (lemma "sq_div" ("d" "cosh(x!1)"))
              (("" (inst-cp - "1")
                (("" (inst - "sinh(x!1)")
                  (("" (assert)
                    (("" (replace -1)
                      (("" (replace -2)
                        ((""
                          (lemma "both_sides_div1"
                           ("n0z" "sq(cosh(x!1))" "x"
                            "sq(cosh(x!1)) - sq(sinh(x!1))" "y" "1"))
                          ((""
                            (lemma "minus_div2"
                             ("x" "sq(cosh(x!1))" "y" "sq(sinh(x!1))"
                              "n0x" "sq(cosh(x!1))"))
                            (("" (replace -2 -5 rl)
                              ((""
                                (rewrite "sq_1")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tanh const-decl "real_abs_lt1" hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sq_div formula-decl nil sq "reals/")
    (sinh const-decl "real" hyperbolic nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_div2 formula-decl nil real_props nil)
    (sq_1 formula-decl nil sq "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil)
    (sech const-decl "posreal_le1" hyperbolic nil))
   shostak))
 (coth_csch_one 0
  (coth_csch_one-1 nil 3253454037
   ("" (expand "coth")
    (("" (expand "csch")
      (("" (skosimp*)
        (("" (expand "tanh")
          (("" (case "sinh(n0x!1) /= 0")
            (("1" (rewrite "div_div1")
              (("1" (lemma "sq_div" ("d" "sinh(n0x!1)"))
                (("1" (replace -2 -1)
                  (("1" (inst-cp - "cosh(n0x!1)")
                    (("1" (inst - "1")
                      (("1" (rewrite "sq_1")
                        (("1" (lemma "cosh_sinh_one" ("x" "n0x!1"))
                          (("1"
                            (lemma "both_sides_div1"
                             ("x" "sq(cosh(n0x!1)) - sq(sinh(n0x!1))"
                              "y" "1" "n0z" "sq(sinh(n0x!1))"))
                            (("1"
                              (lemma "minus_div2"
                               ("n0x"
                                "sq(sinh(n0x!1))"
                                "x"
                                "sq(cosh(n0x!1))"
                                "y"
                                "sq(sinh(n0x!1))"))
                              (("1"
                                (rewrite "div_simp" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (lemma "sq_eq_0" ("a" "sinh(n0x!1)"))
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "sinh_strict_increasing")
              (("2" (expand "strict_increasing?")
                (("2" (lemma "sinh_0")
                  (("2" (case "n0x!1>0")
                    (("1" (inst - "0" "n0x!1") (("1" (assert) nil nil))
                      nil)
                     ("2" (inst - "n0x!1" "0") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((csch const-decl "real" hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (sinh_strict_increasing formula-decl nil hyperbolic nil)
    (sinh_0 formula-decl nil hyperbolic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (div_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil)
    (minus_div2 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_simp formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_1 formula-decl nil sq "reals/")
    (sq_div formula-decl nil sq "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (coth const-decl "real_abs_gt1" hyperbolic nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/"))
   shostak))
 (cosh_plus_sinh 0
  (cosh_plus_sinh-1 nil 3253453296
   ("" (expand "cosh")
    (("" (expand "sinh") (("" (propax) nil nil)) nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (cosh_minus_sinh 0
  (cosh_minus_sinh-1 nil 3253453312
   ("" (expand "cosh")
    (("" (expand "sinh") (("" (propax) nil nil)) nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (sinh_neg 0
  (sinh_neg-1 nil 3253452903
   ("" (expand "sinh") (("" (propax) nil nil)) nil)
   ((sinh const-decl "real" hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cosh_neg 0
  (cosh_neg-1 nil 3253452917
   ("" (expand "cosh") (("" (propax) nil nil)) nil)
   ((cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (tanh_neg 0
  (tanh_neg-1 nil 3253452927
   ("" (expand "tanh")
    (("" (skosimp*)
      (("" (rewrite "sinh_neg")
        (("" (rewrite "cosh_neg") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cosh_neg formula-decl nil hyperbolic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_neg formula-decl nil hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (csch_neg 0
  (csch_neg-1 nil 3253452986
   ("" (expand "csch")
    (("" (skosimp*)
      (("" (rewrite "sinh_neg") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_neg formula-decl nil hyperbolic nil)
    (csch const-decl "real" hyperbolic nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (sech_neg 0
  (sech_neg-1 nil 3253453063
   ("" (skosimp*)
    (("" (expand "sech") (("" (rewrite "cosh_neg") nil nil)) nil)) nil)
   ((sech const-decl "posreal_le1" hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh_neg formula-decl nil hyperbolic nil))
   shostak))
 (coth_neg 0
  (coth_neg-1 nil 3253453083
   ("" (skosimp*)
    (("" (expand "coth")
      (("" (rewrite "tanh_neg") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((coth const-decl "real_abs_gt1" hyperbolic nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tanh_neg formula-decl nil hyperbolic nil))
   shostak))
 (sinh_sum 0
  (sinh_sum-1 nil 3253474598
   ("" (skosimp*)
    (("" (expand "sinh")
      (("" (expand "cosh")
        (("" (lemma "exp_sum" ("x" "x!1" "y" "y!1"))
          (("" (lemma "exp_diff" ("x" "0"))
            (("" (rewrite "exp_0")
              (("" (inst-cp - "x!1+y!1")
                (("" (inst-cp - "y!1")
                  (("" (inst - "x!1")
                    (("" (replace -1)
                      (("" (replace -2)
                        (("" (replace -3)
                          (("" (lemma "exp_sum" ("x" "x!1" "y" "y!1"))
                            (("" (replace -1 1)
                              ((""
                                (name-replace "EPX" "exp(x!1)")
                                ((""
                                  (name-replace "EPY" "exp(y!1)")
                                  ((""
                                    (hide-all-but 1)
                                    (("" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_sum formula-decl nil ln_exp nil)
    (exp_0 formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp_diff formula-decl nil ln_exp nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (sinh_diff 0
  (sinh_diff-1 nil 3270964764
   ("" (skosimp*)
    (("" (lemma "sinh_sum" ("x" "x!1" "y" "-y!1"))
      (("" (rewrite "sinh_neg")
        (("" (rewrite "cosh_neg") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_sum formula-decl nil hyperbolic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cosh_neg formula-decl nil hyperbolic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sinh_neg formula-decl nil hyperbolic nil))
   shostak))
 (cosh_sum 0
  (cosh_sum-1 nil 3253475454
   ("" (skosimp*)
    (("" (expand "cosh")
      (("" (expand "sinh")
        (("" (lemma "exp_diff" ("x" "0"))
          (("" (inst-cp - "x!1")
            (("" (inst-cp - "y!1")
              (("" (inst - "x!1+y!1")
                (("" (lemma "exp_sum" ("x" "x!1" "y" "y!1"))
                  (("" (replace -1)
                    (("" (rewrite "exp_0")
                      (("" (replace -2 1)
                        (("" (replace -3)
                          (("" (replace -4)
                            (("" (hide-all-but 1)
                              ((""
                                (name-replace "EPX" "exp(x!1)")
                                ((""
                                  (name-replace "EPY" "exp(y!1)")
                                  (("" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_diff formula-decl nil ln_exp nil)
    (exp_sum formula-decl nil ln_exp nil)
    (exp_0 formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cosh_diff 0
  (cosh_diff-1 nil 3270964814
   ("" (skosimp*)
    (("" (lemma "cosh_sum" ("x" "x!1" "y" "-y!1"))
      (("" (rewrite "sinh_neg")
        (("" (rewrite "cosh_neg") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh_sum formula-decl nil hyperbolic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cosh_neg formula-decl nil hyperbolic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sinh_neg formula-decl nil hyperbolic nil))
   shostak))
 (tanh_sum_TCC1 0
  (tanh_sum_TCC1-1 nil 3253471676
   ("" (skosimp*)
    (("" (typepred "tanh(x!1)")
      (("" (typepred "tanh(y!1)")
        (("" (name-replace "TX" "tanh(x!1)")
          (("" (name-replace "TY" "tanh(y!1)")
            (("" (lemma "abs_mult" ("x" "TX" "y" "TY"))
              (("" (case "TX=0")
                (("1" (assert) nil nil)
                 ("2" (lemma "lt_times_lt_pos1")
                  (("2" (inst - "abs(TY)" "abs(TX)" "1" "1")
                    (("1" (split -1)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (TX skolem-const-decl "real_abs_lt1" hyperbolic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (tanh_sum 0
  (tanh_sum-1 nil 3253577464
   ("" (expand "tanh")
    (("" (skosimp*)
      (("" (typepred "cosh(x!1)")
        (("" (typepred "cosh(y!1)")
          (("" (typepred "cosh(x!1+y!1)")
            (("" (rewrite "sinh_sum")
              (("" (rewrite "cosh_sum")
                (("" (name-replace "CX" "cosh(x!1)")
                  (("" (name-replace "CY" "cosh(y!1)")
                    (("" (name-replace "SY" "sinh(y!1)")
                      (("" (name-replace "SX" "sinh(x!1)")
                        (("" (lemma "add_div")
                          (("" (inst-cp - "CX" "CY" "SX" "SY")
                            (("1" (inst - "1" "CX*CY" "1" "SX*SY")
                              (("1"
                                (lemma "div_div1")
                                (("1"
                                  (inst
                                   -
                                   "CX*CY + SX*SY"
                                   "CX*CY"
                                   "(SX*CY+SY*CX) / (CX * CY)")
                                  (("1"
                                    (lemma "div_cancel2")
                                    (("1"
                                      (inst - "CX*CY" "SX*CY+SY*CX")
                                      (("1"
                                        (replace -1 -2)
                                        (("1"
                                          (replace -3 1)
                                          (("1"
                                            (replace -4 1)
                                            (("1"
                                              (name-replace
                                               "CXCY"
                                               "CX*CY")
                                              (("1"
                                                (name-replace
                                                 "SXSY"
                                                 "SX*SY")
                                                (("1"
                                                  (name-replace
                                                   "SYCX"
                                                   "SY*CX")
                                                  (("1"
                                                    (name-replace
                                                     "SXCY"
                                                     "SX*CY")
                                                    (("1"
                                                      (name-replace
                                                       "NUMER"
                                                       "SYCX+SXCY")
                                                      (("1"
                                                        (name-replace
                                                         "DENOM"
                                                         "CXCY+SXSY")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "both_sides_times_pos_ge1"
                                         ("pz" "CX" "x" "CY" "y" "1"))
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "both_sides_times_pos_ge1"
                                     ("pz" "CX" "x" "CY" "y" "1"))
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "both_sides_times_pos_ge1"
                                 ("pz" "CX" "x" "CY" "y" "1"))
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sinh_sum formula-decl nil hyperbolic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sinh const-decl "real" hyperbolic nil)
    (add_div formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (div_div1 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (cosh_sum formula-decl nil hyperbolic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (coth_sum_TCC1 0
  (coth_sum_TCC1-1 nil 3253471683
   ("" (skosimp*)
    (("" (expand "coth")
      (("" (lemma "tanh_strict_increasing")
        (("" (expand "strict_increasing?")
          (("" (case "FORALL (nzx:nzreal): tanh(nzx) /= 0")
            (("1" (inst-cp - "n0x!1")
              (("1" (inst - "n0y!1")
                (("1"
                  (lemma "both_sides_div2"
                   ("n0x" "tanh(n0x!1)" "n0y" "-tanh(n0y!1)" "n0z"
                    "1"))
                  (("1" (lemma "tanh_neg" ("x" "-n0x!1"))
                    (("1" (replace -1 -2)
                      (("1"
                        (case "FORALL (x,y:real): tanh(x) = tanh(y) => x = y")
                        (("1" (inst - "-n0x!1" "n0y!1")
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but 1)
                          (("2" (skosimp*)
                            (("2" (lemma "tanh_strict_increasing")
                              (("2"
                                (expand "strict_increasing?")
                                (("2"
                                  (lemma
                                   "trich_lt"
                                   ("x" "x!1" "y" "y!1"))
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (inst - "x!1" "y!1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (inst - "y!1" "x!1")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (hide -3 1)
                (("2" (case "nzx!1>0")
                  (("1" (inst - "0" "nzx!1")
                    (("1" (rewrite "tanh_0") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (inst - "nzx!1" "0")
                    (("2" (rewrite "tanh_0") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coth const-decl "real_abs_gt1" hyperbolic nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (> const-decl "bool" reals nil)
    (tanh_0 formula-decl nil hyperbolic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (trich_lt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (tanh_neg formula-decl nil hyperbolic nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (tanh_strict_increasing formula-decl nil hyperbolic nil))
   shostak))
 (coth_sum 0
  (coth_sum-1 nil 3253528669
   ("" (skosimp*)
    (("" (expand "coth")
      (("" (lemma "tanh_sum" ("x" "n0x!1" "y" "n0y!1"))
        (("" (case "FORALL (x:real): tanh(x) = 0 IFF x = 0")
          (("1" (inst-cp - "n0x!1")
            (("1" (inst-cp - "n0y!1")
              (("1" (inst - "n0x!1+n0y!1")
                (("1" (replace -1 1 rl)
                  (("1" (replace -4)
                    (("1" (typepred "tanh(n0x!1)")
                      (("1" (typepred "tanh(n0y!1)")
                        (("1" (name-replace "TX" "tanh(n0x!1)")
                          (("1" (name-replace "TY" "tanh(n0y!1)")
                            (("1"
                              (lemma "abs_mult" ("x" "TX" "y" "TY"))
                              (("1"
                                (hide -9)
                                (("1"
                                  (case
                                   "0 < abs(TX) & abs(TX) < 1 & 0 < abs(TY) & abs(TY) < 1")
                                  (("1"
                                    (flatten -1)
                                    (("1"
                                      (lemma
                                       "lt_times_lt_pos1"
                                       ("px"
                                        "abs(TX)"
                                        "y"
                                        "1"
                                        "nnz"
                                        "abs(TY)"
                                        "w"
                                        "1"))
                                      (("1"
                                        (expand "<=" -1)
                                        (("1"
                                          (replace -3 -1)
                                          (("1"
                                            (replace -5 -1)
                                            (("1"
                                              (case "1+TX*TY > 0")
                                              (("1"
                                                (rewrite "div_div1" 2)
                                                (("1"
                                                  (rewrite
                                                   "div_times"
                                                   2)
                                                  (("1"
                                                    (rewrite
                                                     "add_div"
                                                     2)
                                                    (("1"
                                                      (case
                                                       "TX*TY /= 0")
                                                      (("1"
                                                        (rewrite
                                                         "div_div1"
                                                         2)
                                                        (("1"
                                                          (lemma
                                                           "div_cancel2"
                                                           ("x"
                                                            "1"
                                                            "n0z"
                                                            "TX*TY"))
                                                          (("1"
                                                            (replace
                                                             -1
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-13 -14 1))
                                                        (("2"
                                                          (expand "/=")
                                                          (("2"
                                                            (lemma
                                                             "zero_times3"
                                                             ("x"
                                                              "TX"
                                                              "y"
                                                              "TY"))
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 -6 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-7 -8 1))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (skosimp*)
              (("2" (split)
                (("1" (flatten)
                  (("1" (lemma "tanh_strict_increasing")
                    (("1" (expand "strict_increasing?")
                      (("1" (lemma "trichotomy" ("x" "x!1"))
                        (("1" (lemma "tanh_0")
                          (("1" (split -2)
                            (("1" (inst - "0" "x!1")
                              (("1" (assert) nil nil)) nil)
                             ("2" (propax) nil nil)
                             ("3" (inst - "x!1" "0")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma "tanh_0") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (coth const-decl "real_abs_gt1" hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (tanh_0 formula-decl nil hyperbolic nil)
    (trichotomy formula-decl nil real_axioms nil)
    (tanh_strict_increasing formula-decl nil hyperbolic nil)
    (tanh_sum formula-decl nil hyperbolic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (sinh_half_TCC1 0
  (sinh_half_TCC1-1 nil 3270840661
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (sinh_half 0
  (sinh_half-1 nil 3270838066
   ("" (skosimp*)
    (("" (assert)
      (("" (lemma "trichotomy" ("x" "x!1"))
        (("" (split -1)
          (("1" (lemma "sinh_strict_increasing")
            (("1" (expand "strict_increasing?")
              (("1" (inst - "0" "x!1/2")
                (("1" (rewrite "sinh_0")
                  (("1" (assert)
                    (("1"
                      (lemma "sq_eq"
                       ("nna" "sinh(x!1 / 2)" "nnb"
                        "sqrt((cosh(x!1) - 1) / 2)
"))
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1)
                          (("1" (rewrite "sq_sqrt")
                            (("1" (expand "sinh" 1)
                              (("1"
                                (rewrite "sq_div" 1)
                                (("1"
                                  (rewrite "sq_minus" 1)
                                  (("1"
                                    (lemma
                                     "exp_sum"
                                     ("x" "x!1/2" "y" "x!1/2"))
                                    (("1"
                                      (lemma
                                       "exp_sum"
                                       ("x" "x!1/2" "y" "-x!1/2"))
                                      (("1"
                                        (lemma
                                         "exp_sum"
                                         ("x" "-x!1/2" "y" "-x!1/2"))
                                        (("1"
                                          (expand "sq" 1)
                                          (("1"
                                            (replace -1 1 rl)
                                            (("1"
                                              (replace -2 1 rl)
                                              (("1"
                                                (replace -3 1 rl)
                                                (("1"
                                                  (rewrite "exp_0" 1)
                                                  (("1"
                                                    (expand "cosh" 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (rewrite "sinh_0")
              (("2" (rewrite "cosh_0")
                (("2" (rewrite "sqrt_0") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (lemma "sinh_strict_increasing")
            (("3" (expand "strict_increasing?")
              (("3" (inst - "x!1/2" "0")
                (("3" (rewrite "sinh_0")
                  (("3" (assert)
                    (("3"
                      (lemma "sq_eq"
                       ("nna" "-sinh(x!1/2)" "nnb"
                        "sqrt((cosh(x!1) - 1) / 2)"))
                      (("3" (assert)
                        (("3" (hide 2)
                          (("3" (rewrite "sq_sqrt")
                            (("3" (expand "sinh" 1)
                              (("3"
                                (rewrite "sq_neg" 1)
                                (("3"
                                  (rewrite "sq_div" 1)
                                  (("3"
                                    (rewrite "sq_minus" 1)
                                    (("3"
                                      (lemma
                                       "exp_sum"
                                       ("x" "x!1/2" "y" "x!1/2"))
                                      (("3"
                                        (lemma
                                         "exp_sum"
                                         ("x" "x!1/2" "y" "-x!1/2"))
                                        (("3"
                                          (lemma
                                           "exp_sum"
                                           ("x" "-x!1/2" "y" "-x!1/2"))
                                          (("3"
                                            (expand "sq" 1)
                                            (("3"
                                              (expand "cosh" 1)
                                              (("3"
                                                (replace -1 1 rl)
                                                (("3"
                                                  (replace -2 1 rl)
                                                  (("3"
                                                    (replace -3 1 rl)
                                                    (("3"
                                                      (rewrite "exp_0")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (sinh_0 formula-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (sinh const-decl "real" hyperbolic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sq_eq formula-decl nil sq "reals/")
    (sq_minus formula-decl nil sq "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (exp_0 formula-decl nil ln_exp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_sum formula-decl nil ln_exp nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sq_div formula-decl nil sq "reals/")
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sinh_strict_increasing formula-decl nil hyperbolic nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (cosh_0 formula-decl nil hyperbolic nil)
    (sq_neg formula-decl nil sq "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cosh_half_TCC1 0
  (cosh_half_TCC1-1 nil 3270840674
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (cosh_half 0
  (cosh_half-1 nil 3270840028
   ("" (skosimp*)
    ((""
      (lemma "sq_eq"
       ("nna" "cosh(x!1 / 2)" "nnb" "sqrt((cosh(x!1) + 1) / 2)"))
      (("1" (replace -1 1 rl)
        (("1" (hide -1)
          (("1" (rewrite "sq_sqrt")
            (("1" (expand "cosh")
              (("1" (rewrite "sq_div")
                (("1" (rewrite "sq_plus" 1)
                  (("1" (lemma "exp_sum" ("x" "x!1/2" "y" "x!1/2"))
                    (("1" (lemma "exp_sum" ("x" "x!1/2" "y" "-x!1/2"))
                      (("1"
                        (lemma "exp_sum" ("x" "-x!1/2" "y" "-x!1/2"))
                        (("1" (expand "sq" 1)
                          (("1" (replace -1 1 rl)
                            (("1" (replace -2 1 rl)
                              (("1"
                                (replace -3 1 rl)
                                (("1"
                                  (rewrite "exp_0")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil) ("3" (assert) nil nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_eq formula-decl nil sq "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_plus formula-decl nil sq "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (exp_0 formula-decl nil ln_exp nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (exp_sum formula-decl nil ln_exp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (sq_div formula-decl nil sq "reals/")
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (tanh_half1_TCC1 0
  (tanh_half1_TCC1-1 nil 3270840688
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (tanh_half1_TCC2 0
  (tanh_half1_TCC2-1 nil 3270840700
   ("" (skosimp*)
    (("" (rewrite "div_mult_pos_ge1") (("" (assert) nil nil)) nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (tanh_half1 0
  (tanh_half1-1 nil 3270839611
   ("" (skosimp*)
    (("" (expand "tanh" 1)
      (("" (rewrite "sinh_half")
        (("" (rewrite "cosh_half")
          (("" (case "x!1>=0")
            (("1" (assert)
              (("1" (rewrite "sqrt_div" 1)
                (("1" (rewrite "sqrt_div" 1)
                  (("1" (rewrite "sqrt_div" 1)
                    (("1" (name-replace "K1" "sqrt((cosh(x!1) - 1))")
                      (("1" (name-replace "K2" "sqrt((cosh(x!1) + 1))")
                        (("1" (rewrite "div_div1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (rewrite "sqrt_div")
                (("2" (rewrite "sqrt_div")
                  (("2" (rewrite "sqrt_div")
                    (("2" (name-replace "K1" "sqrt((cosh(x!1) - 1))")
                      (("2" (name-replace "K2" "sqrt((cosh(x!1) +1))")
                        (("2" (rewrite "div_div1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tanh const-decl "real_abs_lt1" hyperbolic nil)
    (cosh_half formula-decl nil hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_div1 formula-decl nil real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (sqrt_div formula-decl nil sqrt "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_half formula-decl nil hyperbolic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (tanh_half2 0
  (tanh_half2-1 nil 3270841163
   ("" (skosimp*)
    (("" (case "sinh(n0x!1) /=0")
      (("1" (expand "tanh" 1)
        (("1"
          (lemma "cross_mult"
           ("x" "sinh(n0x!1 / 2)" "n0x" "cosh(n0x!1 / 2)" "y"
            "cosh(n0x!1) - 1" "n0y" "sinh(n0x!1)"))
          (("1" (replace -1 1)
            (("1" (hide -1 -2)
              (("1" (expand "sinh")
                (("1" (expand "cosh")
                  (("1" (lemma "exp_sum" ("x" "n0x!1/2" "y" "n0x!1"))
                    (("1"
                      (lemma "exp_sum" ("x" "n0x!1/2" "y" "-n0x!1"))
                      (("1"
                        (lemma "exp_sum"
                         ("x" "-(n0x!1/2)" "y" "-n0x!1"))
                        (("1"
                          (lemma "exp_sum"
                           ("x" "-(n0x!1/2)" "y" "n0x!1"))
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil) ("3" (assert) nil nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "sinh_strict_increasing")
          (("2" (expand "strict_increasing?")
            (("2" (lemma "trichotomy" ("x" "n0x!1"))
              (("2" (split -1)
                (("1" (inst - "0" "n0x!1")
                  (("1" (rewrite "sinh_0") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil)
                 ("3" (inst - "n0x!1" "0")
                  (("3" (rewrite "sinh_0") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (cross_mult formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (exp_sum formula-decl nil ln_exp nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (sinh_strict_increasing formula-decl nil hyperbolic nil)
    (trichotomy formula-decl nil real_axioms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sinh_0 formula-decl nil hyperbolic nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (tanh_half3 0
  (tanh_half3-1 nil 3270840252
   ("" (skosimp*)
    (("" (expand "tanh")
      ((""
        (lemma "cross_mult"
         ("x" "sinh(x!1 / 2)" "n0x" "cosh(x!1 / 2)" "y" "sinh(x!1)"
          "n0y" "1 + cosh(x!1)"))
        (("1" (replace -1 1)
          (("1" (hide -1)
            (("1" (expand "sinh")
              (("1" (expand "cosh")
                (("1" (lemma "exp_sum" ("x" "-x!1" "y" "x!1/2"))
                  (("1" (lemma "exp_sum" ("x" "-x!1" "y" "-(x!1/2)"))
                    (("1" (lemma "exp_sum" ("x" "x!1" "y" "-(x!1/2)"))
                      (("1" (lemma "exp_sum" ("x" "x!1" "y" "x!1/2"))
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil) ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (exp_sum formula-decl nil ln_exp nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_mult formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sinh const-decl "real" hyperbolic nil))
   shostak))
 (sinh2x 0
  (sinh2x-1 nil 3270912654
   ("" (skosimp*)
    (("" (expand "sinh")
      (("" (expand "cosh")
        (("" (lemma "exp_sum" ("x" "x!1" "y" "x!1"))
          (("" (lemma "exp_sum" ("x" "x!1" "y" "-x!1"))
            (("" (lemma "exp_sum" ("x" "-x!1" "y" "-x!1"))
              (("" (lemma "exp_sum" ("x" "-x!1" "y" "x!1"))
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_sum formula-decl nil ln_exp nil)
    (exp_0 formula-decl nil ln_exp nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil))
   shostak))
 (sinh2x_B_TCC1 0
  (sinh2x_B_TCC1-1 nil 3270912427
   ("" (skosimp*)
    (("" (case "tanh(x!1)>=0")
      (("1" (lemma "sq_lt" ("nna" "tanh(x!1)" "nnb" "1"))
        (("1" (rewrite "sq_1") (("1" (assert) nil nil)) nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (lemma "sq_lt" ("nna" "-tanh(x!1)" "nnb" "1"))
        (("1" (rewrite "sq_1")
          (("1" (rewrite "sq_neg") (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_1 formula-decl nil sq "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_lt formula-decl nil sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq_neg formula-decl nil sq "reals/")
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sinh2x_B 0
  (sinh2x_B-1 nil 3270912781
   ("" (skosimp*)
    (("" (rewrite "div_cancel4")
      (("1" (expand "tanh")
        (("1" (rewrite "sq_div")
          (("1"
            (lemma "both_sides_times1"
             ("x"
              "sinh(2 * x!1) - sinh(2 * x!1) * (sq(sinh(x!1)) / sq(cosh(x!1)))"
              "y" "2 * (sinh(x!1) / cosh(x!1))" "n0z" "sq(cosh(x!1))"))
            (("1" (replace -1 1 rl)
              (("1" (hide -1)
                (("1" (assert)
                  (("1"
                    (lemma "div_cancel1"
                     ("x" "sq(sinh(x!1))" "n0z" "sq(cosh(x!1))"))
                    (("1" (replace -1 1)
                      (("1"
                        (name-replace "K101"
                         "sq(sinh(x!1)) / sq(cosh(x!1))")
                        (("1"
                          (case-replace
                           "sinh(2 * x!1) * sq(cosh(x!1)) * K101 = sinh(2*x!1)*sq(sinh(x!1))")
                          (("1" (hide -1 -2)
                            (("1"
                              (case-replace
                               "2 * (sq(cosh(x!1)) * (sinh(x!1) / cosh(x!1))) = 2*cosh(x!1)*sinh(x!1)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "sq")
                                  (("1"
                                    (expand "cosh")
                                    (("1"
                                      (expand "sinh")
                                      (("1"
                                        (lemma
                                         "exp_sum"
                                         ("x" "x!1" "y" "x!1"))
                                        (("1"
                                          (lemma
                                           "exp_sum"
                                           ("x" "x!1" "y" "-x!1"))
                                          (("1"
                                            (lemma
                                             "exp_sum"
                                             ("x" "-x!1" "y" "-x!1"))
                                            (("1"
                                              (lemma
                                               "exp_sum"
                                               ("x" "-x!1" "y" "x!1"))
                                              (("1"
                                                (lemma
                                                 "exp_sum"
                                                 ("x"
                                                  "2*x!1"
                                                  "y"
                                                  "2*x!1"))
                                                (("1"
                                                  (lemma
                                                   "exp_sum"
                                                   ("x"
                                                    "2*x!1"
                                                    "y"
                                                    "x!1"))
                                                  (("1"
                                                    (lemma
                                                     "exp_sum"
                                                     ("x"
                                                      "2*x!1"
                                                      "y"
                                                      "-x!1"))
                                                    (("1"
                                                      (lemma
                                                       "exp_sum"
                                                       ("x"
                                                        "2*x!1"
                                                        "y"
                                                        "-(2*x!1)"))
                                                      (("1"
                                                        (lemma "exp_0")
                                                        (("1"
                                                          (lemma
                                                           "exp_sum"
                                                           ("x"
                                                            "-(2*x!1)"
                                                            "y"
                                                            "2*x!1"))
                                                          (("1"
                                                            (lemma
                                                             "exp_sum"
                                                             ("x"
                                                              "-(2*x!1)"
                                                              "y"
                                                              "x!1"))
                                                            (("1"
                                                              (lemma
                                                               "exp_sum"
                                                               ("x"
                                                                "-(2*x!1)"
                                                                "y"
                                                                "-x!1"))
                                                              (("1"
                                                                (lemma
                                                                 "exp_sum"
                                                                 ("x"
                                                                  "-(2*x!1)"
                                                                  "y"
                                                                  "-(2*x!1)"))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "sq")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "sq_nz_pos" ("nz" "cosh(x!1)"))
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (case "tanh(x!1)>=0")
          (("1" (lemma "sq_gt" ("nna" "1" "nnb" "tanh(x!1)"))
            (("1" (rewrite "sq_1") (("1" (assert) nil nil)) nil)
             ("2" (propax) nil nil))
            nil)
           ("2" (lemma "sq_gt" ("nna" "1" "nnb" "-tanh(x!1)"))
            (("1" (rewrite "sq_1")
              (("1" (rewrite "sq_neg") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (sinh const-decl "real" hyperbolic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (sq_div formula-decl nil sq "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (exp_0 formula-decl nil ln_exp nil)
    (exp_sum formula-decl nil ln_exp nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (div_cancel1 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times1 formula-decl nil real_props nil))
   shostak))
 (cosh2x 0
  (cosh2x-1 nil 3270915543
   ("" (skosimp*)
    (("" (expand "cosh")
      (("" (expand "sq")
        (("" (lemma "exp_sum" ("x" "x!1" "y" "x!1"))
          (("" (lemma "exp_sum" ("x" "x!1" "y" "-x!1"))
            (("" (lemma "exp_sum" ("x" "-x!1" "y" "-x!1"))
              (("" (lemma "exp_sum" ("x" "-x!1" "y" "x!1"))
                (("" (rewrite "exp_0") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_sum formula-decl nil ln_exp nil)
    (exp_0 formula-decl nil ln_exp nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (cosh2x_B 0
  (cosh2x_B-1 nil 3270915986
   ("" (skosimp*)
    (("" (lemma "cosh2x" ("x" "x!1"))
      (("" (lemma "cosh_sinh_one" ("x" "x!1")) (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh2x formula-decl nil hyperbolic nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil))
   shostak))
 (cosh2x_C 0
  (cosh2x_C-1 nil 3270916242
   ("" (skosimp*)
    (("" (lemma "cosh2x_B" ("x" "x!1"))
      (("" (lemma "cosh2x" ("x" "x!1")) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh2x_B formula-decl nil hyperbolic nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cosh2x formula-decl nil hyperbolic nil))
   shostak))
 (tanh2x 0
  (tanh2x-1 nil 3270916617
   ("" (skosimp*)
    (("" (rewrite "div_cancel4")
      (("" (expand "tanh")
        (("" (rewrite "sq_div")
          (("" (rewrite "div_times" 1)
            (("1" (rewrite "add_div")
              (("1"
                (lemma "cross_mult"
                 ("x"
                  "(sinh(2 * x!1) * (sq(cosh(x!1)) * cosh(2 * x!1)) +
        cosh(2 * x!1) * sinh(2 * x!1) * sq(sinh(x!1)))" "n0x"
                  "(cosh(2 * x!1) * (sq(cosh(x!1)) * cosh(2 * x!1)))"
                  "y" "2*sinh(x!1)" "n0y" "cosh(x!1)"))
                (("1" (replace -1 1)
                  (("1" (hide -1)
                    (("1" (expand "sq")
                      (("1" (rewrite "sinh2x")
                        (("1" (rewrite "cosh2x")
                          (("1" (expand "sq")
                            (("1" (lemma "cosh_sinh_one" ("x" "x!1"))
                              (("1"
                                (expand "sq")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "sq_nz_pos" ("nz" "cosh(2*x!1)"))
                    (("2" (lemma "sq_nz_pos" ("nz" "cosh(x!1)"))
                      (("2"
                        (lemma "posreal_times_posreal_is_posreal"
                         ("px" "sq(cosh(x!1))" "py"
                          "sq(cosh(2 * x!1))"))
                        (("1" (expand "sq") (("1" (assert) nil nil))
                          nil)
                         ("2" (propax) nil nil) ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sq_nz_pos" ("nz" "cosh(x!1)"))
                  (("2"
                    (lemma "posreal_times_posreal_is_posreal"
                     ("px" "sq(cosh(x!1))" "py" "cosh(2*x!1)"))
                    (("1" (assert) nil nil) ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "sq_nz_pos" ("nz" "cosh(x!1)"))
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (sinh const-decl "real" hyperbolic nil)
    (sq_div formula-decl nil sq "reals/")
    (add_div formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cosh2x formula-decl nil hyperbolic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil)
    (sinh2x formula-decl nil hyperbolic nil)
    (cross_mult formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (sinh3x_TCC1 0
  (sinh3x_TCC1-1 nil 3270920091
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (sinh3x 0
  (sinh3x-1 nil 3270918363
   ("" (skosimp*)
    (("" (lemma "sinh_sum" ("x" "2*x!1" "y" "x!1"))
      (("" (replace -1 1)
        (("" (hide -1)
          (("" (rewrite "sinh2x")
            (("" (rewrite "cosh2x")
              (("" (lemma "cosh_sinh_one" ("x" "x!1"))
                (("" (expand "sq")
                  (("" (assert)
                    (("" (expand "^")
                      (("" (expand "expt")
                        (("" (expand "expt")
                          (("" (expand "expt")
                            (("" (expand "expt")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_sum formula-decl nil hyperbolic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cosh2x formula-decl nil hyperbolic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil)
    (sinh2x formula-decl nil hyperbolic nil))
   shostak))
 (cosh3x 0
  (cosh3x-1 nil 3270919010
   ("" (skosimp*)
    (("" (lemma "cosh_sum" ("x" "x!1" "y" "2*x!1"))
      (("" (replace -1)
        (("" (rewrite "cosh2x")
          (("" (rewrite "sinh2x")
            (("" (hide -1)
              (("" (expand "^")
                (("" (expand "expt")
                  (("" (expand "expt")
                    (("" (expand "expt")
                      (("" (expand "expt")
                        (("" (expand "sq")
                          (("" (lemma "cosh_sinh_one" ("x" "x!1"))
                            (("" (expand "sq") (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh_sum formula-decl nil hyperbolic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cosh2x formula-decl nil hyperbolic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil)
    (^ const-decl "real" exponentiation nil)
    (sinh2x formula-decl nil hyperbolic nil))
   shostak))
 (sinh4x 0
  (sinh4x-1 nil 3270919340
   ("" (skosimp*)
    (("" (lemma "sinh2x" ("x" "2*x!1"))
      (("" (rewrite "sinh2x")
        (("" (rewrite "cosh2x")
          (("" (expand "sq")
            (("" (lemma "cosh_sinh_one" ("x" "x!1"))
              (("" (expand "sq")
                (("" (assert)
                  (("" (rewrite "sinh2x") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh2x formula-decl nil hyperbolic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cosh2x formula-decl nil hyperbolic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (cosh4x_TCC1 0
  (cosh4x_TCC1-1 nil 3270912606
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (cosh4x 0
  (cosh4x-1 nil 3270919895
   ("" (skosimp*)
    (("" (lemma "cosh2x" ("x" "2*x!1"))
      (("" (replace -1 1)
        (("" (hide -1)
          (("" (rewrite "cosh2x")
            (("" (expand "sq")
              (("" (expand "^")
                (("" (expand "expt")
                  (("" (expand "expt")
                    (("" (expand "expt")
                      (("" (expand "expt")
                        (("" (expand "expt")
                          (("" (lemma "cosh_sinh_one" ("x" "x!1"))
                            (("" (expand "sq") (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh2x formula-decl nil hyperbolic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (expt def-decl "real" exponentiation nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil)
    (^ const-decl "real" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (sinh_times_sinh 0
  (sinh_times_sinh-1 nil 3270964579
   ("" (skosimp*)
    (("" (rewrite "cosh_sum")
      (("" (rewrite "cosh_diff") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cosh_sum formula-decl nil hyperbolic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cosh_diff formula-decl nil hyperbolic nil))
   shostak))
 (cosh_times_cosh 0
  (cosh_times_cosh-1 nil 3270964883
   ("" (skosimp*)
    (("" (rewrite "cosh_sum")
      (("" (rewrite "cosh_diff") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cosh_sum formula-decl nil hyperbolic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cosh_diff formula-decl nil hyperbolic nil))
   shostak))
 (sinh_times_cosh 0
  (sinh_times_cosh-1 nil 3270964906
   ("" (skosimp*)
    (("" (rewrite "sinh_sum")
      (("" (rewrite "sinh_diff") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sinh_sum formula-decl nil hyperbolic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sinh_diff formula-decl nil hyperbolic nil))
   shostak))
 (sum_sinh 0
  (sum_sinh-1 nil 3270965915
   ("" (skosimp*)
    ((""
      (lemma "sinh_times_cosh"
       ("x" "(x!1 + y!1) / 2" "y" "(x!1 - y!1) / 2"))
      (("" (assert) nil nil)) nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_times_cosh formula-decl nil hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (diff_sinh 0
  (diff_sinh-1 nil 3270966111
   ("" (skosimp*)
    (("" (lemma "sum_sinh" ("x" "x!1" "y" "-y!1"))
      (("" (rewrite "sinh_neg") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sum_sinh formula-decl nil hyperbolic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sinh_neg formula-decl nil hyperbolic nil))
   shostak))
 (sum_cosh 0
  (sum_cosh-1 nil 3270966232
   ("" (skosimp*)
    ((""
      (lemma "cosh_times_cosh" ("x" "(x!1+y!1)/2" "y" "(x!1-y!1)/2"))
      (("" (name-replace "K1" "cosh(x!1)")
        (("" (name-replace "K2" "cosh(y!1)")
          (("" (name-replace "K3" "cosh((x!1+y!1)/2)")
            (("" (name-replace "K4" "cosh((x!1-y!1)/2)")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cosh_times_cosh formula-decl nil hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil))
   shostak))
 (diff_cosh 0
  (diff_cosh-1 nil 3270966462
   ("" (skosimp*)
    ((""
      (lemma "sinh_times_sinh" ("x" "(x!1+y!1)/2" "y" "(x!1-y!1)/2"))
      (("" (name-replace "K1" "cosh(x!1)")
        (("" (name-replace "K2" "cosh(y!1)")
          (("" (name-replace "K3" "sinh((x!1 + y!1) / 2)")
            (("" (name-replace "K4" "sinh((x!1 - y!1) / 2)")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_times_sinh formula-decl nil hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil))
   shostak))
 (sum_tanh_TCC1 0
  (sum_tanh_TCC1-1 nil 3270965627
   ("" (skosimp*)
    ((""
      (lemma "posreal_times_posreal_is_posreal"
       ("px" "cosh(x!1)" "py" "cosh(y!1)"))
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (assert) nil nil))
      nil))
    nil)
   ((cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_tanh 0
  (sum_tanh-1 nil 3270966616
   ("" (skosimp*)
    (("" (expand "tanh")
      (("" (rewrite "sinh_sum")
        ((""
          (lemma "add_div"
           ("x" "sinh(x!1)" "n0x" "cosh(x!1)" "y" "sinh(y!1)" "n0y"
            "cosh(y!1)"))
          (("" (replace -1 1) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((tanh const-decl "real_abs_lt1" hyperbolic nil)
    (sinh const-decl "real" hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (add_div formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh_sum formula-decl nil hyperbolic nil))
   shostak))
 (sum_coth_TCC1 0
  (sum_coth_TCC1-1 nil 3270965675
   ("" (case "FORALL (x:nzreal): sinh(x) /=0")
    (("1" (skosimp*)
      (("1" (inst-cp - "n0x!1")
        (("1" (inst - "n0y!1")
          (("1"
            (lemma "nzreal_times_nzreal_is_nzreal"
             ("nzx" "sinh(n0x!1)" "nzy" "sinh(n0y!1)"))
            (("1" (assert) nil nil) ("2" (propax) nil nil)
             ("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp*)
        (("2" (lemma "trichotomy" ("x" "x!1"))
          (("2" (lemma "sinh_strict_increasing")
            (("2" (expand "strict_increasing?")
              (("2" (lemma "sinh_0")
                (("2" (split)
                  (("1" (inst - "0" "x!1") (("1" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil)
                   ("3" (inst - "x!1" "0") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trichotomy formula-decl nil real_axioms nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sinh_0 formula-decl nil hyperbolic nil)
    (sinh_strict_increasing formula-decl nil hyperbolic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sinh const-decl "real" hyperbolic nil))
   shostak))
 (sum_coth 0
  (sum_coth-1 nil 3270966876
   ("" (skosimp*)
    (("" (expand "coth")
      (("" (case "FORALL (x:nzreal): sinh(x) /= 0")
        (("1" (inst-cp - "n0x!1")
          (("1" (inst - "n0y!1")
            (("1"
              (lemma "nzreal_times_nzreal_is_nzreal"
               ("nzx" "sinh(n0x!1)" "nzy" "sinh(n0y!1)"))
              (("1" (expand "tanh")
                (("1" (rewrite "div_div1")
                  (("1" (rewrite "div_div1")
                    (("1"
                      (lemma "add_div"
                       ("x" "cosh(n0x!1)" "n0x" "sinh(n0x!1)" "y"
                        "cosh(n0y!1)" "n0y" "sinh(n0y!1)"))
                      (("1" (rewrite "sinh_sum")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil) ("3" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (lemma "sinh_strict_increasing")
              (("2" (expand "strict_increasing?")
                (("2" (lemma "sinh_0")
                  (("2" (lemma "trichotomy" ("x" "x!1"))
                    (("2" (split)
                      (("1" (inst - "0" "x!1") (("1" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil)
                       ("3" (inst - "x!1" "0") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((coth const-decl "real_abs_gt1" hyperbolic nil)
    (sinh_strict_increasing formula-decl nil hyperbolic nil)
    (sinh_0 formula-decl nil hyperbolic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trichotomy formula-decl nil real_axioms nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (div_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add_div formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sinh_sum formula-decl nil hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sinh const-decl "real" hyperbolic nil))
   shostak))
 (diff_sinh_sq 0
  (diff_sinh_sq-1 nil 3270997686
   ("" (skosimp*)
    (("" (rewrite "sinh_times_sinh")
      (("" (lemma "sum_sinh" ("x" "x!1" "y" "y!1"))
        (("" (lemma "diff_sinh" ("x" "x!1" "y" "y!1"))
          ((""
            (lemma "cosh_times_cosh"
             ("x" "(x!1+y!1)/2" "y" "(x!1-y!1)/2"))
            ((""
              (lemma "sinh_times_sinh"
               ("x" "(x!1+y!1)/2" "y" "(x!1-y!1)/2"))
              ((""
                (case-replace
                 "sq(sinh(x!1)) - sq(sinh(y!1)) = 2 * cosh((x!1 + y!1) / 2) * sinh((x!1 - y!1) / 2)*2 * sinh((x!1 + y!1) / 2) * cosh((x!1 - y!1) / 2)")
                (("1" (hide -4 -5 -1)
                  (("1"
                    (case-replace
                     "2 * cosh((x!1 + y!1) / 2) * sinh((x!1 - y!1) / 2) * 2 *
       sinh((x!1 + y!1) / 2)* cosh((x!1 - y!1) / 2) = (cosh((x!1 + y!1) / 2 + (x!1 - y!1) / 2) -
         cosh((x!1 + y!1) / 2 - (x!1 - y!1) / 2))*(cosh((x!1 + y!1) / 2 + (x!1 - y!1) / 2) +
         cosh((x!1 + y!1) / 2 - (x!1 - y!1) / 2))")
                    (("1" (hide -1 -2 -3)
                      (("1" (simplify 1)
                        (("1"
                          (case-replace
                           "(x!1 + y!1) / 2 - (x!1 - y!1) / 2 = y!1")
                          (("1"
                            (case-replace
                             "(x!1 - y!1) / 2 + (x!1 + y!1) / 2 = x!1")
                            (("1" (rewrite "cosh2x")
                              (("1"
                                (rewrite "cosh2x")
                                (("1"
                                  (rewrite "sq_rew")
                                  (("1"
                                    (rewrite "sq_rew")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide 2)
                        (("2"
                          (case-replace
                           "(x!1 + y!1) / 2 - (x!1 - y!1) / 2=y!1")
                          (("1"
                            (case-replace
                             "(x!1 - y!1) / 2 + (x!1 + y!1) / 2=x!1")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "(cosh((x!1 - y!1) / 2) * cosh((x!1 + y!1) / 2) *
         sinh((x!1 - y!1) / 2)
         * sinh((x!1 + y!1) / 2)) = (sinh((x!1 + y!1) / 2) * sinh((x!1 - y!1) / 2))*(cosh((x!1 + y!1) / 2) * cosh((x!1 - y!1) / 2))")
                                (("1"
                                  (replace -4 1)
                                  (("1"
                                    (replace -5 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 -2 2)
                  (("2" (expand "sq" 1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sinh_times_sinh formula-decl nil hyperbolic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (diff_sinh formula-decl nil hyperbolic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cosh2x formula-decl nil hyperbolic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_rew formula-decl nil sq "reals/")
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sinh const-decl "real" hyperbolic nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cosh_times_cosh formula-decl nil hyperbolic nil)
    (sum_sinh formula-decl nil hyperbolic nil))
   shostak))
 (diff_cosh_sq 0
  (diff_cosh_sq-1 nil 3270998756
   ("" (skosimp*)
    (("" (lemma "diff_sinh_sq" ("x" "x!1" "y" "y!1"))
      (("" (lemma "cosh_sinh_one")
        (("" (inst-cp - "x!1")
          (("" (inst - "y!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diff_sinh_sq formula-decl nil hyperbolic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil))
   shostak))
 (sum_cosh_sinh_sq 0
  (sum_cosh_sinh_sq-1 nil 3270998894
   ("" (skosimp*)
    (("" (rewrite "cosh_times_cosh")
      (("" (rewrite "div_cancel4")
        (("" (rewrite "cosh2x")
          (("" (rewrite "cosh2x")
            (("" (lemma "cosh_sinh_one")
              (("" (inst-cp - "x!1")
                (("" (inst - "y!1") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cosh_times_cosh formula-decl nil hyperbolic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cosh2x formula-decl nil hyperbolic nil)
    (cosh_sinh_one formula-decl nil hyperbolic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (sinh const-decl "real" hyperbolic nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (hyperbolic_deMoivre_TCC1 0
  (hyperbolic_deMoivre_TCC1-1 nil 3270921451
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (hyperbolic_deMoivre 0
  (hyperbolic_deMoivre-1 nil 3270921235
   ("" (skosimp*)
    (("" (rewrite "cosh_plus_sinh")
      (("" (rewrite "cosh_plus_sinh")
        (("" (rewrite "exp_scal") nil nil)) nil))
      nil))
    nil)
   ((cosh_plus_sinh formula-decl nil hyperbolic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (integer nonempty-type-from-decl nil integers nil)
    (exp_scal formula-decl nil ln_exp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (sinh_series_n_TCC1 0
  (sinh_series_n_TCC1-1 nil 3271096134 ("" (grind) nil nil) nil
   shostak))
 (sinh_series_n_TCC2 0
  (sinh_series_n_TCC2-1 nil 3322476122 ("" (assuming-tcc) nil nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (sinh_taylors_TCC1 0
  (sinh_taylors_TCC1-1 nil 3271096155
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (sinh_taylors 0
  (sinh_taylors-1 nil 3271096747
   ("" (skosimp*)
    ((""
      (lemma "Taylors" ("aa" "0" "bb" "x!1" "f" "sinh" "n" "2*n!1+2"))
      (("" (case "FORALL (n:nat): derivable_n_times(sinh,n)")
        (("1" (lemma "deriv_sinh")
          (("1" (lemma "deriv_cosh")
            (("1" (lemma "sinh_derivable2")
              (("1" (lemma "cosh_derivable2")
                (("1" (case "FORALL (n:nat): nderiv(2*n,sinh) = sinh")
                  (("1"
                    (case "FORALL (n:nat): nderiv(2*n+1,sinh) = cosh")
                    (("1" (inst-cp -7 "2*n!1+3")
                      (("1" (replace -8)
                        (("1" (skolem! -9)
                          (("1" (inst + "c!1")
                            (("1" (replace -9 1)
                              (("1"
                                (inst-cp -1 "n!1+1")
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (simplify 1)
                                    (("1"
                                      (hide -10)
                                      (("1"
                                        (expand "sinh_series_n")
                                        (("1"
                                          (rewrite "sinh_0")
                                          (("1"
                                            (case
                                             "FORALL (i:nat): i <= n!1 => sigma(0, 2 + 2 * i,
            LAMBDA (nn:nat):
              IF nn > 2 + 2 * n!1 THEN 0
              ELSIF nn = 0 THEN 0
              ELSE nderiv(nn, sinh)(0) * x!1 ^ nn / factorial(nn)
              ENDIF)
       =
       sigma(0, i,
             LAMBDA (i: nat): (x!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i))")
                                            (("1"
                                              (inst - "n!1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (induct "i")
                                                (("1"
                                                  (expand "sigma" 1)
                                                  (("1"
                                                    (expand "sigma" 1)
                                                    (("1"
                                                      (expand
                                                       "sigma"
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "nderiv"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nderiv"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "nderiv"
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -7)
                                                              (("1"
                                                                (replace
                                                                 -6)
                                                                (("1"
                                                                  (rewrite
                                                                   "sinh_0")
                                                                  (("1"
                                                                    (rewrite
                                                                     "cosh_0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand "sigma" 1)
                                                    (("2"
                                                      (expand
                                                       "sigma"
                                                       1
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (simplify
                                                             1)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "1+j!1")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     "2+j!1")
                                                                    (("2"
                                                                      (replace
                                                                       -4)
                                                                      (("2"
                                                                        (rewrite
                                                                         "sinh_0")
                                                                        (("2"
                                                                          (rewrite
                                                                           "cosh_0")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (skosimp*)
                                                    (("3"
                                                      (inst -10 "nn!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (skosimp*)
                                                (("3"
                                                  (inst -9 "nn!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -7 2)
                      (("2" (induct "n")
                        (("1" (expand "nderiv" 1)
                          (("1" (expand "nderiv" 1)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "nderiv" 1)
                            (("2" (expand "nderiv" 1)
                              (("2"
                                (replace -6)
                                (("2"
                                  (replace -5)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*)
                          (("3" (inst - "1+2*n!3") nil nil)) nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (inst -6 "1+2*n!2") nil nil)) nil))
                    nil)
                   ("2" (hide -6 2)
                    (("2" (copy -5)
                      (("2" (induct "n" 1)
                        (("1" (expand "nderiv" 1)
                          (("1" (propax) nil nil)) nil)
                         ("2" (skolem! 1)
                          (("2" (flatten 1)
                            (("2" (expand "nderiv" 1)
                              (("2"
                                (expand "nderiv" 1)
                                (("2"
                                  (replace -6)
                                  (("2"
                                    (replace -5)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*)
                          (("3" (inst - "2*n!3") nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*) (("3" (inst -5 "2*n!2") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (skosimp*)
            (("2" (case "FORALL (n:nat): derivable_n_times(sinh, n*2)")
              (("1" (case "even?(n!2)")
                (("1" (expand "even?")
                  (("1" (skosimp*)
                    (("1" (replace -1)
                      (("1" (inst - "j!1")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "even_or_odd")
                  (("2" (expand "odd?")
                    (("2" (skosimp*)
                      (("2" (replace -1)
                        (("2" (inst - "2+2*j!1")
                          (("1"
                            (lemma "derivable_n_times_lem"
                             ("f" "sinh" "n" "(2 + 2 * j!1) * 2" "m"
                              "1 + 2 * j!1"))
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "n")
                  (("1" (expand "derivable_n_times")
                    (("1" (propax) nil nil)) nil)
                   ("2" (skosimp*)
                    (("2" (expand "derivable_n_times" 1)
                      (("2" (expand "derivable_n_times" 1)
                        (("2" (lemma "sinh_derivable2")
                          (("2" (lemma "cosh_derivable2")
                            (("2" (lemma "deriv_cosh")
                              (("2"
                                (lemma "deriv_sinh")
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma "reals/")) shostak))
 (asinh_TCC1 0
  (asinh_TCC1-1 nil 3253579641
   ("" (skosimp*)
    (("" (case "x!1 < 0")
      (("1" (lemma "sqrt_lt" ("nny" "sq(-x!1)" "nnz" "sq(x!1)+1"))
        (("1" (rewrite "sqrt_sq" -1)
          (("1" (rewrite "sq_neg" -1) (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (case "x!1=0")
        (("1" (replace -1)
          (("1" (rewrite "sq_0")
            (("1" (rewrite "sqrt_1") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (lemma "sqrt_lt" ("nny" "0" "nnz" "sq(x!1)+1"))
          (("2" (flatten)
            (("2" (split -2)
              (("1" (rewrite "sqrt_0") (("1" (assert) nil nil)) nil)
               ("2"
                (lemma "both_sides_times_pos_lt1"
                 ("x" "0" "y" "x!1" "pz" "x!1"))
                (("1" (hide -2 4) (("1" (grind) nil nil)) nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt_sq formula-decl nil sqrt "reals/")
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_neg formula-decl nil sq "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_lt formula-decl nil sqrt "reals/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (sqrt_1 formula-decl nil sqrt "reals/")
    (sq_0 formula-decl nil sq "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (acosh_TCC1 0
  (acosh_TCC1-1 nil 3253579641
   ("" (skosimp*)
    (("" (typepred "x!1")
      (("" (lemma "le_times_le_pos")
        (("" (inst - "1" "1" "x!1" "x!1")
          (("" (expand "sq") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (le_times_le_pos formula-decl nil real_props nil))
   shostak))
 (acosh_TCC2 0
  (acosh_TCC2-1 nil 3253579641
   ("" (skosimp*)
    (("" (typepred "sqrt(sq(x!1)-1)")
      (("1" (assert) nil nil)
       ("2" (lemma "acosh_TCC1" ("x" "x!1")) (("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (acosh_TCC1 subtype-tcc nil hyperbolic nil))
   shostak))
 (acosh_TCC3 0
  (acosh_TCC3-1 nil 3253579641
   ("" (skosimp*)
    (("" (lemma "acosh_TCC2" ("x" "x!1"))
      (("" (flatten)
        (("" (lemma "ln_increasing")
          (("" (expand "increasing?")
            ((""
              (lemma "le_times_le_pos"
               ("nnx" "1" "y" "x!1" "nnz" "1" "w" "x!1"))
              (("" (assert)
                (("" (case "x!1 = 1")
                  (("1" (replace -1)
                    (("1" (rewrite "sq_1")
                      (("1" (rewrite "sqrt_0")
                        (("1" (rewrite "ln_1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "x!1 > 1")
                    (("1"
                      (lemma "lt_times_lt_pos1"
                       ("px" "1" "y" "x!1" "nnz" "1" "w" "x!1"))
                      (("1" (assert)
                        (("1"
                          (lemma "sqrt_lt"
                           ("nny" "0" "nnz" "sq(x!1)-1"))
                          (("1" (rewrite "sqrt_0")
                            (("1" (expand "sq")
                              (("1"
                                (inst - "1" "x!1+sqrt(x!1*x!1-1)")
                                (("1"
                                  (rewrite "ln_1")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (acosh_TCC2 subtype-tcc nil hyperbolic nil)
    (ln_increasing formula-decl nil ln_exp nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sq_1 formula-decl nil sq "reals/")
    (ln_1 formula-decl nil ln_exp nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sqrt_lt formula-decl nil sqrt "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (x!1 skolem-const-decl "posreal_ge1" hyperbolic nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (increasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (atanh_TCC1 0
  (atanh_TCC1-1 nil 3253579641 ("" (grind) nil nil) nil shostak))
 (atanh_TCC2 0
  (atanh_TCC2-1 nil 3253579641
   ("" (skosimp*)
    (("" (typepred "x!1")
      (("" (lemma "div_mult_pos_lt2")
        (("" (inst - "1-x!1" "0" "1+x!1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil))
   shostak))
 (sinh_bij 0
  (sinh_bij-2 nil 3286017244
   ("" (stop-rewrite "sq_sqrt")
    (("" (expand "bijective?")
      (("" (expand "injective?")
        (("" (split)
          (("1" (skosimp*)
            (("1" (lemma "trich_lt" ("x" "x1!1" "y" "x2!1"))
              (("1" (lemma "sinh_strict_increasing")
                (("1" (expand "strict_increasing?")
                  (("1" (split -2)
                    (("1" (inst - "x1!1" "x2!1")
                      (("1" (assert) nil nil)) nil)
                     ("2" (propax) nil nil)
                     ("3" (inst - "x2!1" "x1!1")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "surjective?")
            (("2" (skosimp*)
              (("2" (case "y!1+sqrt(1+sq(y!1)) > 0")
                (("1" (inst + "ln(y!1+sqrt(1+sq(y!1)))")
                  (("1" (expand "sinh")
                    (("1"
                      (lemma "exp_diff"
                       ("x" "0" "y" "ln(sqrt(1 + sq(y!1))+y!1)"))
                      (("1" (rewrite "exp_0")
                        (("1" (replace -1 1)
                          (("1" (rewrite "exp_ln")
                            (("1" (hide -1)
                              (("1"
                                (lemma
                                 "div_cancel3"
                                 ("x"
                                  "sqrt(1 + sq(y!1)) + y!1 - 1 / (sqrt(1 + sq(y!1)) + y!1)"
                                  "y"
                                  "y!1"
                                  "n0z"
                                  "2"))
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma
                                       "minus_div1"
                                       ("x"
                                        "sqrt(1 + sq(y!1)) + y!1"
                                        "n0y"
                                        "sqrt(1 + sq(y!1)) + y!1"
                                        "n0x"
                                        "1"
                                        "y"
                                        "1"))
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (lemma
                                           "div_cancel3"
                                           ("x"
                                            "(sqrt(1 + sq(y!1)) + y!1) * (sqrt(1 + sq(y!1)) + y!1) - 1 * 1"
                                            "n0z"
                                            "sqrt(1 + sq(y!1)) + y!1"
                                            "y"
                                            "y!1*2"))
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (lemma "sq_sqrt")
                                              (("1"
                                                (inst - "1+sq(y!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "sq" -1 1)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (expand "sq" 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "trichotomy" ("x" "y!1"))
                    (("2" (split -1)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3"
                        (lemma "sq_lt"
                         ("nna" "-y!1" "nnb" "sqrt(1+sq(y!1))"))
                        (("1" (rewrite "sq_sqrt")
                          (("1" (rewrite "sq_neg")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trich_lt formula-decl nil real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sinh_strict_increasing formula-decl nil hyperbolic nil)
    (sq_neg formula-decl nil sq "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sq_lt formula-decl nil sq "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (trichotomy formula-decl nil real_axioms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (y!1 skolem-const-decl "real" hyperbolic nil)
    (ln const-decl "real" ln_exp nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (exp_diff formula-decl nil ln_exp nil)
    (minus_div1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_cancel3 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_ln formula-decl nil ln_exp nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_0 formula-decl nil ln_exp nil)
    (sinh const-decl "real" hyperbolic nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil))
   nil)
  (sinh_bij-1 nil 3253387007
   ("" (expand "bijective?")
    (("" (expand "injective?")
      (("" (split)
        (("1" (skosimp*)
          (("1" (lemma "trich_lt" ("x" "x1!1" "y" "x2!1"))
            (("1" (lemma "sinh_strict_increasing")
              (("1" (expand "strict_increasing?")
                (("1" (split -2)
                  (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil))
                    nil)
                   ("2" (propax) nil nil)
                   ("3" (inst - "x2!1" "x1!1") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "surjective?")
          (("2" (skosimp*)
            (("2" (case "y!1+sqrt(1+sq(y!1)) > 0")
              (("1" (inst + "ln(y!1+sqrt(1+sq(y!1)))")
                (("1" (expand "sinh")
                  (("1"
                    (lemma "exp_diff"
                     ("x" "0" "y" "ln(sqrt(1 + sq(y!1))+y!1)"))
                    (("1" (rewrite "exp_0")
                      (("1" (replace -1 1)
                        (("1" (rewrite "exp_ln")
                          (("1" (hide -1)
                            (("1"
                              (lemma "div_cancel3"
                               ("x"
                                "sqrt(1 + sq(y!1)) + y!1 - 1 / (sqrt(1 + sq(y!1)) + y!1)"
                                "y"
                                "y!1"
                                "n0z"
                                "2"))
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma
                                     "minus_div1"
                                     ("x"
                                      "sqrt(1 + sq(y!1)) + y!1"
                                      "n0y"
                                      "sqrt(1 + sq(y!1)) + y!1"
                                      "n0x"
                                      "1"
                                      "y"
                                      "1"))
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (lemma
                                         "div_cancel3"
                                         ("x"
                                          "(sqrt(1 + sq(y!1)) + y!1) * (sqrt(1 + sq(y!1)) + y!1) - 1 * 1"
                                          "n0z"
                                          "sqrt(1 + sq(y!1)) + y!1"
                                          "y"
                                          "y!1*2"))
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (lemma "sq_sqrt")
                                            (("1"
                                              (inst - "1+sq(y!1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "sq" -1 1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (expand "sq" 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "trichotomy" ("x" "y!1"))
                  (("2" (split -1)
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3"
                      (lemma "sq_lt"
                       ("nna" "-y!1" "nnb" "sqrt(1+sq(y!1))"))
                      (("1" (rewrite "sq_sqrt")
                        (("1" (rewrite "sq_neg")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq "reals/")
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (exp_0 formula-decl nil ln_exp nil)
    (exp_ln formula-decl nil ln_exp nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (exp_diff formula-decl nil ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (sq_lt formula-decl nil sq "reals/")
    (sq_neg formula-decl nil sq "reals/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (cosh_bij 0
  (cosh_bij-1 nil 3253394558
   ("" (expand "bijective?")
    (("" (expand "injective?")
      (("" (expand "surjective?")
        (("" (expand "nnreal_cosh")
          (("" (split)
            (("1" (skosimp*)
              (("1" (lemma "cosh_strict_increasing")
                (("1" (expand "nnreal_cosh")
                  (("1" (expand "strict_increasing?")
                    (("1" (lemma "trich_lt" ("x" "x1!1" "y" "x2!1"))
                      (("1" (split -1)
                        (("1" (inst - "x1!1" "x2!1")
                          (("1" (assert) nil nil)) nil)
                         ("2" (propax) nil nil)
                         ("3" (inst - "x2!1" "x1!1")
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst + "acosh(y!1)")
                (("2" (expand "cosh")
                  (("2" (expand "acosh")
                    (("2" (lemma "acosh_TCC1" ("x" "y!1"))
                      (("2" (lemma "acosh_TCC2" ("x" "y!1"))
                        (("2" (flatten -1)
                          (("2"
                            (lemma "exp_diff"
                             ("x" "0" "y"
                              "ln(sqrt(sq(y!1) - 1) + y!1)"))
                            (("1" (rewrite "exp_0")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (rewrite "exp_ln")
                                  (("1"
                                    (rewrite "div_cancel3" 1)
                                    (("1"
                                      (lemma
                                       "cross_mult"
                                       ("x"
                                        "y!1-sqrt(sq(y!1) - 1)"
                                        "n0x"
                                        "1"
                                        "y"
                                        "1"
                                        "n0y"
                                        "sqrt(sq(y!1) - 1) + y!1"))
                                      (("1"
                                        (flatten -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "sq_rew" 1)
                                                  (("2"
                                                    (rewrite "sq_sqrt")
                                                    (("2"
                                                      (rewrite
                                                       "sq_rew")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((injective? const-decl "bool" functions nil)
    (nnreal_cosh const-decl "posreal_ge1" hyperbolic nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (acosh_TCC1 subtype-tcc nil hyperbolic nil)
    (exp_0 formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_ln formula-decl nil ln_exp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cross_mult formula-decl nil real_props nil)
    (sq_rew formula-decl nil sq "reals/")
    (sq_sqrt formula-decl nil sqrt "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (exp_diff formula-decl nil ln_exp nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (acosh_TCC2 subtype-tcc nil hyperbolic nil)
    (acosh const-decl "nnreal" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trich_lt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (cosh_strict_increasing formula-decl nil hyperbolic nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (tanh_bij 0
  (tanh_bij-1 nil 3253584394
   ("" (expand "bijective?")
    (("" (expand "injective?")
      (("" (expand "surjective?")
        (("" (split)
          (("1" (skosimp*)
            (("1" (lemma "tanh_strict_increasing")
              (("1" (expand "strict_increasing?")
                (("1" (lemma "trich_lt" ("x" "x1!1" "y" "x2!1"))
                  (("1" (split -1)
                    (("1" (inst - "x1!1" "x2!1")
                      (("1" (assert) nil nil)) nil)
                     ("2" (propax) nil nil)
                     ("3" (inst - "x2!1" "x1!1")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst + "atanh(y!1)")
              (("2" (expand "tanh")
                (("2" (expand "sinh")
                  (("2" (expand "cosh")
                    (("2" (typepred "y!1")
                      (("2" (typepred "exp(atanh(y!1))")
                        (("2" (typepred "exp(-atanh(y!1))")
                          (("2" (hide -1 -3 -4 -6)
                            (("2" (rewrite "div_div1")
                              (("2"
                                (lemma
                                 "div_cancel1"
                                 ("x"
                                  "exp(atanh(y!1)) - exp(-atanh(y!1))"
                                  "n0z"
                                  "2"))
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (hide (-1))
                                    (("2"
                                      (case
                                       "(exp(atanh(y!1)) - exp(-atanh(y!1))) / (exp(atanh(y!1)) + exp(-atanh(y!1))) = (exp(2*atanh(y!1)) - 1)/(exp(2*atanh(y!1)) + 1)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1 -2)
                                          (("1"
                                            (rewrite "div_cancel3" 1)
                                            (("1"
                                              (expand "atanh" 1)
                                              (("1"
                                                (lemma
                                                 "div_cancel1"
                                                 ("x"
                                                  "ln((1 + y!1) / (1 - y!1))"
                                                  "n0z"
                                                  "2"))
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma "exp_ln")
                                                      (("1"
                                                        (lemma
                                                         "posreal_div_posreal_is_posreal"
                                                         ("px"
                                                          "1+y!1"
                                                          "py"
                                                          "1-y!1"))
                                                        (("1"
                                                          (inst
                                                           -
                                                           "(1 + y!1) / (1 - y!1)")
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (lemma
                                                               "both_sides_times1"
                                                               ("x"
                                                                "(1 + y!1) / (1 - y!1) - 1"
                                                                "y"
                                                                "(1 + y!1) / (1 - y!1) * y!1 + y!1"
                                                                "n0z"
                                                                "1 - y!1"))
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "div_cancel1"
                                                                     ("x"
                                                                      "1+y!1"
                                                                      "n0z"
                                                                      "1-y!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "posreal_div_posreal_is_posreal"
                                                       ("px"
                                                        "1+y!1"
                                                        "py"
                                                        "1-y!1"))
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "cross_mult"
                                           ("x"
                                            "(exp(atanh(y!1)) - exp(-atanh(y!1)))"
                                            "n0x"
                                            "(exp(atanh(y!1)) + exp(-atanh(y!1)))"
                                            "y"
                                            "(exp(2 * atanh(y!1)) - 1)"
                                            "n0y"
                                            "(exp(2 * atanh(y!1)) + 1)"))
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (name-replace
                                                 "K1"
                                                 "atanh(y!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "exp_sum"
                                                     ("x"
                                                      "-K1"
                                                      "y"
                                                      "2*K1"))
                                                    (("2"
                                                      (replace -1 * rl)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((injective? const-decl "bool" functions nil)
    (tanh_strict_increasing formula-decl nil hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trich_lt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (atanh const-decl "real" hyperbolic nil)
    (sinh const-decl "real" hyperbolic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (exp_ln formula-decl nil ln_exp nil)
    (y!1 skolem-const-decl "real_abs_lt1" hyperbolic nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_sum formula-decl nil ln_exp nil)
    (div_cancel1 formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (csch_bij 0
  (csch_bij-1 nil 3270128162
   ("" (lemma "sinh_bij")
    (("" (expand "posreal_csch")
      (("" (expand "csch")
        (("" (expand "bijective?")
          (("" (flatten -1)
            (("" (split 1)
              (("1" (hide -2)
                (("1" (expand "injective?")
                  (("1" (skosimp*)
                    (("1" (typepred "x1!1")
                      (("1" (typepred "x2!1")
                        (("1" (hide -1 -3)
                          (("1" (lemma "sinh_strict_increasing")
                            (("1" (expand "strict_increasing?")
                              (("1"
                                (inst-cp - "0" "x1!1")
                                (("1"
                                  (inst-cp - "0" "x2!1")
                                  (("1"
                                    (rewrite "sinh_0")
                                    (("1"
                                      (expand ">" (-4 -5))
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (lemma
                                             "cross_mult"
                                             ("x"
                                              "1"
                                              "y"
                                              "1"
                                              "n0x"
                                              "sinh(x1!1)"
                                              "n0y"
                                              "sinh(x2!1)"))
                                            (("1"
                                              (replace -7)
                                              (("1"
                                                (flatten -1)
                                                (("1"
                                                  (inst
                                                   -8
                                                   "x1!1"
                                                   "x2!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (expand "surjective?")
                  (("2" (skosimp*)
                    (("2" (inst - "1/y!1")
                      (("2" (skosimp*)
                        (("2" (lemma "sinh_strict_increasing")
                          (("2" (expand "strict_increasing?")
                            (("2"
                              (lemma "posreal_div_posreal_is_posreal"
                               ("px" "1" "py" "y!1"))
                              (("2"
                                (lemma "trichotomy" ("x" "x!1"))
                                (("2"
                                  (split -1)
                                  (("1"
                                    (inst - "0" "x!1")
                                    (("1"
                                      (rewrite "sinh_0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst + "x!1")
                                          (("1"
                                            (rewrite "div_cancel3")
                                            (("1"
                                              (replace -4)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (rewrite "sinh_0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (inst - "x!1" "0")
                                    (("3"
                                      (rewrite "sinh_0")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (name-replace
                                           "K1"
                                           "sinh(x!1)")
                                          (("3"
                                            (name-replace "K2" "1/y!1")
                                            (("3"
                                              (replace -4)
                                              (("3"
                                                (hide-all-but (-2 -3))
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_csch const-decl "posreal" hyperbolic nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sinh const-decl "real" hyperbolic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (cross_mult formula-decl nil real_props nil)
    (sinh_0 formula-decl nil hyperbolic nil)
    (sinh_strict_increasing formula-decl nil hyperbolic nil)
    (surjective? const-decl "bool" functions nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_cancel3 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (trichotomy formula-decl nil real_axioms nil)
    (csch const-decl "real" hyperbolic nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sinh_bij formula-decl nil hyperbolic nil))
   shostak))
 (sech_bij 0
  (sech_bij-1 nil 3270130610
   ("" (expand "nnreal_sech")
    (("" (expand "sech")
      (("" (lemma "cosh_bij")
        (("" (expand "bijective?")
          (("" (flatten -1)
            (("" (lemma "cosh_strict_increasing")
              (("" (expand "strict_increasing?")
                (("" (split 1)
                  (("1" (hide -3)
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1"
                          (lemma "trich_lt" ("x" "x1!1" "y" "x2!1"))
                          (("1" (split -1)
                            (("1" (inst-cp - "x1!1" "x2!1")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "nnreal_cosh")
                                  (("1"
                                    (typepred "cosh(x1!1)")
                                    (("1"
                                      (typepred "cosh(x2!1)")
                                      (("1"
                                        (lemma
                                         "cross_mult"
                                         ("x"
                                          "1"
                                          "y"
                                          "1"
                                          "n0x"
                                          "cosh(x1!1)"
                                          "n0y"
                                          "cosh(x2!1)"))
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (inst - "x2!1" "x1!1")
                              (("3"
                                (expand "nnreal_cosh")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand "surjective?")
                      (("2" (expand "nnreal_cosh")
                        (("2" (skosimp*)
                          (("2" (typepred "y!1")
                            (("2" (hide -1)
                              (("2"
                                (inst -4 "1/y!1")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (typepred "cosh(x!1)")
                                    (("1"
                                      (rewrite "div_cancel4")
                                      (("1"
                                        (typepred "x!1")
                                        (("1"
                                          (inst + "x!1")
                                          (("1"
                                            (rewrite "div_cancel3")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -3 2)
                                  (("2"
                                    (lemma
                                     "both_sides_div_pos_le2"
                                     ("pz" "1" "py" "y!1" "px" "1"))
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sech const-decl "posreal_le1" hyperbolic nil)
    (bijective? const-decl "bool" functions nil)
    (cosh_strict_increasing formula-decl nil hyperbolic nil)
    (injective? const-decl "bool" functions nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trich_lt formula-decl nil real_props nil)
    (nnreal_cosh const-decl "posreal_ge1" hyperbolic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (cross_mult formula-decl nil real_props nil)
    (cosh const-decl "posreal_ge1" hyperbolic nil)
    (posreal_ge1 nonempty-type-eq-decl nil hyperbolic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (surjective? const-decl "bool" functions nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (y!1 skolem-const-decl "posreal_le1" hyperbolic nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (posreal_le1 nonempty-type-eq-decl nil hyperbolic nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (cosh_bij formula-decl nil hyperbolic nil)
    (nnreal_sech const-decl "posreal_le1" hyperbolic nil))
   shostak))
 (coth_bij 0
  (coth_bij-1 nil 3270131384
   ("" (expand "posreal_coth")
    (("" (expand "coth")
      (("" (lemma "tanh_bij")
        (("" (expand "bijective?")
          (("" (flatten -1)
            (("" (lemma "tanh_strict_increasing")
              (("" (expand "strict_increasing?")
                (("" (split 1)
                  (("1" (hide -3)
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1" (typepred "x1!1")
                          (("1" (typepred "x2!1")
                            (("1" (hide -1 -3)
                              (("1"
                                (inst-cp - "0" "x1!1")
                                (("1"
                                  (inst-cp - "0" "x2!1")
                                  (("1"
                                    (rewrite "tanh_0")
                                    (("1"
                                      (expand ">" (-1 -2))
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (lemma
                                             "cross_mult"
                                             ("x"
                                              "1"
                                              "y"
                                              "1"
                                              "n0x"
                                              "tanh(x1!1)"
                                              "n0y"
                                              "tanh(x2!1)"))
                                            (("1"
                                              (replace -4 -1)
                                              (("1"
                                                (flatten -1)
                                                (("1"
                                                  (simplify -1)
                                                  (("1"
                                                    (inst
                                                     -8
                                                     "x1!1"
                                                     "x2!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand "surjective?")
                      (("2" (skosimp*)
                        (("2" (typepred "y!1")
                          (("2"
                            (lemma "posreal_div_posreal_is_posreal"
                             ("px" "1" "py" "y!1"))
                            (("2"
                              (lemma "both_sides_div_pos_gt2"
                               ("pz" "1" "py" "y!1" "px" "1"))
                              (("2"
                                (replace -3 -1)
                                (("2"
                                  (flatten -1)
                                  (("2"
                                    (inst -5 "1/y!1")
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (lemma
                                         "trichotomy"
                                         ("x" "x!1"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst + "x!1")
                                            (("1"
                                              (rewrite
                                               "div_cancel4"
                                               -6)
                                              (("1"
                                                (rewrite
                                                 "div_cancel3"
                                                 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (rewrite "tanh_0")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst - "x!1" "0")
                                            (("3"
                                              (rewrite "tanh_0")
                                              (("3"
                                                (expand ">" -1)
                                                (("3"
                                                  (replace -1)
                                                  (("3"
                                                    (replace -6)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (coth const-decl "real_abs_gt1" hyperbolic nil)
    (bijective? const-decl "bool" functions nil)
    (tanh_strict_increasing formula-decl nil hyperbolic nil)
    (injective? const-decl "bool" functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tanh const-decl "real_abs_lt1" hyperbolic nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (cross_mult formula-decl nil real_props nil)
    (tanh_0 formula-decl nil hyperbolic nil)
    (surjective? const-decl "bool" functions nil)
    (posreal_gt1 nonempty-type-eq-decl nil hyperbolic nil)
    (both_sides_div_pos_gt2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (x!1 skolem-const-decl "real" hyperbolic nil)
    (trichotomy formula-decl nil real_axioms nil)
    (y!1 skolem-const-decl "posreal_gt1" hyperbolic nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (tanh_bij formula-decl nil hyperbolic nil)
    (posreal_coth const-decl "posreal_gt1" hyperbolic nil))
   shostak))
 (asinh_alt_def 0
  (asinh_alt_def-1 nil 3253394002
   ("" (skosimp*)
    (("" (lemma "sinh_bij")
      ((""
        (lemma "bijective_inverse"
         ("f" "sinh" "y" "x!1" "x" "asinh(x!1)"))
        (("1" (flatten -1)
          (("1" (hide -1)
            (("1" (split -1)
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand "asinh")
                  (("2" (hide -1)
                    (("2" (expand "sinh")
                      (("2" (lemma "sqrt_pos" ("px" "1+sq(x!1)"))
                        (("2" (case "sqrt(1 + sq(x!1)) + x!1 >0")
                          (("1" (rewrite "div_cancel4" 1)
                            (("1"
                              (lemma "exp_diff"
                               ("x"
                                "0"
                                "y"
                                "ln(sqrt(1 + sq(x!1)) + x!1)"))
                              (("1"
                                (rewrite "exp_0")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite "exp_ln")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma
                                         "div_cancel3"
                                         ("y"
                                          "sqrt(1 + sq(x!1))-x!1"
                                          "x"
                                          "1"
                                          "n0z"
                                          "sqrt(1 + sq(x!1)) + x!1"))
                                        (("1"
                                          (flatten -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite "sq_rew")
                                                    (("2"
                                                      (rewrite
                                                       "sq_rew")
                                                      (("2"
                                                        (rewrite
                                                         "sq_sqrt")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "trichotomy" ("x" "x!1"))
                              (("2"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil)
                                 ("3"
                                  (lemma
                                   "sq_gt"
                                   ("nna"
                                    "sqrt(1 + sq(x!1))"
                                    "nnb"
                                    "-x!1"))
                                  (("1"
                                    (rewrite "sq_sqrt")
                                    (("1"
                                      (rewrite "sq_neg")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((sinh_bij formula-decl nil hyperbolic nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (exp_diff formula-decl nil ln_exp nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_rew formula-decl nil sq "reals/")
    (div_cancel3 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_ln formula-decl nil ln_exp nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_0 formula-decl nil ln_exp nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ln const-decl "real" ln_exp nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trichotomy formula-decl nil real_axioms nil)
    (sq_gt formula-decl nil sq "reals/")
    (sq_neg formula-decl nil sq "reals/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_pos judgement-tcc nil sqrt "reals/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (bijective_inverse formula-decl nil function_inverse nil)
    (asinh const-decl "real" hyperbolic nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (sinh const-decl "real" hyperbolic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (asinh_sinh 0
  (asinh_sinh-1 nil 3253392586
   ("" (skosimp*)
    (("" (lemma "asinh_alt_def" ("x" "sinh(x!1)"))
      (("" (lemma "sinh_bij")
        (("" (lemma "comp_inverse_left" ("f" "sinh" "x" "x!1"))
          (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sinh const-decl "real" hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (asinh_alt_def formula-decl nil hyperbolic nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (comp_inverse_left formula-decl nil function_inverse nil)
    (sinh_bij formula-decl nil hyperbolic nil))
   shostak))
 (sinh_asinh 0
  (sinh_asinh-1 nil 3253392742
   ("" (skosimp*)
    (("" (lemma "sinh_bij")
      (("" (expand "sinh")
        (("" (hide -1)
          (("" (rewrite "div_cancel3")
            (("" (lemma "exp_diff" ("x" "0" "y" "asinh(x!1)"))
              (("" (rewrite "exp_0")
                (("" (replace -1 1)
                  (("" (hide -1)
                    (("" (expand "asinh")
                      (("" (lemma "sqrt_pos" ("px" "1+sq(x!1)"))
                        (("" (case "sqrt(1 + sq(x!1)) + x!1 > 0")
                          (("1" (rewrite "exp_ln")
                            (("1" (field 1)
                              (("1"
                                (lemma "sqrt_def")
                                (("1"
                                  (inst -1 "1 + sq(x!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "trichotomy" ("x" "x!1"))
                              (("2"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil)
                                 ("3"
                                  (lemma
                                   "sq_gt"
                                   ("nna"
                                    "sqrt(1 + sq(x!1))"
                                    "nnb"
                                    "-x!1"))
                                  (("1"
                                    (rewrite "sq_neg")
                                    (("1"
                                      (rewrite "sq_sqrt")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sinh_bij formula-decl nil hyperbolic nil)
    (exp_diff formula-decl nil ln_exp nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_def formula-decl nil sqrt "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp_ln formula-decl nil ln_exp nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trichotomy formula-decl nil real_axioms nil)
    (sq_gt formula-decl nil sq "reals/")
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_neg formula-decl nil sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_pos judgement-tcc nil sqrt "reals/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (exp_0 formula-decl nil ln_exp nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (asinh const-decl "real" hyperbolic nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp nil)
    (ln const-decl "real" ln_exp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_cancel3 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sinh const-decl "real" hyperbolic nil))
   shostak))
 (asinh_strict_increasing 0
  (asinh_strict_increasing-1 nil 3253392937
   ("" (lemma "sinh_strict_increasing")
    (("" (expand "strict_increasing?")
      (("" (skosimp*)
        (("" (lemma "trich_lt" ("x" "asinh(x!1)" "y" "asinh(y!1)"))
          (("" (split -1)
            (("1" (propax) nil nil)
             ("2" (lemma "sinh_asinh" ("x" "x!1"))
              (("2" (lemma "sinh_asinh" ("x" "y!1"))
                (("2" (assert) nil nil)) nil))
              nil)
             ("3" (inst - "asinh(y!1)" "asinh(x!1)")
              (("3" (rewrite "sinh_asinh")
                (("3" (rewrite "sinh_asinh") (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (asinh const-decl "real" hyperbolic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trich_lt formula-decl nil real_props nil)
    (sinh_asinh formula-decl nil hyperbolic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sinh_strict_increasing formula-decl nil hyperbolic nil))
   shostak))
 (asinh_bij 0
  (asinh_bij-1 nil 3253392824
   ("" (lemma "sinh_bij")
    (("" (lemma "bij_inv_is_bij" ("f" "sinh"))
      (("" (lemma "extensionality" ("f" "asinh" "g" "inverse(sinh)"))
        (("" (split -1)
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (lemma "asinh_alt_def" ("x" "x!1"))
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sinh const-decl "real" hyperbolic nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (asinh_alt_def formula-decl nil hyperbolic nil)
    (extensionality formula-decl nil functions nil)
    (asinh const-decl "real" hyperbolic nil)
    (inverse const-decl "D" function_inverse nil)
    (sinh_bij formula-decl nil hyperbolic nil))
   shostak))
 (atanhF_TCC1 0
  (atanhF_TCC1-1 nil 3270360522 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (atanhD_TCC1 0
  (atanhD_TCC1-1 nil 3270387408
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (atanhND_TCC1 0
  (atanhND_TCC1-1 nil 3270540315
   ("" (skosimp*)
    (("" (expand "atanhD")
      (("" (lemma "expt_nonzero" ("n0x" "1-sq(x!1)" "i" "1+2*n!1"))
        (("1" (assert) nil nil)
         ("2" (hide -1)
          (("2" (case "x!1>=0")
            (("1" (lemma "sq_gt" ("nna" "1" "nnb" "x!1"))
              (("1" (rewrite "sq_1") (("1" (assert) nil nil)) nil)
               ("2" (propax) nil nil))
              nil)
             ("2" (lemma "sq_gt" ("nna" "1" "nnb" "-x!1"))
              (("1" (rewrite "sq_neg")
                (("1" (rewrite "sq_1") (("1" (assert) nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atanhD const-decl "real" hyperbolic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sq_neg formula-decl nil sq "reals/")
    (sq_gt formula-decl nil sq "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_1 formula-decl nil sq "reals/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil))
   shostak))
 (atanh_series_term_TCC1 0
  (atanh_series_term_TCC1-1 nil 3270387408
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (atanh_series_TCC1 0
  (atanh_series_TCC1-1 nil 3270812866
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (atanh_series_TCC2 0
  (atanh_series_TCC2-1 nil 3270812866
   ("" (skosimp*)
    (("" (case "1-sq(z!1)>0")
      (("1" (lemma "expt_pos" ("px" "1-sq(z!1)" "i" "2*n!1+3"))
        (("1"
          (lemma "posreal_times_posreal_is_posreal"
           ("px" "2*(2*n!1+3)" "py" "(1 - sq(z!1)) ^ (2 * n!1 + 3)"))
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (hide -1)
        (("2" (case "z!1>=0")
          (("1" (lemma "sq_gt" ("nna" "1" "nnb" "z!1"))
            (("1" (rewrite "sq_1") (("1" (assert) nil nil)) nil)
             ("2" (propax) nil nil))
            nil)
           ("2" (lemma "sq_gt" ("nna" "1" "nnb" "-z!1"))
            (("1" (rewrite "sq_1")
              (("1" (rewrite "sq_neg") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_pos formula-decl nil exponentiation nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq_1 formula-decl nil sq "reals/")
    (sq_gt formula-decl nil sq "reals/")
    (sq_neg formula-decl nil sq "reals/")
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (atanh_series_TCC3 0
  (atanh_series_TCC3-1 nil 3322476122
   ("" (skosimp*)
    (("" (mult-cases -1)
      (("" (lemma "expt_pos")
        (("" (inst?)
          (("1" (assert) nil nil)
           ("2" (hide 1)
            (("2" (lemma "expt_pos")
              (("2" (inst?)
                (("1" (assert) nil nil)
                 ("2" (typepred "z!1")
                  (("2" (hide -3)
                    (("2" (case-replace "(1 - sq(z!1)) > 0")
                      (("1" (assert) nil nil)
                       ("2" (hide 2)
                        (("2" (expand "sq")
                          (("2" (mult-ineq -2 -2)
                            (("1" (assert) nil nil)
                             ("2" (hide 3) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_abs_lt1 nonempty-type-eq-decl nil hyperbolic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_times3 formula-decl nil real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (z!1 skolem-const-decl "real_abs_lt1" hyperbolic nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_pos formula-decl nil exponentiation nil))
   nil))
 (atanh_series 0
  (atanh_series-1 nil 3270272425
   ("" (skosimp*)
    (("" (lemma "atanh_taylors" ("z" "z!1" "n" "n!1"))
      (("" (skosimp*)
        (("" (replace -1 1)
          (("" (simplify 1)
            (("" (hide -1)
              (("" (lemma "atanh_nderiv" ("n" "3+2*n!1"))
                (("" (simplify -1)
                  (("" (expand "even?" -1)
                    (("" (lemma "div_cancel1" ("x" "1+n!1" "n0z" "2"))
                      (("" (replace -1 -2)
                        (("" (replace -2 1)
                          (("" (hide -1 -2)
                            (("" (case "1-sq(z!1)>0")
                              (("1"
                                (case "abs(z!1^(3+2*n!1))<1")
                                (("1"
                                  (rewrite "abs_div" 1)
                                  (("1"
                                    (rewrite "abs_mult" 1)
                                    (("1"
                                      (expand "abs" 1 3)
                                      (("1"
                                        (lemma
                                         "expt_pos"
                                         ("px"
                                          "1-sq(z!1)"
                                          "i"
                                          "3+2*n!1"))
                                        (("1"
                                          (lemma
                                           "posreal_times_posreal_is_posreal"
                                           ("px"
                                            "6+4*n!1"
                                            "py"
                                            "(1 - sq(z!1)) ^ (3 + 2 * n!1)"))
                                          (("1"
                                            (case
                                             "atanhND(1 + n!1)(c!1)>0")
                                            (("1"
                                              (case
                                               "abs(atanhND(1 + n!1)(c!1)) <= atanhND(1 + n!1)(z!1)")
                                              (("1"
                                                (case
                                                 "atanhND(1 + n!1)(z!1) = factorial(2+2*n!1)*(((1 - z!1) ^ (3 + 2 * n!1) + (1 + z!1) ^ (3 + 2 * n!1)) / (2 * (1 - sq(z!1)) ^ (3 + 2 * n!1)))")
                                                (("1"
                                                  (rewrite
                                                   "div_mult_pos_le1"
                                                   1)
                                                  (("1"
                                                    (expand "abs" 1 1)
                                                    (("1"
                                                      (expand "abs" -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (name-replace
                                                           "K10"
                                                           "1 - sq(z!1)")
                                                          (("1"
                                                            (name-replace
                                                             "K11"
                                                             "K10^(3+2*n!1)")
                                                            (("1"
                                                              (name-replace
                                                               "K12"
                                                               "(1-z!1)^(3+2*n!1)+(1+z!1)^(3+2*n!1)")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "lt_times_lt_pos1"
                                                                   ("px"
                                                                    "atanhND(1 + n!1)(c!1)"
                                                                    "y"
                                                                    "factorial(2 + 2 * n!1) * (K12 / (2 * K11))"
                                                                    "nnz"
                                                                    "abs(z!1 ^ (3 + 2 * n!1))"
                                                                    "w"
                                                                    "1"))
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (expand
                                                                         "factorial"
                                                                         1)
                                                                        (("1"
                                                                          (case-replace
                                                                           "factorial(2 + 2 * n!1) * (K12 / (2 * K11)) * 1 = 3 * (factorial(2 + 2 * n!1) * (K12 / (6 * K11 + 4 * (K11 * n!1)))) +
        2 *
         ((factorial(2 + 2 * n!1) * (K12 / (6 * K11 + 4 * (K11 * n!1)))) *
           n!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-5
                                                                              -6
                                                                              1))
                                                                            (("2"
                                                                              (lemma
                                                                               "div_cancel1"
                                                                               ("x"
                                                                                "factorial(2 + 2 * n!1) * (K12 / (2 * K11))"
                                                                                "n0z"
                                                                                "3+2*n!1"))
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (name-replace
                                                                                     "K13"
                                                                                     "factorial(2 + 2 * n!1)")
                                                                                    (("2"
                                                                                      (case-replace
                                                                                       "(K13 * (K12 / (2 * K11)) / (3 + 2 * n!1))=(K13 * (K12 / (6 * K11 + 4 * (K11 * n!1))))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "cross_mult"
                                                                                           ("x"
                                                                                            "K13 * (K12 / (2 * K11))"
                                                                                            "n0x"
                                                                                            "3+2*n!1"
                                                                                            "y"
                                                                                            "K13*K12"
                                                                                            "n0y"
                                                                                            "6 * K11 + 4 * (K11 * n!1)"))
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2 2)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (expand
                                                       "atanhND")
                                                      (("2"
                                                        (expand
                                                         "atanhN")
                                                        (("2"
                                                          (expand
                                                           "atanhD")
                                                          (("2"
                                                            (lemma
                                                             "cross_mult"
                                                             ("x"
                                                              "polynomial(atanhF(1 + n!1), 2 + 2 * n!1)(z!1)"
                                                              "n0x"
                                                              "(1 - sq(z!1)) ^ (3 + 2 * n!1)"
                                                              "y"
                                                              "factorial(2 + 2 * n!1) * ((1 - z!1) ^ (3 + 2 * n!1) + (1 + z!1) ^ (3 + 2 * n!1))"
                                                              "n0y"
                                                              "2 * (1 - sq(z!1)) ^ (3 + 2 * n!1)"))
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "both_sides_times1"
                                                                   ("x"
                                                                    "polynomial(atanhF(1 + n!1), 2 + 2 * n!1)(z!1) * 2"
                                                                    "n0z"
                                                                    "(1 - sq(z!1)) ^ (3 + 2 * n!1)"
                                                                    "y"
                                                                    "factorial(2 + 2 * n!1) *
         ((1 - z!1) ^ (3 + 2 * n!1) + (1 + z!1) ^ (3 + 2 * n!1))"))
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "power_polynomial"
                                                                           ("pn"
                                                                            "3+2*n!1"))
                                                                          (("1"
                                                                            (lemma
                                                                             "neg_power_polynomial"
                                                                             ("pn"
                                                                              "3+2*n!1"))
                                                                            (("1"
                                                                              (case-replace
                                                                               "(1 - z!1) ^ (3 + 2 * n!1) = polynomial(neg_power_fs(3 + 2 * n!1), 3 + 2 * n!1)(z!1)")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "(1 + z!1) ^ (3 + 2 * n!1) = polynomial(power_fs(3 + 2 * n!1), 3 + 2 * n!1)(z!1)")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "polynomial")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sigma_scal[nat]"
                                                                                       ("low"
                                                                                        "0"
                                                                                        "high"
                                                                                        "2+2*n!1"
                                                                                        "a"
                                                                                        "2"
                                                                                        "F"
                                                                                        "LAMBDA (i: nat):
               atanhF(1 + n!1)(i) * (IF i = 0 THEN 1 ELSE z!1 ^ i ENDIF)"))
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1
                                                                                         rl)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "sigma_scal[nat]"
                                                                                             ("low"
                                                                                              "0"
                                                                                              "high"
                                                                                              "3+2*n!1"
                                                                                              "a"
                                                                                              "factorial(2 + 2 * n!1)"
                                                                                              "F"
                                                                                              "LAMBDA (i: nat):power_fs(3 + 2 * n!1)(i) * (IF i = 0 THEN 1 ELSE z!1 ^ i ENDIF)"))
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1
                                                                                               rl)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sigma_scal[nat]"
                                                                                                   ("low"
                                                                                                    "0"
                                                                                                    "high"
                                                                                                    "3+2*n!1"
                                                                                                    "a"
                                                                                                    "factorial(2 + 2 * n!1)"
                                                                                                    "F"
                                                                                                    "LAMBDA (i: nat):neg_power_fs(3 + 2 * n!1)(i) * (IF i = 0 THEN 1 ELSE z!1 ^ i ENDIF)"))
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "sigma_sum"
                                                                                                         ("low"
                                                                                                          "0"
                                                                                                          "high"
                                                                                                          "3+2*n!1"
                                                                                                          "F"
                                                                                                          "LAMBDA (i: nat):
               factorial(2 + 2 * n!1) *
                (LAMBDA (i: nat):
                   power_fs(3 + 2 * n!1)(i) *
                    (IF i = 0 THEN 1 ELSE z!1 ^ i ENDIF))(i)"
                                                                                                          "G"
                                                                                                          "LAMBDA (i: nat):
               factorial(2 + 2 * n!1) *
                (LAMBDA (i: nat):
                   neg_power_fs(3 + 2 * n!1)(i) *
                    (IF i = 0 THEN 1 ELSE z!1 ^ i ENDIF))(i)"))
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (simplify
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "sigma_last"
                                                                                                                 ("low"
                                                                                                                  "0"
                                                                                                                  "high"
                                                                                                                  "3+2*n!1"
                                                                                                                  "F"
                                                                                                                  "LAMBDA (i_1: nat):
               factorial(2 + 2 * n!1) *
                (power_fs(3 + 2 * n!1)(i_1) *
                  (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF))
                +
                factorial(2 + 2 * n!1) *
                 (neg_power_fs(3 + 2 * n!1)(i_1) *
                   (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF))"))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "neg_power_fs"
                                                                                                                         1
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "power_fs"
                                                                                                                           1
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (case-replace
                                                                                                                             "(-1) ^ (3 + 2 * n!1)=-1")
                                                                                                                            (("1"
                                                                                                                              (case-replace
                                                                                                                               "sigma(0, 2 + 2 * n!1,
             LAMBDA (i_1: nat):
               factorial(2 + 2 * n!1) *
                (power_fs(3 + 2 * n!1)(i_1) *
                  (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF))
                +
                factorial(2 + 2 * n!1) *
                 (neg_power_fs(3 + 2 * n!1)(i_1) *
                   (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF)))
        +
        factorial(2 + 2 * n!1) *
         (C(3 + 2 * n!1, 3 + 2 * n!1) * z!1 ^ (3 + 2 * n!1))
        +
        factorial(2 + 2 * n!1) *
         (C(3 + 2 * n!1, 3 + 2 * n!1) * -1 * z!1 ^ (3 + 2 * n!1)) = sigma(0, 2 + 2 * n!1,
             LAMBDA (i_1: nat):
               factorial(2 + 2 * n!1) *
                (power_fs(3 + 2 * n!1)(i_1) *
                  (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF))
                +
                factorial(2 + 2 * n!1) *
                 (neg_power_fs(3 + 2 * n!1)(i_1) *
                   (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF)))")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "sigma_eq[nat]"
                                                                                                                                   ("low"
                                                                                                                                    "0"
                                                                                                                                    "high"
                                                                                                                                    "2+2*n!1"
                                                                                                                                    "F"
                                                                                                                                    "LAMBDA (i_1: nat):
              2 *
               (atanhF(1 + n!1)(i_1) *
                 (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF))"
                                                                                                                                    "G"
                                                                                                                                    "LAMBDA (i_1: nat):
               factorial(2 + 2 * n!1) *
                (power_fs(3 + 2 * n!1)(i_1) *
                  (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF))
                +
                factorial(2 + 2 * n!1) *
                 (neg_power_fs(3 + 2 * n!1)(i_1) *
                   (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF))"))
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "atanhF")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "power_fs")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "neg_power_fs")
                                                                                                                                              (("2"
                                                                                                                                                (name-replace
                                                                                                                                                 "K400"
                                                                                                                                                 "factorial(2 + 2 * n!1)")
                                                                                                                                                (("2"
                                                                                                                                                  (name-replace
                                                                                                                                                   "K401"
                                                                                                                                                   "C(3 + 2 * n!1, n!2)")
                                                                                                                                                  (("2"
                                                                                                                                                    (name-replace
                                                                                                                                                     "K402"
                                                                                                                                                     "(IF n!2 = 0 THEN 1 ELSE z!1 ^ n!2 ENDIF)")
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "even?(n!2)")
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "even_or_odd"
                                                                                                                                                         ("x"
                                                                                                                                                          "n!2"))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "even?")
                                                                                                                                                            (("1"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "expt_times"
                                                                                                                                                                   ("n0x"
                                                                                                                                                                    "-1"
                                                                                                                                                                    "i"
                                                                                                                                                                    "2"
                                                                                                                                                                    "j"
                                                                                                                                                                    "j!1"))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (case-replace
                                                                                                                                                                     "(-1)^2=1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "expt_1i")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (rewrite
                                                                                                                                                         "even_or_odd"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "odd?")
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "expt_plus"
                                                                                                                                                                   ("n0x"
                                                                                                                                                                    "-1"
                                                                                                                                                                    "i"
                                                                                                                                                                    "1"
                                                                                                                                                                    "j"
                                                                                                                                                                    "2*j!1"))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "expt_x1")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "expt_times"
                                                                                                                                                                       ("n0x"
                                                                                                                                                                        "-1"
                                                                                                                                                                        "i"
                                                                                                                                                                        "2"
                                                                                                                                                                        "j"
                                                                                                                                                                        "j!1"))
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case-replace
                                                                                                                                                                         "(-1)^2=1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "expt_1i")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (name-replace
                                                                                                                                   "K300"
                                                                                                                                   "sigma(0, 2 + 2 * n!1,
            LAMBDA (i_1: nat):
              factorial(2 + 2 * n!1) *
               (power_fs(3 + 2 * n!1)(i_1) *
                 (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF))
               +
               factorial(2 + 2 * n!1) *
                (neg_power_fs(3 + 2 * n!1)(i_1) *
                  (IF i_1 = 0 THEN 1 ELSE z!1 ^ i_1 ENDIF)))")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "expt_plus"
                                                                                                                                 ("n0x"
                                                                                                                                  "-1"
                                                                                                                                  "i"
                                                                                                                                  "1"
                                                                                                                                  "j"
                                                                                                                                  "2+2*n!1"))
                                                                                                                                (("2"
                                                                                                                                  (rewrite
                                                                                                                                   "expt_x1")
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "expt_times")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "2"
                                                                                                                                       "1+n!1"
                                                                                                                                       "-1")
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -2)
                                                                                                                                        (("2"
                                                                                                                                          (case-replace
                                                                                                                                           "(-1)^2=1")
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "expt_1i"
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -3
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (simplify
                                                                                     1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (simplify
                                                                                   1)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "abs" 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "atanhND")
                                                          (("2"
                                                            (expand
                                                             "atanhN")
                                                            (("2"
                                                              (expand
                                                               "atanhD")
                                                              (("2"
                                                                (case
                                                                 "1-sq(c!1)>0")
                                                                (("1"
                                                                  (lemma
                                                                   "expt_pos"
                                                                   ("px"
                                                                    "1-sq(c!1)"
                                                                    "i"
                                                                    "3+2*n!1"))
                                                                  (("1"
                                                                    (rewrite
                                                                     "div_mult_pos_le1"
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "div_mult_pos_le2"
                                                                       ("z"
                                                                        "polynomial(atanhF(1 + n!1), 2 + 2 * n!1)(z!1)*(1 - sq(c!1)) ^ (3 + 2 * n!1)"
                                                                        "py"
                                                                        "(1 - sq(z!1)) ^ (3 + 2 * n!1)"
                                                                        "x"
                                                                        "polynomial(atanhF(1 + n!1), 2 + 2 * n!1)(c!1)"))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "even_polynomial"
                                                                             ("a"
                                                                              "atanhF(1 + n!1)"
                                                                              "n"
                                                                              "1 + n!1"))
                                                                            (("1"
                                                                              (case
                                                                               "even_fs?(atanhF(1 + n!1))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -
                                                                                   "c!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "z!1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -3)
                                                                                          (("1"
                                                                                            (case
                                                                                             "FORALL (x:real): x^2 = sq(x)")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -
                                                                                               "c!1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "z!1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "sq(c!1)<=sq(z!1)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "both_sides_expt_pos_le"
                                                                                                         ("px"
                                                                                                          "1-sq(z!1)"
                                                                                                          "py"
                                                                                                          "1-sq(c!1)"
                                                                                                          "pm"
                                                                                                          "3+2*n!1"))
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "FORALL (n:nat): polynomial(LAMBDA (i: nat): atanhF(1 + n!1)(2 * i), n)(sq(c!1)) > 0")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "1+n!1")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "FORALL (n:nat): polynomial(LAMBDA (i: nat): atanhF(1 + n!1)(2 * i), n)(sq(c!1))
       <=
       polynomial(LAMBDA (i: nat): atanhF(1 + n!1)(2 * i), n)(sq(z!1))")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "1+n!1")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "le_times_le_pos"
                                                                                                                     ("nnx"
                                                                                                                      "polynomial(LAMBDA (i: nat): atanhF(1 + n!1)(2 * i), 1 + n!1)(sq(c!1))"
                                                                                                                      "nnz"
                                                                                                                      "(1 - sq(z!1)) ^ (3 + 2 * n!1)"
                                                                                                                      "y"
                                                                                                                      "polynomial(LAMBDA (i: nat): atanhF(1 + n!1)(2 * i), 1 + n!1)(sq(z!1))"
                                                                                                                      "w"
                                                                                                                      "(1 - sq(c!1)) ^ (3 + 2 * n!1)"))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (1
                                                                                                                    -3))
                                                                                                                  (("2"
                                                                                                                    (induct
                                                                                                                     "n")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "polynomial_n0")
                                                                                                                      (("1"
                                                                                                                        (simplify
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "polynomial")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (name-replace
                                                                                                                             "K100"
                                                                                                                             "sigma(0, j!1,
            LAMBDA (i_1: nat):
              atanhF(1 + n!1)(2 * i_1) *
               (IF i_1 = 0 THEN 1 ELSE sq(c!1) ^ i_1 ENDIF))")
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "K101"
                                                                                                                               "sigma(0, j!1,
             LAMBDA (i_1: nat):
               atanhF(1 + n!1)(2 * i_1) *
                (IF i_1 = 0 THEN 1 ELSE sq(z!1) ^ i_1 ENDIF))")
                                                                                                                              (("2"
                                                                                                                                (case-replace
                                                                                                                                 "sq(c!1)=0")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "^"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "expt_pos"
                                                                                                                                       ("px"
                                                                                                                                        "sq(z!1)"
                                                                                                                                        "i"
                                                                                                                                        "1+j!1"))
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "atanhF")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "odd?")
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "j!1>n!1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "posreal_times_posreal_is_posreal"
                                                                                                                                                 ("px"
                                                                                                                                                  "factorial(2 + 2 * n!1) * C(3 + 2 * n!1, 2 + 2 * j!1)"
                                                                                                                                                  "py"
                                                                                                                                                  "sq(z!1) ^ (1 + j!1)"))
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (lemma
                                                                                                                                   "both_sides_expt_pos_le"
                                                                                                                                   ("px"
                                                                                                                                    "sq(c!1)"
                                                                                                                                    "py"
                                                                                                                                    "sq(z!1)"
                                                                                                                                    "pm"
                                                                                                                                    "1+j!1"))
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "0 <= atanhF(1 + n!1)(2 + 2 * j!1)")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "<="
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_le1"
                                                                                                                                           ("x"
                                                                                                                                            "sq(c!1) ^ (1 + j!1)"
                                                                                                                                            "y"
                                                                                                                                            "sq(z!1) ^ (1 + j!1)"
                                                                                                                                            "pz"
                                                                                                                                            "atanhF(1 + n!1)(2 + 2 * j!1)"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (replace
                                                                                                                                           -1
                                                                                                                                           *
                                                                                                                                           rl)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "atanhF")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "odd?")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "j!1>n!1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (typepred
                                                                                                                                     "sq(c!1)")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (induct
                                                                                                                 "n")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "polynomial_n0")
                                                                                                                  (("1"
                                                                                                                    (simplify)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "atanhF")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "odd?")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "polynomial")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (name-replace
                                                                                                                         "K103"
                                                                                                                         "sigma(0, j!1,
            LAMBDA (i_1: nat):
              atanhF(1 + n!1)(2 * i_1) *
               (IF i_1 = 0 THEN 1 ELSE sq(c!1) ^ i_1 ENDIF))")
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "sq(c!1)")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             ">="
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "<="
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "expt_pos"
                                                                                                                                   ("px"
                                                                                                                                    "sq(c!1)"
                                                                                                                                    "i"
                                                                                                                                    "1+j!1"))
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "atanhF")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "odd?")
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "j!1>n!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "posreal_times_posreal_is_posreal"
                                                                                                                                             ("px"
                                                                                                                                              "factorial(2 + 2 * n!1) * C(3 + 2 * n!1, 2 + 2 * j!1)"
                                                                                                                                              "py"
                                                                                                                                              "sq(c!1) ^ (1 + j!1)"))
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   *
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "^"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "expt"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "c!1")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "trichotomy"
                                                                                                             ("x"
                                                                                                              "z!1"))
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (flatten
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "sq_lt"
                                                                                                                     ("nna"
                                                                                                                      "c!1"
                                                                                                                      "nnb"
                                                                                                                      "z!1"))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (lemma
                                                                                                                 "sq_lt"
                                                                                                                 ("nna"
                                                                                                                  "-c!1"
                                                                                                                  "nnb"
                                                                                                                  "-z!1"))
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "sq_neg")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "sq_neg")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "even_fs?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "atanhF")
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "c!1>=0")
                                                                    (("1"
                                                                      (lemma
                                                                       "sq_gt"
                                                                       ("nna"
                                                                        "1"
                                                                        "nnb"
                                                                        "c!1"))
                                                                      (("1"
                                                                        (rewrite
                                                                         "sq_1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "sq_gt"
                                                                       ("nna"
                                                                        "1"
                                                                        "nnb"
                                                                        "-c!1"))
                                                                      (("1"
                                                                        (rewrite
                                                                         "sq_1")
                                                                        (("1"
                                                                          (rewrite
                                                                           "sq_neg")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "atanhND")
                                                (("2"
                                                  (expand "atanhN")
                                                  (("2"
                                                    (expand "atanhD")
                                                    (("2"
                                                      (hide
                                                       -1
                                                       -2
                                                       -3
                                                       -4)
                                                      (("2"
                                                        (case-replace
                                                         "c!1=0")
                                                        (("1"
                                                          (rewrite
                                                           "polynomial_x0")
                                                          (("1"
                                                            (expand
                                                             "atanhF")
                                                            (("1"
                                                              (expand
                                                               "odd?")
                                                              (("1"
                                                                (rewrite
                                                                 "C_0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (cross-mult)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "even_polynomial"
                                                           ("a"
                                                            "atanhF(1 + n!1)"
                                                            "n"
                                                            "1 + n!1"
                                                            "x"
                                                            "c!1"))
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               2)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "c!1^2>0")
                                                                  (("1"
                                                                    (expand
                                                                     "polynomial")
                                                                    (("1"
                                                                      (name-replace
                                                                       "KC"
                                                                       "c!1^2")
                                                                      (("1"
                                                                        (case
                                                                         "FORALL (n:nat): sigma(0, n,
            LAMBDA (i_1: nat):
              atanhF(1 + n!1)(2 * i_1) *
               (IF i_1 = 0 THEN 1 ELSE KC ^ i_1 ENDIF))
       > 0")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "1+n!1")
                                                                          (("1"
                                                                            (name-replace
                                                                             "SS"
                                                                             "sigma(0, 1 + n!1,
            LAMBDA (i_1: nat):
              atanhF(1 + n!1)(2 * i_1) *
               (IF i_1 = 0 THEN 1 ELSE KC ^ i_1 ENDIF))")
                                                                            (("1"
                                                                              (case
                                                                               "(1 - sq(c!1)) ^ (3 + 2 * n!1) > 0")
                                                                              (("1"
                                                                                (cross-mult
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "c!1")
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    1))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "expt_pos_aux")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "3+2*n!1"
                                                                                       "1 - sq(c!1)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "neg_pos_sq_lt")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sq_1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (induct
                                                                             "n")
                                                                            (("1"
                                                                              (expand
                                                                               "sigma"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "atanhF"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "odd?"
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "C_0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "sigma"
                                                                                 1)
                                                                                (("2"
                                                                                  (name-replace
                                                                                   "K20"
                                                                                   "sigma(0, j!1,
            LAMBDA (i_1: nat):
              atanhF(1 + n!1)(2 * i_1) *
               (IF i_1 = 0 THEN 1 ELSE KC ^ i_1 ENDIF))")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "expt_pos"
                                                                                     ("px"
                                                                                      "KC"
                                                                                      "i"
                                                                                      "1+j!1"))
                                                                                    (("1"
                                                                                      (case
                                                                                       "atanhF(1 + n!1)(2 + 2 * j!1) >=0")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "both_sides_times_pos_ge1"
                                                                                         ("x"
                                                                                          "atanhF(1 + n!1)(2 + 2 * j!1)"
                                                                                          "y"
                                                                                          "0"
                                                                                          "pz"
                                                                                          "KC ^ (1 + j!1)"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "atanhF")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "odd?")
                                                                                            (("2"
                                                                                              (case
                                                                                               "j!1>n!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (expand
                                                                           "expt")
                                                                          (("2"
                                                                            (expand
                                                                             "expt")
                                                                            (("2"
                                                                              (rewrite
                                                                               "sq_rew")
                                                                              (("2"
                                                                                (lemma
                                                                                 "sq_nz_pos"
                                                                                 ("nz"
                                                                                  "c!1"))
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "even_fs?")
                                                                (("2"
                                                                  (expand
                                                                   "atanhF")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (case
                                     "FORALL (pn:posnat): abs(z!1^pn)<1")
                                    (("1" (inst - "3+2*n!1") nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (induct "pn")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (case-replace "j!1=0")
                                            (("1"
                                              (rewrite "expt_x1")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (case "z!1<0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case-replace "z!1=0")
                                                (("1"
                                                  (expand "^" 2)
                                                  (("1"
                                                    (expand "expt" 2)
                                                    (("1"
                                                      (expand "expt" 2)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "expt_plus"
                                                   ("n0x"
                                                    "z!1"
                                                    "i"
                                                    "1"
                                                    "j"
                                                    "j!1"))
                                                  (("1"
                                                    (replace -1 3)
                                                    (("1"
                                                      (rewrite
                                                       "expt_x1"
                                                       3)
                                                      (("1"
                                                        (rewrite
                                                         "abs_mult"
                                                         3)
                                                        (("1"
                                                          (lemma
                                                           "lt_times_lt_pos1"
                                                           ("px"
                                                            "abs(z!1)"
                                                            "y"
                                                            "1"
                                                            "nnz"
                                                            "abs(z!1^j!1)"
                                                            "w"
                                                            "1"))
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "abs")
                                                                (("2"
                                                                  (case
                                                                   "z!1<0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 2))
                                                            (("2"
                                                              (expand
                                                               "abs")
                                                              (("2"
                                                                (lemma
                                                                 "trichotomy"
                                                                 ("x"
                                                                  "z!1"))
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case "z!1>=0")
                                  (("1"
                                    (lemma
                                     "sq_gt"
                                     ("nna" "1" "nnb" "z!1"))
                                    (("1"
                                      (rewrite "sq_1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "sq_gt"
                                     ("nna" "1" "nnb" "-z!1"))
                                    (("1"
                                      (rewrite "sq_1")
                                      (("1"
                                        (rewrite "sq_neg")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_neg formula-decl nil sq "reals/")
    (sq_lt formula-decl nil sq "reals/")
    (sq_1 formula-decl nil sq "reals/")
    (sq_gt formula-decl nil sq "reals/")
    (sigma_sum formula-decl nil sigma "reals/")
    (sigma_last formula-decl nil sigma "reals/")
    (sigma_eq formula-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (C const-decl "posnat" binomial "reals/")
    (sigma_scal formula-decl nil sigma "reals/")
    (C_0 formula-decl nil binomial "reals/")
    (sq_0 formula-decl nil sq "reals/")
    (sq_nz_pos judgement-tcc nil sq "reals/")
    (sq_rew formula-decl nil sq "reals/")
    (neg_pos_sq_lt formula-decl nil sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/"))
   shostak)))

