(ascending_chains
 (ascending_chain?_def 0
  (ascending_chain?_def-1 nil 3513784864
   ("" (typepred "<=")
    (("" (induct "m")
      (("1" (grind) nil nil)
       ("2" (skosimp* t)
        (("2"
          (expand* "partial_order?" "preorder?" "reflexive?"
           "transitive?" "ascending_chain?")
          (("2" (flatten)
            (("2" (inst - "j!1")
              (("2" (inst - "chain!1" "n!1")
                (("2" (inst - "chain!1(n!1)")
                  (("2"
                    (inst - "chain!1(n!1)" "chain!1(j!1)"
                     "chain!1(j!1 + 1)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ascending_chain? const-decl "bool" ascending_chains nil)
    (ascending_chain type-eq-decl nil ascending_chains nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (antisymmetric? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive? const-decl "bool" relations nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil ascending_chains nil)
    (pred type-eq-decl nil defined_types nil)
    (partial_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(partial_order?[T])" ascending_chains nil))
   shostak))
 (least_upperbound_inj 0
  (least_upperbound_inj-1 nil 3513784927
   ("" (typepred "<=")
    ((""
      (expand* "least_upperbound?" "partial_order?" "antisymmetric?")
      (("" (skosimp)
        (("" (inst - "t!1" "u!1")
          (("" (inst - "u!1")
            (("" (inst - "t!1") (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((antisymmetric? const-decl "bool" relations nil)
    (least_upperbound? const-decl "bool" ascending_chains nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil ascending_chains nil)
    (pred type-eq-decl nil defined_types nil)
    (partial_order? const-decl "bool" orders nil)
    (<= formal-const-decl "(partial_order?[T])" ascending_chains nil))
   shostak)))

