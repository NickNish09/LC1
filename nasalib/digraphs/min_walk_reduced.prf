(min_walk_reduced
 (reduced?_TCC1 0
  (reduced?_TCC1-1 nil 3253624242
   ("" (skosimp*) (("" (assert) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (reduced?_TCC2 0
  (reduced?_TCC2-1 nil 3253624242
   ("" (skosimp*) (("" (assert) nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (min_walk_vert 0
  (min_walk_vert-2 nil 3560851848
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (lemma "min_walk_in")
        (("" (inst?)
          (("" (expand* "walk_from?" "from?")
            (("" (flatten)
              (("" (expand "walk?")
                (("" (flatten)
                  (("" (hide -4)
                    (("" (expand "verts_in?")
                      (("" (inst -3 "i!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (Seq type-eq-decl nil walks nil)
    (walk_from? const-decl "bool" walks nil)
    (gr_walk type-eq-decl nil min_walks nil)
    (below type-eq-decl nil naturalnumbers nil)
    (min_walk_from const-decl "Walk(Gw)" min_walks nil)
    (Walk type-eq-decl nil walks nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (walk? const-decl "bool" walks nil)
    (from? const-decl "bool" walks nil)
    (min_walk_in formula-decl nil min_walks nil)
    (T formal-type-decl nil min_walk_reduced nil))
   nil)
  (min_walk_vert-1 nil 3253624242
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (lemma "min_walk_in")
        (("" (inst?)
          (("" (expand "walk_from?")
            (("" (flatten)
              (("" (expand "walk?")
                (("" (flatten)
                  (("" (hide -4)
                    (("" (expand "verts_in?")
                      (("" (inst -3 "i!1") nil))))))))))))))))))))
    nil)
   ((edgetype type-eq-decl nil digraphs nil)
    (predigraph type-eq-decl nil digraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (prewalk type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (Seq type-eq-decl nil walks nil)
    (walk_from? const-decl "bool" walks nil)
    (gr_walk type-eq-decl nil min_walks nil)
    (min_walk_from const-decl "Walk(Gw)" min_walks nil)
    (Walk type-eq-decl nil walks nil)
    (walk? const-decl "bool" walks nil)
    (min_walk_in formula-decl nil min_walks nil))
   nil))
 (min_walk_is_reduced_TCC1 0
  (min_walk_is_reduced_TCC1-1 nil 3253624242
   ("" (skosimp*)
    (("" (expand "verts_in?")
      (("" (skosimp*)
        (("" (lemma "min_walk_vert")
          (("" (inst?)
            (("" (inst?)
              (("" (expand "finseq_appl")
                (("" (propax) nil))))))))))))))
    nil)
   ((verts_in? const-decl "bool" walks nil)
    (min_walk_vert formula-decl nil min_walk_reduced nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (walk? const-decl "bool" walks nil)
    (Walk type-eq-decl nil walks nil)
    (min_walk_from const-decl "Walk(Gw)" min_walks nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (gr_walk type-eq-decl nil min_walks nil)
    (walk_from? const-decl "bool" walks nil)
    (Seq type-eq-decl nil walks nil)
    (prewalk type-eq-decl nil walks nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (digraph type-eq-decl nil digraphs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs nil)
    (T formal-type-decl nil min_walk_reduced nil))
   nil))
 (min_walk_is_reduced 0
  (min_walk_is_reduced-3 nil 3560851944
   ("" (skosimp*)
    (("" (expand "reduced?")
      (("" (expand "finseq_appl")
        (("" (skosimp*)
          (("" (name MIN_W "min_walk_from(x!1,y!1,Gw!1)")
            (("" (replace -1)
              (("" (lemma "min_walk_is_min")
                (("" (inst?)
                  (("" (lemma "min_walk_in")
                    (("" (inst?)
                      (("" (replace -3)
                        (("" (expand* "walk_from?" "from?")
                          (("" (flatten)
                            (("" (case "k!1 = length(MIN_W) - 2")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (name
                                       RED_W
                                       "MIN_W ^ (0, length(MIN_W) - 3)")
                                      (("1"
                                        (inst -5 "RED_W")
                                        (("1"
                                          (replace -1 * rl)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand min)
                                                (("1"
                                                  (expand "walk?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "verts_in?")
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (hide -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "n!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (prop)
                                          (("1"
                                            (replace -1 * rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand min)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "verts_in?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (replace -1 * rl)
                                                (("2"
                                                  (typepred "i!1")
                                                  (("2"
                                                    (replace -2 * rl)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand min)
                                                          (("2"
                                                            (expand
                                                             "walk?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "verts_in?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst
                                   -4
                                   "MIN_W ^ (0, k!1 - 1) o MIN_W ^ (2 + k!1, length(MIN_W) - 1)")
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (expand "o ")
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand min)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "o ")
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (expand min)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (ground)
                                      (("3"
                                        (expand "o ")
                                        (("3"
                                          (expand "^")
                                          (("3"
                                            (expand min)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (lemma "walk?_cut")
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst -1 "Gw!1" "x!1" "y!1")
                                          (("4"
                                            (assert)
                                            (("4"
                                              (expand*
                                               "walk_from?"
                                               "from?")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split +)
                                    (("1"
                                      (expand "o ")
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand min)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "verts_in?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "i!1")
                                          (("2"
                                            (expand "o ")
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (expand min)
                                                (("2"
                                                  (expand "walk?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -5)
                                                      (("2"
                                                        (expand
                                                         "verts_in?")
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduced? const-decl "bool" min_walk_reduced nil)
    (from? const-decl "bool" walks nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Gw!1 skolem-const-decl "gr_walk[T](x!1, y!1)" min_walk_reduced
     nil)
    (y!1 skolem-const-decl "T" min_walk_reduced nil)
    (x!1 skolem-const-decl "T" min_walk_reduced nil)
    (RED_W skolem-const-decl "finseq[T]" min_walk_reduced nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (MIN_W skolem-const-decl "Walk[T](Gw!1)" min_walk_reduced nil)
    (k!1 skolem-const-decl "nat" min_walk_reduced nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (walk?_cut formula-decl nil walks nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min_walk_in formula-decl nil min_walks nil)
    (min_walk_is_min formula-decl nil min_walks nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil min_walk_reduced nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (edgetype type-eq-decl nil digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraphs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraphs nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (Seq type-eq-decl nil walks nil)
    (walk_from? const-decl "bool" walks nil)
    (gr_walk type-eq-decl nil min_walks nil)
    (walk? const-decl "bool" walks nil)
    (Walk type-eq-decl nil walks nil)
    (min_walk_from const-decl "Walk(Gw)" min_walks nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil)
  (min_walk_is_reduced-2 nil 3253630724
   ("" (skosimp*)
    (("" (expand "reduced?")
      (("" (expand "finseq_appl")
        (("" (skosimp*)
          (("" (name MIN_W "min_walk_from(x!1,y!1,Gw!1)")
            (("" (replace -1)
              (("" (lemma "min_walk_is_min")
                (("" (inst?)
                  (("" (lemma "min_walk_in")
                    (("" (inst?)
                      (("" (replace -3)
                        (("" (expand "walk_from?")
                          (("" (flatten)
                            (("" (case "k!1 = length(MIN_W) - 2")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (name
                                       RED_W
                                       "MIN_W ^ (0, length(MIN_W) - 3)")
                                      (("1"
                                        (inst -5 "RED_W")
                                        (("1"
                                          (replace -1 * rl)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand min)
                                                (("1"
                                                  (expand "walk?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "verts_in?")
                                                      (("1"
                                                        (split +)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (hide -4)
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "n!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (prop)
                                          (("1"
                                            (replace -1 * rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand min)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "verts_in?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (replace -1 * rl)
                                                (("2"
                                                  (typepred "i!1")
                                                  (("2"
                                                    (replace -2 * rl)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand min)
                                                          (("2"
                                                            (expand
                                                             "walk?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "verts_in?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst
                                   -4
                                   "MIN_W ^ (0, k!1 - 1) o MIN_W ^ (2 + k!1, length(MIN_W) - 1)")
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (expand "o ")
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand min)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "o ")
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (expand min)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (ground)
                                      (("3"
                                        (expand "o ")
                                        (("3"
                                          (expand "^")
                                          (("3"
                                            (expand min)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (lemma "walk?_cut")
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst -1 "Gw!1" "x!1" "y!1")
                                          (("4"
                                            (assert)
                                            (("4"
                                              (expand "walk_from?")
                                              (("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split +)
                                    (("1"
                                      (expand "o ")
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand min)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "verts_in?")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (typepred "i!1")
                                          (("2"
                                            (expand "o ")
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (expand min)
                                                (("2"
                                                  (expand "walk?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -5)
                                                      (("2"
                                                        (expand
                                                         "verts_in?")
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (inst?)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk?_cut formula-decl nil walks nil)
    (min_walk_in formula-decl nil min_walks nil)
    (min_walk_is_min formula-decl nil min_walks nil)
    (edgetype type-eq-decl nil digraphs nil)
    (predigraph type-eq-decl nil digraphs nil)
    (digraph type-eq-decl nil digraphs nil)
    (prewalk type-eq-decl nil walks nil)
    (verts_in? const-decl "bool" walks nil)
    (Seq type-eq-decl nil walks nil)
    (walk_from? const-decl "bool" walks nil)
    (gr_walk type-eq-decl nil min_walks nil)
    (walk? const-decl "bool" walks nil)
    (Walk type-eq-decl nil walks nil)
    (min_walk_from const-decl "Walk(Gw)" min_walks nil))
   nil)
  (min_walk_is_reduced-1 nil 3253624242
   ("" (skosimp*)
    (("" (expand "reduced?")
      (("" (expand "finseq_appl")
        (("" (skosimp*)
          (("" (name min_w "min_walk_from(x!1,y!1,Gw!1)")
            (("" (replace -1)
              (("" (lemma "min_walk_is_min")
                (("" (inst?)
                  (("" (lemma "min_walk_in")
                    (("" (inst?)
                      (("" (replace -3)
                        (("" (expand "walk_from?")
                          (("" (flatten)
                            (("" (case "k!1 = length(MIN_W) - 2")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (name
                                       red_w
                                       "MIN_W ^ (0, length(MIN_W) - 3)")
                                      (("1"
                                        (inst -5 "RED_W")
                                        (("1"
                                          (replace -1 * rl)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "verts_in?")
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst?)
                                                          nil)))
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (hide -4)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "n!1")
                                                              (("2"
                                                                (assert)
                                                                nil)))))))))))))))))))))))
                                         ("2"
                                          (prop)
                                          (("1"
                                            (replace -1 * rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (propax)
                                                  nil)))))))
                                           ("2"
                                            (expand "verts_in?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (replace -1 * rl)
                                                (("2"
                                                  (typepred "i!1")
                                                  (("2"
                                                    (replace -2 * rl)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand
                                                           "walk?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -5)
                                                              (("2"
                                                                (expand
                                                                 "verts_in?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))))))))))))))))))))))))))))))))))))
                               ("2"
                                (inst
                                 -4
                                 "MIN_W ^ (0, k!1 - 1) o MIN_W ^ (2 + k!1, length(MIN_W) - 1)")
                                (("1"
                                  (split -4)
                                  (("1"
                                    (expand "o ")
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (expand "empty_seq")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              nil)))))))))))
                                   ("2"
                                    (expand "o ")
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (expand "empty_seq")
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (ground)
                                              nil)))))))))))
                                   ("3"
                                    (expand "o ")
                                    (("3"
                                      (expand "^")
                                      (("3"
                                        (expand "empty_seq")
                                        (("3"
                                          (lift-if)
                                          (("3"
                                            (lift-if)
                                            (("3"
                                              (ground)
                                              nil)))))))))))
                                   ("4"
                                    (lemma "walk?_cut")
                                    (("4"
                                      (inst?)
                                      (("1"
                                        (inst -1 "Gw!1" "x!1" "y!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "walk_from?")
                                            (("1" (propax) nil)))))))
                                       ("2" (assert) nil)
                                       ("3" (assert) nil)))))))
                                 ("2"
                                  (split +)
                                  (("1"
                                    (expand "o ")
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (lift-if)
                                        (("1" (ground) nil)))))))
                                   ("2"
                                    (expand "verts_in?")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (typepred "i!1")
                                        (("1"
                                          (expand "o ")
                                          (("1"
                                            (expand "^")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -5)
                                                    (("1"
                                                      (expand
                                                       "verts_in?")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst?)
                                                          nil)
                                                         ("2"
                                                          (inst?)
                                                          nil)))))))))))))))))
                                         ("2"
                                          (skosimp*)
                                          (("2" (assert) nil)))
                                         ("3"
                                          (skosimp*)
                                          (("3" (assert) nil)))))))))))
                                 ("3" (assert) nil)
                                 ("4"
                                  (assert)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil)))

