(complex_types
 (Re_rew 0
  (Re_rew-1 nil 3455977277 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)) shostak))
 (Im_rew 0
  (Im_rew-1 nil 3455977280 ("" (grind) nil nil)
   ((Im const-decl "real" complex_types nil)) shostak))
 (eq_rew 0
  (eq_rew-1 nil 3509263154
   ("" (skosimp)
    (("" (split)
      (("1" (flatten) (("1" (grind) nil nil)) nil)
       ("2" (flatten)
        (("2" (decompose-equality)
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (complex_? adt-recognizer-decl "[complex -> boolean]" complex_types
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-decl nil complex_types nil)
    (complex_complex__extensionality formula-decl nil complex_types
     nil))
   shostak))
 (nzcomplex_TCC1 0
  (nzcomplex_TCC1-1 nil 3455977248 ("" (subtype-tcc) nil nil)
   ((Re const-decl "real" complex_types nil)) nil))
 (complex_i_TCC1 0
  (complex_i_TCC1-1 nil 3455977248 ("" (subtype-tcc) nil nil)
   ((Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil))
   nil))
 (Re_i 0
  (Re_i-1 nil 3456000372 ("" (grind) nil nil)
   ((complex_i const-decl "nzcomplex" complex_types nil)
    (Re const-decl "real" complex_types nil))
   shostak))
 (Im_i 0
  (Im_i-1 nil 3456000377 ("" (grind) nil nil)
   ((complex_i const-decl "nzcomplex" complex_types nil)
    (Im const-decl "real" complex_types nil))
   shostak))
 (Re_conjugate 0
  (Re_conjugate-1 nil 3455978062 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (conjugate const-decl "complex" complex_types nil))
   shostak))
 (Im_conjugate 0
  (Im_conjugate-1 nil 3455978065 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (conjugate const-decl "complex" complex_types nil))
   shostak))
 (nz_sq_abs_pos 0
  (nz_sq_abs_pos-1 nil 3455977248
   ("" (skosimp)
    (("" (expand "sq_abs")
      (("" (lemma "sq_plus_eq_0" ("a" "Im(n0z!1)" "b" "Re(n0z!1)"))
        (("" (typepred "n0z!1")
          (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_abs const-decl "nnreal" complex_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_plus_eq_0 formula-decl nil sq "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (complex type-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Re const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   nil))
 (complex_sq_def 0
  (complex_sq_def-1 nil 3456291067 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (sq const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_neg_neg 0
  (complex_neg_neg-1 nil 3456291074
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (eq_rew formula-decl nil complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_plus_neg 0
  (complex_plus_neg-1 nil 3456291087 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_div_def 0
  (complex_div_def-1 nil 3456291096 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (Im const-decl "real" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_add1 0
  (Re_add1-1 nil 3455977291 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Re_add2 0
  (Re_add2-1 nil 3455977297 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Re_add3 0
  (Re_add3-1 nil 3455977301 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Re_neg1 0
  (Re_neg1-1 nil 3455977305 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Re_sub1 0
  (Re_sub1-1 nil 3455977308 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Re_sub2 0
  (Re_sub2-1 nil 3455977311 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Re_sub3 0
  (Re_sub3-1 nil 3455977314 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Re_mul1 0
  (Re_mul1-1 nil 3455977317 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_mul2 0
  (Re_mul2-1 nil 3455977327 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (Re_mul3 0
  (Re_mul3-1 nil 3455977321 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (Re_div1 0
  (Re_div1-1 nil 3455977331 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_div2 0
  (Re_div2-1 nil 3455977335 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (Im const-decl "real" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Re_div3 0
  (Re_div3-1 nil 3455977338 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (/ const-decl "complex" complex_types nil))
   shostak))
 (Im_add1 0
  (Im_add1-1 nil 3455977342 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Im_add2 0
  (Im_add2-1 nil 3455977344 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Im_add3 0
  (Im_add3-1 nil 3455977347 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (+ const-decl "complex" complex_types nil))
   shostak))
 (Im_neg1 0
  (Im_neg1-1 nil 3455977350 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Im_sub1 0
  (Im_sub1-1 nil 3455977354 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Im_sub2 0
  (Im_sub2-1 nil 3455977358 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Im_sub3 0
  (Im_sub3-1 nil 3455977361 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   shostak))
 (Im_mul1 0
  (Im_mul1-1 nil 3455977364 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Im_mul2 0
  (Im_mul2-1 nil 3455977367 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (Im_mul3 0
  (Im_mul3-1 nil 3455977370 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (* const-decl "complex" complex_types nil))
   shostak))
 (Im_div1 0
  (Im_div1-1 nil 3455977373 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Im_div2 0
  (Im_div2-1 nil 3455977376 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (Im const-decl "real" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Im_div3 0
  (Im_div3-1 nil 3455977379 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (/ const-decl "complex" complex_types nil))
   shostak))
 (c_eq1 0
  (c_eq1-1 nil 3455977980 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (= const-decl "bool" complex_types nil))
   shostak))
 (c_eq2 0
  (c_eq2-1 nil 3455977984 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (= const-decl "bool" complex_types nil))
   shostak))
 (c_eq3 0
  (c_eq3-1 nil 3455977987 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (= const-decl "bool" complex_types nil))
   shostak))
 (c_ne1 0
  (c_ne1-1 nil 3455977990 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (/= const-decl "bool" complex_types nil))
   shostak))
 (c_ne2 0
  (c_ne2-1 nil 3455977993 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (/= const-decl "bool" complex_types nil))
   shostak))
 (c_ne3 0
  (c_ne3-1 nil 3455977996 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (/= const-decl "bool" complex_types nil))
   shostak))
 (complex_commutative_add 0
  (complex_commutative_add-1 nil 3472824291
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil))
   shostak))
 (complex_associative_add 0
  (complex_associative_add-1 nil 3472824297
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil))
   shostak))
 (complex_commutative_mult 0
  (complex_commutative_mult-1 nil 3472824303
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil))
   shostak))
 (complex_associative_mult 0
  (complex_associative_mult-1 nil 3472824309
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil))
   shostak))
 (complex_div_cancel1 0
  (complex_div_cancel1-1 nil 3472823605
   ("" (skosimp)
    (("" (rewrite "complex_div_def" + :dir rl)
      (("" (assert)
        (("" (lemma "nz_sq_abs_pos" ("n0z" "n0z!1"))
          (("" (assert)
            ((""
              (lemma "div_cancel3"
               ("x" " -1 * (Im(n0z!1) * Im(z!1) * ((1 * Re(n0z!1)))) -
       Im(n0z!1) * Re(z!1) * (((-1) * Im(n0z!1)))
       - Im(z!1) * Re(n0z!1) * (((-1) * Im(n0z!1)))
       + Re(n0z!1) * Re(z!1) * ((1 * Re(n0z!1)))" "n0z" "sq_abs(n0z!1)"
                "y" "Re(z!1)"))
              (("" (replace -1 1)
                ((""
                  (lemma "div_cancel3"
                   ("x" "Im(n0z!1) * Re(z!1) * ((1 * Re(n0z!1))) -
        Im(n0z!1) * Im(z!1) * (((-1) * Im(n0z!1)))
        + Im(z!1) * Re(n0z!1) * ((1 * Re(n0z!1)))
        + Re(n0z!1) * Re(z!1) * (((-1) * Im(n0z!1)))" "n0z"
                    "sq_abs(n0z!1)" "y" "Im(z!1)"))
                  (("" (replace -1)
                    (("" (hide -1 -2 -3)
                      (("" (expand "sq_abs")
                        (("" (expand "sq") (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_div_def formula-decl nil complex_types nil)
    (complex type-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (nz_sq_abs_pos judgement-tcc nil complex_types nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (Re_div2 formula-decl nil complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_div_cancel2 0
  (complex_div_cancel2-1 nil 3472825516
   ("" (skosimp)
    ((""
      (lemma "complex_commutative_mult"
       ("z1" "z!1 / n0z!1" "z2" "n0z!1"))
      (("" (use "complex_div_cancel1")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              ((""
                (name-replace "DRL1"
                 "(Im(z!1) * Im(n0z!1) + Re(z!1) * Re(n0z!1)) / sq_abs(n0z!1) *
       Re(n0z!1)")
                ((""
                  (name-replace "DRL2" "Im(n0z!1) *
        ((Im(z!1) * Re(n0z!1) - Re(z!1) * Im(n0z!1)) / sq_abs(n0z!1))")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/ const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-decl nil complex_types nil)
    (complex_commutative_mult formula-decl nil complex_types nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (complex_div_cancel1 formula-decl nil complex_types nil))
   shostak))
 (complex_div_cancel3 0
  (complex_div_cancel3-1 nil 3472827540
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (assert)
          (("1" (flatten)
            (("1" (replace -1 1 rl)
              (("1" (replace -2 1 rl)
                (("1" (hide -1 -2)
                  (("1" (assert)
                    (("1"
                      (lemma "div_cancel3"
                       ("y" "Re(z1!1)" "n0z" "sq_abs(n0z!1)" "x"
                        "(Im(z1!1) * Im(n0z!1) + Re(z1!1) * Re(n0z!1))*Re(n0z!1)-(Im(z1!1) * Re(n0z!1) - Re(z1!1) * Im(n0z!1))*Im(n0z!1)"))
                      (("1"
                        (name-replace "DRL4"
                         "((Im(z1!1) * Im(n0z!1) + Re(z1!1) * Re(n0z!1)) * Re(n0z!1) -
        (Im(z1!1) * Re(n0z!1) - Re(z1!1) * Im(n0z!1)) * Im(n0z!1))
       / sq_abs(n0z!1)")
                        (("1"
                          (lemma "div_cancel3"
                           ("y" "Im(z1!1)" "n0z" "sq_abs(n0z!1)" "x"
                            "(Im(z1!1) * Re(n0z!1) - Re(z1!1) * Im(n0z!1))*Re(n0z!1)+(Im(z1!1) * Im(n0z!1) + Re(z1!1) * Re(n0z!1))*Im(n0z!1)"))
                          (("1"
                            (name-replace "DRL5"
                             "((Im(z1!1) * Re(n0z!1) - Re(z1!1) * Im(n0z!1)) * Re(n0z!1) +
        (Im(z1!1) * Im(n0z!1) + Re(z1!1) * Re(n0z!1)) * Im(n0z!1))
       / sq_abs(n0z!1)")
                            (("1" (expand "sq_abs")
                              (("1"
                                (expand "sq")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (assert)
          (("2" (flatten)
            (("2" (replace -1)
              (("2" (replace -2)
                (("2" (hide -1 -2)
                  (("2" (assert)
                    (("2"
                      (lemma "div_cancel1"
                       ("n0z" "sq_abs(n0z!1)" "x" "Re(z2!1)"))
                      (("2"
                        (lemma "div_cancel1"
                         ("n0z" "sq_abs(n0z!1)" "x" "Im(z2!1)"))
                        (("2" (expand "sq_abs" -1 1)
                          (("2" (expand "sq_abs" -2 1)
                            (("2" (expand "sq")
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex type-decl nil complex_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_cancel3 formula-decl nil real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_cancel1 formula-decl nil real_props nil))
   shostak))
 (complex_div_cancel4 0
  (complex_div_cancel4-1 nil 3472828471
   ("" (skosimp)
    ((""
      (lemma "complex_div_cancel3"
       ("z1" "z1!1" "z2" "z2!1" "n0z" "n0z!1"))
      (("" (split)
        (("1" (flatten)
          (("1" (hide -3)
            (("1" (split -2)
              (("1" (assert)
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
               ("2" (hide 2)
                (("2" (assert)
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (hide -2)
            (("2" (split)
              (("1" (assert)
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
               ("2" (hide 2)
                (("2" (assert)
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-decl nil complex_types nil)
    (complex_div_cancel3 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_div1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil))
   shostak))
 (plus_conjugate 0
  (plus_conjugate-1 nil 3455978001 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (minus_conjugate 0
  (minus_conjugate-1 nil 3455978004 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (complex_i const-decl "nzcomplex" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_plus 0
  (conjugate_plus-1 nil 3455978007 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (+ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_neg 0
  (conjugate_neg-1 nil 3455978009 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_minus 0
  (conjugate_minus-1 nil 3455978012 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_times 0
  (conjugate_times-1 nil 3455978015 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (* const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_inv_TCC1 0
  (conjugate_inv_TCC1-1 nil 3455977248 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (complex type-decl nil complex_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (conjugate const-decl "complex" complex_types nil))
   nil))
 (conjugate_inv 0
  (conjugate_inv-1 nil 3455978018 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (Im const-decl "real" complex_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (conjugate_div 0
  (conjugate_div-1 nil 3455978021 ("" (grind) nil nil)
   ((Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_abs const-decl "nnreal" complex_types nil)
    (/ const-decl "complex" complex_types nil)
    (conjugate const-decl "complex" complex_types nil)
    (= const-decl "bool" complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (zero_times 0
  (zero_times-1 nil 3455981373
   ("" (skosimp)
    (("" (assert)
      (("" (case-replace "Re(z1!1)=0")
        (("1" (assert)
          (("1" (case-replace "Im(z1!1) = 0")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (split)
                (("1" (flatten)
                  (("1" (rewrite "zero_times3")
                    (("1" (rewrite "zero_times3")
                      (("1" (assert)
                        (("1" (rewrite "zero_times3") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (case-replace "Re(z2!1) = 0")
            (("1" (assert)
              (("1" (split)
                (("1" (flatten)
                  (("1" (rewrite "zero_times3")
                    (("1" (rewrite "zero_times3")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (flatten)
                (("2" (case-replace "Im(z2!1) = 0")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (case-replace "Im(z1!1)=0")
                      (("1" (assert) nil nil)
                       ("2"
                        (case "Re(z1!1)=(Im(z1!1) * Im(z2!1))/Re(z2!1)")
                        (("1" (hide -2)
                          (("1"
                            (case "Im(z1!1)= -(Re(z1!1) * Im(z2!1))/Re(z2!1)")
                            (("1" (hide -3)
                              (("1"
                                (lemma "trichotomy" ("x" "Re(z2!1)"))
                                (("1"
                                  (lemma "trichotomy" ("x" "Im(z2!1)"))
                                  (("1"
                                    (lemma
                                     "trichotomy"
                                     ("x" "Im(z1!1)"))
                                    (("1"
                                      (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_lt1"
                                               ("pz"
                                                "Im(z2!1)"
                                                "x"
                                                "0"
                                                "y"
                                                "Im(z1!1)"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "both_sides_div_pos_lt1"
                                                   ("pz"
                                                    "Re(z2!1)"
                                                    "x"
                                                    "0"
                                                    "y"
                                                    "Im(z2!1)*Im(z1!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("pz"
                                                        "Im(z2!1)"
                                                        "x"
                                                        "0"
                                                        "y"
                                                        "Re(z1!1)"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "both_sides_div_pos_lt1"
                                                           ("pz"
                                                            "Re(z2!1)"
                                                            "y"
                                                            "0"
                                                            "x"
                                                            "-Im(z2!1)*Re(z1!1)"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -9
                                                               -3
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -8
                                                                 -1
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (lemma
                                             "both_sides_times_pos_lt1"
                                             ("pz"
                                              "Im(z2!1)"
                                              "x"
                                              "0"
                                              "y"
                                              "Im(z1!1)"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "zero_times1")
                                                (("1"
                                                  (lemma
                                                   "both_sides_div_neg_lt1"
                                                   ("nz"
                                                    "Re(z2!1)"
                                                    "y"
                                                    "0"
                                                    "x"
                                                    "Im(z1!1) * Im(z2!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -7
                                                       -1
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "both_sides_div_neg_lt1"
                                                         ("nz"
                                                          "Re(z2!1)"
                                                          "x"
                                                          "-(Re(z1!1) * Im(z2!1))"
                                                          "y"
                                                          "0"))
                                                        (("1"
                                                          (lemma
                                                           "both_sides_times_pos_lt1"
                                                           ("pz"
                                                            "Im(z2!1)"
                                                            "x"
                                                            "0"
                                                            "y"
                                                            "-Re(z1!1)"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -8
                                                               -2
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (lemma
                                           "both_sides_times_pos_lt1"
                                           ("pz"
                                            "Im(z1!1)"
                                            "y"
                                            "0"
                                            "x"
                                            "Im(z2!1)"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "zero_times1")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (lemma
                                                   "both_sides_div_pos_lt1"
                                                   ("pz"
                                                    "Re(z2!1)"
                                                    "x"
                                                    "Im(z2!1) * Im(z1!1)"
                                                    "y"
                                                    "0"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -7
                                                       -1
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "negreal_times_negreal_is_posreal"
                                                         ("nx"
                                                          "Re(z1!1)"
                                                          "ny"
                                                          "Im(z2!1)"))
                                                        (("1"
                                                          (lemma
                                                           "both_sides_div_pos_lt1"
                                                           ("pz"
                                                            "Re(z2!1)"
                                                            "x"
                                                            "-(Re(z1!1) * Im(z2!1))"
                                                            "y"
                                                            "0"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -8
                                                               -1
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "both_sides_div_neg_lt1"
                                                   ("nz"
                                                    "Re(z2!1)"
                                                    "x"
                                                    "0"
                                                    "y"
                                                    "Im(z2!1) * Im(z1!1)"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -7
                                                       -1
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "negreal_times_negreal_is_posreal"
                                                         ("nx"
                                                          "-Re(z1!1)"
                                                          "ny"
                                                          "Im(z2!1)"))
                                                        (("1"
                                                          (lemma
                                                           "both_sides_div_neg_lt1"
                                                           ("nz"
                                                            "Re(z2!1)"
                                                            "x"
                                                            "-Re(z1!1) * Im(z2!1)"
                                                            "y"
                                                            "0"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -8
                                                               -1
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (split)
                                        (("1"
                                          (lemma
                                           "both_sides_times_pos_lt1"
                                           ("pz"
                                            "Im(z2!1)"
                                            "x"
                                            "Im(z1!1)"
                                            "y"
                                            "0"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split)
                                              (("1"
                                                (lemma
                                                 "both_sides_div_pos_lt1"
                                                 ("pz"
                                                  "Re(z2!1)"
                                                  "x"
                                                  "Im(z1!1) * Im(z2!1)"
                                                  "y"
                                                  "0"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -7 -1 rl)
                                                    (("1"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("pz"
                                                        "Im(z2!1)"
                                                        "x"
                                                        "0"
                                                        "y"
                                                        "-Re(z1!1)"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "posreal_div_posreal_is_posreal"
                                                           ("px"
                                                            "-Re(z1!1)*Im(z2!1)"
                                                            "py"
                                                            "Re(z2!1)"))
                                                          (("1"
                                                            (replace
                                                             -8
                                                             -1
                                                             rl)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "negreal_div_negreal_is_posreal"
                                                 ("nx"
                                                  "Im(z1!1)*Im(z2!1)"
                                                  "ny"
                                                  "Re(z2!1)"))
                                                (("1"
                                                  (replace -7 -1 rl)
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times_pos_lt1"
                                                     ("pz"
                                                      "Re(z1!1)"
                                                      "x"
                                                      "-Im(z2!1)"
                                                      "y"
                                                      "0"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "negreal_div_negreal_is_posreal"
                                                         ("nx"
                                                          "-Im(z2!1)*Re(z1!1)"
                                                          "ny"
                                                          "Re(z2!1)"))
                                                        (("1"
                                                          (replace
                                                           -8
                                                           -1
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (lemma
                                           "negreal_times_negreal_is_posreal"
                                           ("nx"
                                            "Im(z1!1)"
                                            "ny"
                                            "Im(z2!1)"))
                                          (("1"
                                            (split)
                                            (("1"
                                              (lemma
                                               "both_sides_div_pos_lt1"
                                               ("pz"
                                                "Re(z2!1)"
                                                "x"
                                                "0"
                                                "y"
                                                "Im(z1!1) * Im(z2!1)"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -7 -1 rl)
                                                  (("1"
                                                    (lemma
                                                     "negreal_times_negreal_is_posreal"
                                                     ("nx"
                                                      "-Re(z1!1)"
                                                      "ny"
                                                      "Im(z2!1)"))
                                                    (("1"
                                                      (lemma
                                                       "posreal_div_posreal_is_posreal"
                                                       ("px"
                                                        "-Re(z1!1)*Im(z2!1)"
                                                        "py"
                                                        "Re(z2!1)"))
                                                      (("1"
                                                        (replace
                                                         -8
                                                         -1
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (lemma
                                               "both_sides_div_neg_lt1"
                                               ("nz"
                                                "Re(z2!1)"
                                                "x"
                                                "Im(z1!1) * Im(z2!1)"
                                                "y"
                                                "0"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -7 -1 rl)
                                                  (("1"
                                                    (lemma
                                                     "negreal_times_negreal_is_posreal"
                                                     ("nx"
                                                      "Re(z1!1)"
                                                      "ny"
                                                      "Im(z2!1)"))
                                                    (("1"
                                                      (lemma
                                                       "negreal_div_negreal_is_posreal"
                                                       ("nx"
                                                        "-Re(z1!1)*Im(z2!1)"
                                                        "ny"
                                                        "Re(z2!1)"))
                                                      (("1"
                                                        (replace
                                                         -8
                                                         -1
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (c_eq3 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_div_neg_lt1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (negreal_div_negreal_is_posreal judgement-tcc nil real_types nil)
    (trichotomy formula-decl nil real_axioms nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (zero_times3 formula-decl nil real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (complex type-decl nil complex_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (neg_nzcomplex 0
  (neg_nzcomplex-1 nil 3455980658 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (complex type-decl nil complex_types nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (- const-decl "complex" complex_types nil))
   nil))
 (mul_nzcomplex1 0
  (mul_nzcomplex1-1 nil 3455980777
   ("" (skosimp)
    (("" (typepred "n0z1!1")
      (("" (typepred "n0z2!1")
        (("" (assert)
          (("" (lemma "zero_times" ("z1" "n0z1!1" "z2" "n0z2!1"))
            (("" (assert)
              (("" (split)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (complex type-decl nil complex_types nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (c_eq3 formula-decl nil complex_types nil)
    (zero_times formula-decl nil complex_types nil))
   nil))
 (mul_nzcomplex2 0
  (mul_nzcomplex2-1 nil 3455980777
   ("" (skosimp)
    (("" (assert)
      (("" (typepred "n0x!1")
        (("" (typepred "n0z!1") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   nil))
 (mul_nzcomplex3 0
  (mul_nzcomplex3-1 nil 3455980777
   ("" (skosimp)
    (("" (assert)
      (("" (typepred "n0x!1")
        (("" (typepred "n0z!1") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (Im_mul3 formula-decl nil complex_types nil)
    (Re_mul3 formula-decl nil complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (complex type-decl nil complex_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   nil))
 (div_nzcomplex1 0
  (div_nzcomplex1-1 nil 3455989916
   ("" (skosimp)
    (("" (typepred "n0z1!1")
      (("" (typepred "n0z2!1")
        (("" (assert)
          ((""
            (lemma "mul_nzcomplex1"
             ("n0z1" "n0z1!1" "n0z2" "conjugate(n0z2!1)"))
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (complex type-decl nil complex_types nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Re_div1 formula-decl nil complex_types nil)
    (Im_div1 formula-decl nil complex_types nil)
    (Re_conjugate formula-decl nil complex_types nil)
    (Im_conjugate formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (conjugate const-decl "complex" complex_types nil)
    (mul_nzcomplex1 judgement-tcc nil complex_types nil))
   nil))
 (div_nzcomplex2 0
  (div_nzcomplex2-1 nil 3455989916
   ("" (skosimp)
    (("" (typepred "n0x!1")
      (("" (typepred "n0z!1")
        (("" (assert)
          (("" (split)
            (("1" (assert)
              (("1"
                (lemma "nzreal_times_nzreal_is_nzreal"
                 ("nzx" "n0x!1" "nzy" "Re(n0z!1)"))
                (("1" (typepred "sq_abs(n0z!1)")
                  (("1" (lemma "trichotomy" ("x" "n0x!1 * Re(n0z!1)"))
                    (("1" (split)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (lemma "nzreal_times_nzreal_is_nzreal"
               ("nzx" "n0x!1" "nzy" "Im(n0z!1)"))
              (("1" (assert) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nz_sq_abs_pos application-judgement "posreal" complex_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Re_div2 formula-decl nil complex_types nil)
    (Im_div2 formula-decl nil complex_types nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_abs const-decl "nnreal" complex_types nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trichotomy formula-decl nil real_axioms nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (complex type-decl nil complex_types nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   nil))
 (div_nzcomplex3 0
  (div_nzcomplex3-1 nil 3455989916 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (complex type-decl nil complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (/ const-decl "complex" complex_types nil))
   nil))
 (complex_sq_neg 0
  (complex_sq_neg-1 nil 3472822788
   ("" (skosimp) (("" (expand "sq") (("" (assert) nil nil)) nil)) nil)
   ((sq const-decl "complex" complex_types nil)
    (Re_neg1 formula-decl nil complex_types nil)
    (Im_neg1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_sq_times 0
  (complex_sq_times-1 nil 3472822805
   ("" (skosimp)
    (("" (assert) (("" (expand "sq") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (sq const-decl "complex" complex_types nil))
   shostak))
 (complex_sq_plus 0
  (complex_sq_plus-1 nil 3472822867
   ("" (skosimp)
    (("" (assert) (("" (expand "sq") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (sq const-decl "complex" complex_types nil))
   shostak))
 (complex_sq_minus 0
  (complex_sq_minus-1 nil 3472822895
   ("" (skosimp) (("" (expand "sq") (("" (assert) nil nil)) nil)) nil)
   ((sq const-decl "complex" complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Re_mul2 formula-decl nil complex_types nil)
    (Im_mul2 formula-decl nil complex_types nil)
    (Re_add1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (Im_add1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_sq_neg_minus 0
  (complex_sq_neg_minus-1 nil 3472822915
   ("" (skosimp) (("" (expand "sq") (("" (assert) nil nil)) nil)) nil)
   ((sq const-decl "complex" complex_types nil)
    (Re_sub1 formula-decl nil complex_types nil)
    (Im_sub1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (c_eq1 formula-decl nil complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complex_sq_div_TCC1 0
  (complex_sq_div_TCC1-1 nil 3472822488
   ("" (skosimp)
    (("" (expand "sq")
      (("" (lemma "mul_nzcomplex1" ("n0z1" "n0z!1" "n0z2" "n0z!1"))
        (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "complex" complex_types nil)
    (mul_nzcomplex1 application-judgement "nzcomplex" complex_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (mul_nzcomplex1 judgement-tcc nil complex_types nil)
    (complex type-decl nil complex_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Re const-decl "real" complex_types nil)
    (Im const-decl "real" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil))
   nil))
 (complex_sq_div 0
  (complex_sq_div-1 nil 3472822942
   ("" (skosimp)
    ((""
      (lemma "complex_div_cancel4"
       ("z2" "sq(z!1 / n0z!1)" "z1" "sq(z!1)" "n0z" "sq(n0z!1)"))
      (("" (replace -1)
        (("" (hide -1)
          ((""
            (lemma "complex_sq_times"
             ("z1" "z!1 / n0z!1" "z2" "n0z!1"))
            ((""
              (lemma "complex_div_cancel2" ("z" "z!1" "n0z" "n0z!1"))
              (("" (name-replace "DRL1" "sq(z!1 / n0z!1) * sq(n0z!1)")
                (("" (name-replace "DRL2" "(z!1 / n0z!1) * n0z!1")
                  (("" (expand "sq")
                    (("" (assert)
                      (("" (flatten) (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/ const-decl "complex" complex_types nil)
    (sq const-decl "complex" complex_types nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types nil)
    (Im const-decl "real" complex_types nil)
    (Re const-decl "real" complex_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complex type-decl nil complex_types nil)
    (complex_div_cancel4 formula-decl nil complex_types nil)
    (complex_div_cancel2 formula-decl nil complex_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (c_eq1 formula-decl nil complex_types nil)
    (Re_mul1 formula-decl nil complex_types nil)
    (Im_mul1 formula-decl nil complex_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "complex" complex_types nil)
    (complex_sq_times formula-decl nil complex_types nil))
   shostak)))

