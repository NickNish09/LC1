%
%
% Purpose : a single stage majority voter with 
%           validity and agreement properties.
%
%

majority_stage
[
  S: posnat,  % Number of sources 
  D: posnat,  % Number of destinations 
  T: TYPE+    % Message type
] : THEORY

  BEGIN

  IMPORTING
    exact_comm_stage[S, D, T],
    majority_properties[S, T]

  s: VAR below(S)
  d, d1, d2: VAR below(D)
  v: VAR T

  src_set: VAR non_empty_finite_set[below(S)]
  dst_set: VAR non_empty_finite_set[below(D)]

  sent: VAR [below(S) -> T]
  rcvd: VAR [below(D) -> [below(S) -> T]]
  check: VAR [below(D) -> [below(S) -> [T -> bool]]]

  mf: VAR majority_function

  majority_vote(mf)(rcvd, check)(d): T =
    majority(mf)(rcvd(d), enabled(rcvd, check)(d))

  majority_at_destination: LEMMA
      majority_correct?(sent, rcvd, check) AND
      enabled_within?(rcvd, check)(src_set) AND
      uniform?(sent, v)(src_set)
    IMPLIES
      majority_value_set(enabled(rcvd, check)(d), rcvd(d))(v)

  majority_validity: THEOREM
      majority_correct?(sent, rcvd, check) AND
      enabled_within?(rcvd, check)(src_set) AND
      uniform?(sent, v)(src_set)
    IMPLIES
      majority_vote(mf)(rcvd, check)(d) = v

  consensus_validity: COROLLARY
      majority_correct?(sent, rcvd, check) AND
      enabled_within?(rcvd, check)(src_set) AND
      uniform?(sent, v)(src_set)
    IMPLIES
      uniform?(majority_vote(mf)(rcvd, check), v)(dst_set)

  agreement_generation_alt: THEOREM
      all_symmetric?(rcvd, check)
    IMPLIES
      majority_vote(mf)(rcvd, check)(d1) = majority_vote(mf)(rcvd, check)(d2)

  agreement_generation: THEOREM
      all_symmetric?(rcvd, check)
    IMPLIES
      EXISTS v:
         uniform?(majority_vote(mf)(rcvd, check), v)(dst_set)

  % diagnostic evidence

  % if all good sources agree then a source that votes for a different value
  % cannot be good
  faulty_source: LEMMA
      enabled_within?(rcvd, check)(src_set) AND
      uniform?(sent, v)(src_set) AND
      enabled(rcvd, check)(d)(s) AND
      NOT majority_vote(mf)(rcvd, check)(d) = rcvd(d)(s)
    IMPLIES
      NOT majority_correct_element?(sent, rcvd, check)(s)

  % if destination d observes the absence of a majority and a majority
  % of sources are correct, then the correct sources do not agree
  sources_disagree: COROLLARY
      majority_correct?(sent, rcvd, check) AND
      enabled_within?(rcvd, check)(src_set) AND
      NOT majority_exists?(rcvd(d), enabled(rcvd, check)(d))
    IMPLIES
      NOT (EXISTS v: uniform?(sent, v)(src_set))

  % Either all destinations agree or at least one of the participating
  % sources is asymmetric 
  asymmetric_source: COROLLARY
      (EXISTS v:
        uniform?(majority_vote(mf)(rcvd, check), v)(dst_set))
    OR
      (EXISTS s: NOT symmetric_source?(rcvd, check)(s))

END majority_stage

